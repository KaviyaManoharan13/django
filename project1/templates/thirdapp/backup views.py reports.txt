from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.views import View
from django.views.generic import TemplateView
from basemodel.models import *
from organization.models import * 
from inspection.models import *
from checkpoints.models import * 
from datetime import date, datetime, timedelta as td
from django.core.urlresolvers import reverse
from django.http import JsonResponse
from .forms import *
from django.views.generic.edit import FormView
from django.template.response import TemplateResponse
from dateutil.parser import parse
from reports.templatetags import custom_tags
from collections import defaultdict
from collections import Counter
from itertools import chain
from django.http import HttpResponse
import json
from django.db.models import Q, Count, Sum, ExpressionWrapper, F, fields
from reports.models import CAPA, CAPARecords
from django.shortcuts import render, render_to_response
from login.views import LoginRequiredMixin, get_user_dict
import numpy as np
from django.utils.datastructures import MultiValueDictKeyError
from django.core.mail import send_mail
from web.settings import EMAIL_HOST_USER, Product_name,Parts_name
from django.core.mail import EmailMultiAlternatives
from django.template.loader import get_template
from django.template import Context
from django.template import Template, Context
from smtplib import SMTPRecipientsRefused
from alert.models import VinAlertLog
from django.db import IntegrityError
from datetime import timedelta
from django.db import connection


class Common(object):

    def parse_date(self, date):
        return datetime.strptime(date, '%d-%m-%Y %H:%M:%S').date()
        
    def get_date_lists(self, from_date, to_date):
        import  pdb;pdb.set_trace
        _date_list = []
        delta = to_date - from_date
        for i in range(delta.days + 1):
            _date = from_date + td(days=i)
            _date_list.append(_date.strftime('%d-%m-%Y'))
        ## import  pdb;pdb.set_trace
        ##ppm_rft = rft_ppm
        return _date_list

    def get_date_list(self, from_date, to_date,rft_ppm):
        #import  pdb;pdb.set_trace
        _date_list = []
        delta = to_date - from_date
        for i in range(delta.days + 1):
            _date = from_date + td(days=i)
            _date_list.append(_date.strftime('%d-%m-%Y'))
        ## import  pdb;pdb.set_trace
        ppm_rft = rft_ppm
        return _date_list,ppm_rft
    
    def get_vin_details(self,user):
        if user['plant'] != '':
            return VinDetails.objects.filter(stations__in=Stations.objects.filter(cells__plants=user['plant']))
        else:
            return VinDetails.objects.all()

class RftView(LoginRequiredMixin, TemplateView):
    common = Common()
    template_name = 'reports/rft.html'

    def get_context_data(self, **kwargs):
       # # import  pdb;pdb.set_trace
        context = super(RftView, self).get_context_data(**kwargs)
        rolldown_filter_form = RftRolldownFilterForm(
            user=get_user_dict(self.request),
            )
        d2_stage_filter_form = RftD2StageFilterForm(
            user=get_user_dict(self.request)
            )
        final_filter_form = RftFinalFilterForm(
            user=get_user_dict(self.request)
            )
        overall_filter_form = RftOverallFilterForm(
            user=get_user_dict(self.request)
            )
        context = {
            'rolldown_filter_form': rolldown_filter_form,
            'd2_stage_filter_form': d2_stage_filter_form,
            'final_filter_form': final_filter_form,
            'overall_filter_form': overall_filter_form
        }
        return context
	
class RftFilterView(View):
    # # import pdb;pdb.set_trace()
    def post(self, request):
        # # import pdb;pdb.set_trace()
        if 'rft_rolldown_plants' in request.POST or 'rft_rolldown_models' in request.POST:
            rolldown_form = RftRolldownFilterForm(user=get_user_dict(self.request), initial=request.POST)
            rolldown_filter_form = self.render_to_rft_rolldown_template(request, rolldown_form)
            return JsonResponse(rolldown_filter_form, safe=False)
        if 'rft_d2_stage_plants' in request.POST or 'rft_d2_stage_models' in request.POST:
            d2_stage_form = RftD2StageFilterForm(user=get_user_dict(self.request), initial=request.POST)
            d2_stage_filter_form = self.render_to_rft_d2_stage_template(request, d2_stage_form)
            return JsonResponse(d2_stage_filter_form, safe=False)
        if 'rft_final_plants' in request.POST or 'rft_final_models' in request.POST:
            final_form = RftFinalFilterForm(user=get_user_dict(self.request), initial=request.POST)
            final_filter_form = self.render_to_rft_final_template(request, final_form)
            return JsonResponse(final_filter_form, safe=False)
        if 'rft_overall_plants' in request.POST or 'rft_overall_models' in request.POST:
            overall_form = RftOverallFilterForm(user=get_user_dict(self.request), initial=request.POST)
            overall_filter_form = self.render_to_rft_overall_template(request, overall_form)
            return JsonResponse(overall_filter_form, safe=False)

    def render_to_rft_rolldown_template(self, request, form):
        template = TemplateResponse(request, 'reports/rft_rolldown_filter_form.html', {
            'rolldown_filter_form': form,
        })
        template.render()
        return template.content

    def render_to_rft_d2_stage_template(self, request, form):
        template = TemplateResponse(request, 'reports/rft_d2_stage_filter_form.html', {
            'd2_stage_filter_form': form,
        })
        template.render()
        return template.content

    def render_to_rft_final_template(self, request, form):
        template = TemplateResponse(request, 'reports/rft_final_filter_form.html', {
            'final_filter_form': form,
        })
        template.render()
        return template.content

    def render_to_rft_overall_template(self, request, form):
        template = TemplateResponse(request, 'reports/rft_overall_filter_form.html', {
            'overall_filter_form': form,
        })
        template.render()
        return template.content

class RftSearchView(View):
    # import psyco
    # psyco.full()
    common = Common()
  
    def get_data_dict(self, info, date_list,rft_ppm, rft_ok, not_ok, no_of_tractors, mark_data, RFT_percentage,PPM_percentage, subinfo):
        rft_avg_percentage = []
        ppm_avg_percentage = []
        if str(rft_ppm) == "rft":
            try:
                avg_percentage =  [(float(sum(rft_ok))/float((sum(rft_ok)+sum(not_ok)))*100)]
            except ZeroDivisionError:
                avg_percentage = [0]
            rft_avg_percentage = avg_percentage
            ppm_avg_percentage = None
        else:
            try:
                avg_percentage =  [(float(sum(rft_ok))/float((sum(rft_ok)+sum(not_ok)))*1000000)]
            except ZeroDivisionError:
                avg_percentage = [0]  
            rft_avg_percentage = None
            ppm_avg_percentage = avg_percentage          

        
        fromdate = date_list[0][0]
        enddate = date_list[len(date_list)-2][-1]
        data_dict = {
        'info': info + fromdate + ' to ' + enddate,
        'subinfo':subinfo,
        'date_list': date_list[0],
        'rft_ppm':date_list[1],
        'rft_ok': rft_ok,
        'not_ok': not_ok,
        'mark_data': mark_data,
        'no_of_tractors': no_of_tractors,
        'RFT_percentage': RFT_percentage,
        'PPM_percentage':PPM_percentage,
        'rft_avg_percentage':rft_avg_percentage,
        'ppm_avg_percentage':ppm_avg_percentage,
        'total_no_of_tractor':(sum(rft_ok)+sum(not_ok)),
        'total_no_of_rft_ok_tractor': (sum(rft_ok))
        }
        return data_dict

    def overall(self,user, vin, date_list, rollout_stations):
        rft_ok = []
        not_ok = []
        mark_data = []
        no_of_tractors = []
        RFT_percentage = []
        PPM_percentage = []
        rft_ppm = date_list[1]
            
        for _date in date_list[0]:
            my_date = datetime.strptime(_date, '%d-%m-%Y')
            current_vin = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'), stations__in=rollout_stations)
            vin_obj = VinStatusGroupWise.objects.filter(vin__in=set(current_vin))
            
            rft_ok.append(vin_obj.filter(overall_status='RFT OK').count())
            not_ok.append(vin_obj.filter(overall_status='RFT NOT OK').count())
            # not_ok.append(vin_obj.exclude(overall_status='RFT OK').count())
            #tractors_count = vin_obj.exclude(overall_status=None).count()
            tractors_count = vin_obj.count()
            no_of_tractors.append(tractors_count)
            
            if vin_obj.filter(overall_status='RFT OK').count() != 0:
                #import pdb;pdb.set_trace()
                if str(rft_ppm) == 'rft':
                    percentage = float("{0:.2f}".format((vin_obj.filter(overall_status='RFT OK').count()/float(tractors_count))*100))
                else:
                    defect_overall = 0
                    for dpu in current_vin:
                      #import pdb;pdb.set_trace()
                      inspection_defects =  InspectionDefects.objects.filter(vin=dpu)
                      defect_overall  += inspection_defects.count()
                      percentage_ok = float("{0:.2f}".format((vin_obj.filter(overall_status='RFT OK').count()/float(tractors_count))*1000000))
                      percentage = float("{0:.2f}".format((defect_overall/float(tractors_count))*1000000))
                    print('defect', defect_overall ,percentage, tractors_count)  
                    print('RFT ok', vin_obj.filter(overall_status='RFT OK').count() ,percentage_ok, tractors_count)

            else:
                percentage = 0
            if str(rft_ppm) == 'rft':
                RFT_percentage.append(percentage)
                PPM_percentage = None
            else:
                RFT_percentage = None
                PPM_percentage.append(percentage)
            if len(vin_obj) != 0:
                percentage_dict={
                    'name': "Overall RFT(%)",
                    'value': percentage,
                    'xAxis': _date,
                    'yAxis': percentage
                }
                mark_data.append(percentage_dict)
        data = self.get_data_dict('Overall RFT-PPM Report(D1+D2+D3) For ', date_list,rft_ppm, rft_ok, not_ok, no_of_tractors, mark_data, RFT_percentage,PPM_percentage,self.subinfo)
        return data

    def final(self, user, vin, date_list, rollout_stations):
        rft_ok = []
        not_ok = []
        mark_data = []
        no_of_tractors = []
        RFT_percentage = []
        PPM_percentage = []
        rft_ppm = date_list[1]
        # # import  pdb;pdb.set_trace         
        for _date in date_list[0]:
            my_date = datetime.strptime(_date, '%d-%m-%Y')
            current_vin = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'),  stations__in=rollout_stations)
            vin_obj = VinStatusGroupWise.objects.filter(vin__in=set(current_vin))

            rft_ok.append(vin_obj.filter(d3_status='RFT OK').count())
            not_ok.append(vin_obj.filter(d3_status='RFT NOT OK').count())
            # not_ok.append(vin_obj.exclude(d3_status='RFT OK').count())
            #tractors_count = vin_obj.exclude(d3_status=None).count()
            tractors_count = vin_obj.count()
            no_of_tractors.append(tractors_count)

            if vin_obj.filter(d3_status='RFT OK').count() != 0:
                if str(rft_ppm) =='rft':
                    percentage = float("{0:.2f}".format((vin_obj.filter(d3_status='RFT OK').count()/float(tractors_count))*100))
                else:
                    defect_overall = 0
                    for dpu in current_vin:
                      #import pdb;pdb.set_trace()
                      inspection_defects =  InspectionDefects.objects.filter(vin=dpu)
                      defect_overall  += inspection_defects.count()
                      percentage_ok = float("{0:.2f}".format((vin_obj.filter(overall_status='RFT OK').count()/float(tractors_count))*1000000))
                      percentage = float("{0:.2f}".format((defect_overall/float(tractors_count))*1000000))
                    print('defect', defect_overall ,percentage, tractors_count)  
                    print('RFT ok', vin_obj.filter(overall_status='RFT OK').count() ,percentage_ok, tractors_count)

            else:
                percentage = 0
            if str(rft_ppm) == 'rft':
                RFT_percentage.append(percentage)  
                PPM_percentage = None
            else:
                PPM_percentage.append(percentage)   
                RFT_percentage = None
            if len(vin_obj) != 0:
                percentage_dict={
                    'name': "Final RFT(%)",
                    'value': percentage,
                    'xAxis': _date,
                    'yAxis': percentage
                }
                mark_data.append(percentage_dict)
        data = self.get_data_dict('D3 Final RFT-PPM Report For ', date_list,rft_ppm, rft_ok, not_ok, no_of_tractors, mark_data, RFT_percentage,PPM_percentage, self.subinfo)
        return data

    def d2_stage(self, user, vin, date_list, rollout_stations):
        # # import pdb;pdb.set_trace()
        rft_ok = []
        not_ok = []
        mark_data = []
        no_of_tractors = []
        RFT_percentage = []
        PPM_percentage = []
        rft_ppm = date_list[1]
        for _date in date_list[0]:
            my_date = datetime.strptime(_date, '%d-%m-%Y')
            current_vin = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'), stations__in=rollout_stations)
            vin_obj = VinStatusGroupWise.objects.filter(vin__in=set(current_vin))

            rft_ok.append(vin_obj.filter(d2_status='RFT OK').count())
            not_ok.append(vin_obj.filter(d2_status='RFT NOT OK').count())
            # not_ok.append(vin_obj.exclude(d2_status='RFT OK').count())
            tractors_count = vin_obj.count()
            #tractors_count = vin_obj.exclude(d2_status=None).count()
            no_of_tractors.append(tractors_count)

            if vin_obj.filter(d2_status='RFT OK').count() != 0:
                if str(rft_ppm) == 'rft':
                    percentage = float("{0:.2f}".format((vin_obj.filter(d2_status='RFT OK').count()/float(tractors_count))*100))
                else:
                    defect_overall = 0
                    for dpu in current_vin:
                      #import pdb;pdb.set_trace()
                      inspection_defects =  InspectionDefects.objects.filter(vin=dpu)
                      defect_overall  += inspection_defects.count()
                      percentage_ok = float("{0:.2f}".format((vin_obj.filter(overall_status='RFT OK').count()/float(tractors_count))*1000000))
                      percentage = float("{0:.2f}".format((defect_overall/float(tractors_count))*1000000))
                    print('defect', defect_overall ,percentage, tractors_count)  
                    print('RFT ok', vin_obj.filter(overall_status='RFT OK').count() ,percentage_ok, tractors_count)
            else:
                percentage = 0
            if str(rft_ppm) == 'rft':
                RFT_percentage.append(percentage) 
                PPM_percentage = None
            else:
                RFT_percentage = None
                PPM_percentage.append(percentage)
            if len(vin_obj) != 0:
                percentage_dict={
                    'name': "Rolldown RFT(%)",
                    'value': percentage,
                    'xAxis': _date,
                    'yAxis': percentage
                }
                mark_data.append(percentage_dict)
        data = self.get_data_dict('D2 RFT-PPM For ', date_list,rft_ppm, rft_ok, not_ok, no_of_tractors, mark_data, RFT_percentage,PPM_percentage, self.subinfo)
        return data

    def rolldown(self, user, vin, date_list,rollout_stations):
        # # # # # # # import pdb;pdb.set_trace()
        rft_ok = []
        not_ok = []
        mark_data = []
        no_of_tractors = []
        RFT_percentage = []
        PPM_percentage = []
        rft_ppm = date_list[1]
        for _date in date_list[0]:
            # # # # # # # # # import pdb;pdb.set_trace()
            my_date = datetime.strptime(_date, '%d-%m-%Y')
            current_vin = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'), stations__in=rollout_stations)
            vin_obj = VinStatusGroupWise.objects.filter(vin__in=set(current_vin.values_list('vin', flat=True)))
            
            rft_ok.append(vin_obj.filter(d1_status='RFT OK').count())
            not_ok.append(vin_obj.filter(d1_status='RFT NOT OK').count())
            # not_ok.append(vin_obj.exclude(d1_status='RFT OK').count())
            # Q(first_name__startswith='R') | Q(last_name__startswith='D')
            # tractors_count = vin_obj.exclude(d1_status=None).count()
            tractors_count = vin_obj.count()
            no_of_tractors.append(tractors_count)

            if vin_obj.filter(d1_status='RFT OK').count() != 0:
                if str(rft_ppm) == 'rft':
                    percentage = float("{0:.2f}".format((vin_obj.filter(d1_status='RFT OK').count()/float(tractors_count))*100))
                else:
                    defect_overall = 0
                    for dpu in current_vin:
                      #import pdb;pdb.set_trace()
                      inspection_defects =  InspectionDefects.objects.filter(vin=dpu)
                      defect_overall  += inspection_defects.count()
                      percentage_ok = float("{0:.2f}".format((vin_obj.filter(overall_status='RFT OK').count()/float(tractors_count))*1000000))
                      percentage = float("{0:.2f}".format((defect_overall/float(tractors_count))*1000000))
                    print('defect', defect_overall ,percentage, tractors_count)  
                    print('RFT ok', vin_obj.filter(overall_status='RFT OK').count() ,percentage_ok, tractors_count)
            else:
                percentage = 0
            if str(rft_ppm) == 'rft':
                RFT_percentage.append(percentage) 
                PPM_percentage = None
            else:
                RFT_percentage = None
                PPM_percentage.append(percentage)
            if len(vin_obj) != 0:
                percentage_dict={
                    'name': "Rolldown RFT(%)",
                    'value': percentage,
                    'xAxis': _date,
                    'yAxis': percentage
                }
                mark_data.append(percentage_dict)
        # import pdb;pdb.set_trace()
        data = self.get_data_dict('D1 Rolldown RFT-PPM Report For ', date_list,rft_ppm, rft_ok, not_ok, no_of_tractors, mark_data, RFT_percentage,PPM_percentage, self.subinfo)
        return data

    def post(self, request, *args, **kwargs):
        self.subinfo = ""
        user=get_user_dict(request)
        from_date = self.common.parse_date(request.POST.get('from_date'))
        to_date = self.common.parse_date(request.POST.get('to_date')) 
        if "contact" not in request.POST:
            rft_ppm = "rft"
        else:
            rft_ppm = request.POST['contact']
        
        date_list = self.common.get_date_list(from_date, to_date,rft_ppm)
        vin_obj = self.common.get_vin_details(user)
        
        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

        vin = vin_obj.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])

        rolldown_stations = ModelStations.objects.filter(station_group__description='D1').values_list('station', flat=True)
        # rolldown_vin = vin.filter(stations__in=rolldown_stations)
        # # rolldown_vin = rolldown_vin.extra()
        d2_stations = ModelStations.objects.filter(station_group__description='D2').values_list('station', flat=True)
        # d2_vin = vin.filter(stations__in=d2_stations)
        final_stations = ModelStations.objects.filter(station_group__description='D3').values_list('station', flat=True)
        overall_station = ModelStations.objects.filter(station_group__description__in=['D3','D2','D1']).values_list('station', flat=True)
        # final_vin = vin.filter(stations__in=final_stations)
        # # # # # # # # import pdb;pdb.set_trace()
        rolldown = self.rolldown(user, vin, date_list, rolldown_stations)
        d2_stage = self.d2_stage(user, vin, date_list, d2_stations)
        final = self.final(user, vin, date_list, final_stations)
        overall = self.overall(user, vin, date_list, overall_station)

        data = {
            'user': user,
            'rolldown': rolldown,
            'd2_stage': d2_stage,
            'final': final,
            'overall': overall
        }
        print(data)
        return JsonResponse(data, safe=False)
    
class RftRolldownView(View):
    common = Common()
    # # # # # # # # # import pdb;pdb.set_trace()()
    
    def __init__(self):
        # # # # # # # # # import pdb;pdb.set_trace()()
        self.rft_ok = []
        self.not_ok = []  
        self.mark_data = []  
        self.no_of_tractors = []
        self.RFT_percentage = []
        self.PPM_percentage = []
        self.f_plant = 'All'
        self.f_market = 'All'
        self.f_shift = 'All'
        self.f_base = 'All'
        self.f_model = 'All'
        self.f_station = 'All'

    def rft_rolldown_chart_data(self, request, user, vin, form, date_list):
        for _date in date_list[0]:
            #print ("-------------")
            if 'form[rft_rolldown_plants]' in form and form['form[rft_rolldown_plants]'] != [u'']:
                self.f_plant = Plants.objects.get(id=int(form['form[rft_rolldown_plants]'][0])).plant_name
                vin = vin.filter(stations__cells__plants=int(form['form[rft_rolldown_plants]'][0]))           
            if 'form[rft_rolldown_markets]' in form and form['form[rft_rolldown_markets]'] != [u'']:
                self.f_market = Market.objects.get(id=int(form['form[rft_rolldown_markets]'][0])).description
                vin = vin.filter(model__market=int(form['form[rft_rolldown_markets]'][0]))
            if 'form[rft_rolldown_shifts]' in form and form['form[rft_rolldown_shifts]'] != [u'']:
                self.f_shift = Shifts.objects.get(id=int(form['form[rft_rolldown_shifts]'][0])).description
                vin = vin.filter(shift=int(form['form[rft_rolldown_shifts]'][0]))
            if 'form[rft_rolldown_base_models]' in form and form['form[rft_rolldown_base_models]'] != [u'']:
                self.f_base = BaseModels.objects.get(id=int(form['form[rft_rolldown_base_models]'][0])).description
                vin = vin.filter(model__base_models=int(form['form[rft_rolldown_base_models]'][0]))
            if 'form[rft_rolldown_models]' in form and form['form[rft_rolldown_models]'] != [u'']:
                self.f_model = Models.objects.get(id=int(form['form[rft_rolldown_models]'][0])).description
                vin = vin.filter(model=int(form['form[rft_rolldown_models]'][0]))
            if 'form[rft_rolldown_stations]' in form and form['form[rft_rolldown_stations]'] != [u'']:
                self.f_station = Stations.objects.get(id=int(form['form[rft_rolldown_stations]'][0])).description
                vin = vin.filter(stations=int(form['form[rft_rolldown_stations]'][0]))

            my_date = datetime.strptime(_date, '%d-%m-%Y')
            # current_vin = vin
            current_vin = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            if 'form[rft_rolldown_stations]' in request.POST and form['form[rft_rolldown_stations]'] != [u'']:
                
                # defects_vin = len(set(InspectionDefects.objects.filter(vin__in=set(current_vin)).values_list('vin', flat=True)))
                # rft_vin = len(current_vin)-defects_vin
                defects_vin = VinStatusStationWise.objects.filter(vin__in=set(current_vin), status="RFT NOT OK", stations__in=form['form[rft_rolldown_stations]']).count()
                rft_vin = VinStatusStationWise.objects.filter(vin__in=set(current_vin), status="RFT OK", stations__in=form['form[rft_rolldown_stations]']).count()
                self.not_ok.append(defects_vin)
                self.rft_ok.append(rft_vin)
                

                vin_obj = VinStatusStationWise.objects.filter(vin__in=set(current_vin))                
                # self.rft_ok.append(vin_obj.filter(status='RFT OK').count())
                # self.not_ok.append(vin_obj.filter(status='RFT NOT OK').count())
                # self.not_ok.append(vin_obj.exclude(status='RFT OK').count())
                tractors_count = vin_obj.count()
                self.no_of_tractors.append(tractors_count)
                # import pdb;pdb.set_trace()
                if request.POST.get('form[rft_ppm_category]') != "":
                    rft_ppm = request.POST.get('form[rft_ppm_category]')
                else:
                    rft_ppm = date_list[1]
                if vin_obj.filter(status='RFT OK').count() != 0:
                    
                    if str(rft_ppm) == '1':
                    # percentage = float("{0:.2f}".format((vin_obj.filter(status='RFT OK').count()/float(tractors_count))*100))
                        percentage = float("{0:.2f}".format((rft_vin/float(tractors_count))*100))
                    else:
                        percentage = float("{0:.2f}".format((rft_vin/float(tractors_count))*1000000))

                else:
                    percentage = 0
                if request.POST.get('form[rft_ppm_category]') != "":
                    rft_ppm = request.POST.get('form[rft_ppm_category]')
                else:
                    rft_ppm = date_list[1]
                if str(rft_ppm) == '1':
                    self.RFT_percentage.append(percentage)
                    self.PPM_percentage = None
                else:
                    self.PPM_percentage.append(percentage)
                    self.RFT_percentage = None 
            else:
                vin_obj = VinStatusGroupWise.objects.filter(vin__in=set(current_vin))
                self.rft_ok.append(vin_obj.filter(d1_status='RFT OK').count())
                self.not_ok.append(vin_obj.filter(d1_status='RFT NOT OK').count())
                # self.not_ok.append(vin_obj.exclude(d1_status='RFT OK').count())
                tractors_count = vin_obj.exclude(Q(d1_status=None) | Q(d1_status='')).count()
                self.no_of_tractors.append(tractors_count)

                if vin_obj.filter(d1_status='RFT OK').count() != 0:
                    if request.POST.get('form[rft_ppm_category]') != "":
                        rft_ppm = request.POST.get('form[rft_ppm_category]')
                    else:
                        rft_ppm = date_list[1]
                    if str(rft_ppm) == '1':
                        percentage = float("{0:.2f}".format((vin_obj.filter(d1_status='RFT OK').count()/float(tractors_count))*100))
                    else:
                        percentage = float("{0:.2f}".format((vin_obj.filter(d1_status='RFT OK').count()/float(tractors_count))*1000000))
                else:
                    percentage = 0
            # import pdb;pdb.set_trace()
            if request.POST.get('form[rft_ppm_category]') != "":
                rft_ppm = request.POST.get('form[rft_ppm_category]')
            else:
                rft_ppm = date_list[1]
            if str(rft_ppm) == '1':
                self.RFT_percentage.append(percentage)
                self.PPM_percentage = None
            else:
                self.PPM_percentage.append(percentage)
                self.RFT_percentage = None   
            if len(vin_obj) != 0:
                percentage_dict={
                    'name': "Rolldown RFT(%)",
                    'value': percentage,
                    'xAxis': _date,
                    'yAxis': percentage
                }
                self.mark_data.append(percentage_dict)
        
        if request.POST.get('form[rft_ppm_category]') != "":
            rft_ppm = request.POST.get('form[rft_ppm_category]')
        else:
            rft_ppm = date_list[1]
        rft_avg_percentage = []
        ppm_avg_percentage = []
        if str(rft_ppm) == "1":
            try:
                avg_percentage =  [(float(sum(self.rft_ok))/float((sum(self.rft_ok)+sum(self.not_ok)))*100)]
            except ZeroDivisionError:
                avg_percentage = [0]
            rft_avg_percentage = avg_percentage
            ppm_avg_percentage = None
        else:
            try:
                avg_percentage =  [(float(sum(self.rft_ok))/float((sum(self.rft_ok)+sum(self.not_ok)))*1000000)]
            except ZeroDivisionError:
                avg_percentage = [0]  
        rft_avg_percentage = None
        ppm_avg_percentage = avg_percentage          


        fromdate = date_list[0][0]
        enddate = date_list[len(date_list)-2][-1]
        data = {
        'info': 'D1 Rolldown RFT-PPM Report For ' + fromdate + ' to ' + enddate,
        'subinfo':"Plants:"+self.f_plant+" Markets:"+self.f_market+" Shifts:"+self.f_shift+" Base Models:"+self.f_base+" Models:"+self.f_model+" Stations:"+self.f_station,
        'date_list': date_list[0],
        'rft_ok': self.rft_ok,
        'not_ok': self.not_ok,
        'no_of_tractors': self.no_of_tractors,
        'mark_data': self.mark_data,
        'RFT_percentage': self.RFT_percentage,
        'PPM_percentage':self.PPM_percentage,
        'rft_avg_percentage':rft_avg_percentage,
        'ppm_avg_percentage':ppm_avg_percentage,
        'total_no_of_tractor':(sum(self.rft_ok)+sum(self.not_ok)),
        'total_no_of_rft_ok_tractor': (sum(self.rft_ok))
        }
        # # # # # # # # # import pdb;pdb.set_trace()()
        #print data
        return data


    def removekey(self, dictionary, key):
        remove = dict(dictionary)
        del remove[key]
        return remove

    def post(self, request, *args, **kwargs):
        super(RftRolldownView, self).__init__()
        user = get_user_dict(request)
        form = dict(request.POST)
        # form = {key: value for key, value in dict(request.POST).items() if value != [u'']}
        # # # # import pdb;pdb.set_trace()
        from_date = self.common.parse_date(form['from_date'][0])
        to_date = self.common.parse_date(form['to_date'][0]) 
        if "form[rft_ppm_category]" in request.POST:
            if request.POST.get('form[rft_ppm_category]') == '':
                rft_ppm = "1"
            else:
                rft_ppm = request.POST.get('form[rft_ppm_category]')
        else:
            rft_ppm = "1"
        date_list = self.common.get_date_list(from_date, to_date,rft_ppm)
        
        vin_obj = self.common.get_vin_details(user)

        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

        vin = vin_obj.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        ## import  pdb;pdb.set_trace
        # if 'form[rft_rolldown_stations]' in form and form['form[rft_rolldown_stations]'] != [u'']:
        #     stations = ModelStations.objects.filter(station_group__description='D1').values_list('station', flat=True)
        # else:
        stations = ModelStations.objects.filter(station_group__description='D1').values_list('station', flat=True)
        vin_obj = vin.filter(stations__in=stations).values_list('vin', flat=True)
        vin_obj=VinStatusGroupWise.objects.exclude(Q(d1_status=None) | Q(d1_status='')).filter(vin__in=vin_obj).values_list('vin', flat=True)
        vin = vin.filter(vin__in=vin_obj)

        # date_from = parse(request.POST.get('from_date')).strftime('%Y-%m-%d %H:%M:%S')
        # date_to = parse(request.POST.get('to_date')).strftime('%Y-%m-%d %H:%M:%S')
        # vin = vin_obj.filter(created_time__range=[date_from, date_to])
        # form = [self.removekey(form, key) for key in ['from_date', 'to_date']]
        # # # # # # # # # import pdb;pdb.set_trace()()
        data = self.rft_rolldown_chart_data(request, user, vin, form, date_list)

        return JsonResponse(data, safe=False)



# class RftRolldownView(View):
#     common = Common()
#     # # # # # # # # # import pdb;pdb.set_trace()()
    
#     def __init__(self):
#         # # # # # # # # # import pdb;pdb.set_trace()()
#         self.rft_ok = []
#         self.not_ok = []  
#         self.mark_data = []  
#         self.no_of_tractors = []
#         self.RFT_percentage = []
#         self.PPM_percentage = []
#         self.f_plant = 'All'
#         self.f_market = 'All'
#         self.f_shift = 'All'
#         self.f_base = 'All'
#         self.f_model = 'All'
#         self.f_station = 'All'

#     def rft_rolldown_chart_data(self, request, user, vin, form, date_list):
#         for _date in date_list[0]:
#             print ("-------------")
#             if 'form[rft_rolldown_plants]' in form and form['form[rft_rolldown_plants]'] != [u'']:
#                 self.f_plant = Plants.objects.get(id=int(form['form[rft_rolldown_plants]'][0])).plant_name
#                 vin = vin.filter(stations__cells__plants=int(form['form[rft_rolldown_plants]'][0]))           
#             if 'form[rft_rolldown_markets]' in form and form['form[rft_rolldown_markets]'] != [u'']:
#                 self.f_market = Market.objects.get(id=int(form['form[rft_rolldown_markets]'][0])).description
#                 vin = vin.filter(model__market=int(form['form[rft_rolldown_markets]'][0]))
#             if 'form[rft_rolldown_shifts]' in form and form['form[rft_rolldown_shifts]'] != [u'']:
#                 self.f_shift = Shifts.objects.get(id=int(form['form[rft_rolldown_shifts]'][0])).description
#                 vin = vin.filter(shift=int(form['form[rft_rolldown_shifts]'][0]))
#             if 'form[rft_rolldown_base_models]' in form and form['form[rft_rolldown_base_models]'] != [u'']:
#                 self.f_base = BaseModels.objects.get(id=int(form['form[rft_rolldown_base_models]'][0])).description
#                 vin = vin.filter(model__base_models=int(form['form[rft_rolldown_base_models]'][0]))
#             if 'form[rft_rolldown_models]' in form and form['form[rft_rolldown_models]'] != [u'']:
#                 self.f_model = Models.objects.get(id=int(form['form[rft_rolldown_models]'][0])).description
#                 vin = vin.filter(model=int(form['form[rft_rolldown_models]'][0]))
#             if 'form[rft_rolldown_stations]' in form and form['form[rft_rolldown_stations]'] != [u'']:
#                 self.f_station = Stations.objects.get(id=int(form['form[rft_rolldown_stations]'][0])).description
#                 vin = vin.filter(stations=int(form['form[rft_rolldown_stations]'][0]))

#             my_date = datetime.strptime(_date, '%d-%m-%Y')
#             # current_vin = vin
#             current_vin = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
#             import  pdb;pdb.set_trace
#             if 'form[rft_rolldown_stations]' in request.POST and form['form[rft_rolldown_stations]'] != [u'']:
                
#                 # defects_vin = len(set(InspectionDefects.objects.filter(vin__in=set(current_vin)).values_list('vin', flat=True)))
#                 # rft_vin = len(current_vin)-defects_vin
#                 defects_vin = VinStatusStationWise.objects.filter(vin__in=set(current_vin), status="RFT NOT OK", stations__in=form['form[rft_rolldown_stations]']).count()
#                 rft_vin = VinStatusStationWise.objects.filter(vin__in=set(current_vin), status="RFT OK", stations__in=form['form[rft_rolldown_stations]']).count()
#                 self.not_ok.append(defects_vin)
#                 self.rft_ok.append(rft_vin)
                

#                 vin_obj = VinStatusStationWise.objects.filter(vin__in=set(current_vin))                
#                 # self.rft_ok.append(vin_obj.filter(status='RFT OK').count())
#                 # self.not_ok.append(vin_obj.filter(status='RFT NOT OK').count())
#                 # self.not_ok.append(vin_obj.exclude(status='RFT OK').count())
#                 tractors_count = vin_obj.count()
#                 self.no_of_tractors.append(tractors_count)
#                 # import pdb;pdb.set_trace()
#                 if request.POST['form[rft_ppm_category]'] != "":
#                     rft_ppm = request.POST['form[rft_ppm_category]']
#                 else:
#                     rft_ppm = date_list[1]
#                 if vin_obj.filter(status='RFT OK').count() != 0:
                    
#                     if str(rft_ppm) == '1':
#                     # percentage = float("{0:.2f}".format((vin_obj.filter(status='RFT OK').count()/float(tractors_count))*100))
#                         percentage = float("{0:.2f}".format((rft_vin/float(tractors_count))*100))
#                     else:
#                         percentage = float("{0:.2f}".format((rft_vin/float(tractors_count))*1000000))

#                 else:
#                     percentage = 0
#                 if request.POST['form[rft_ppm_category]'] != "":
#                     rft_ppm = request.POST['form[rft_ppm_category]']
#                 else:
#                     rft_ppm = date_list[1]
#                 if str(rft_ppm) == '1':
#                     self.RFT_percentage.append(percentage)
#                     self.PPM_percentage = None
#                 else:
#                     self.PPM_percentage.append(percentage)
#                     self.RFT_percentage = None 
#             else:
#                 vin_obj = VinStatusGroupWise.objects.filter(vin__in=set(current_vin))
#                 self.rft_ok.append(vin_obj.filter(d1_status='RFT OK').count())
#                 self.not_ok.append(vin_obj.filter(d1_status='RFT NOT OK').count())
#                 # self.not_ok.append(vin_obj.exclude(d1_status='RFT OK').count())
#                 tractors_count = vin_obj.exclude(Q(d1_status=None) | Q(d1_status='')).count()
#                 self.no_of_tractors.append(tractors_count)

#                 if vin_obj.filter(d1_status='RFT OK').count() != 0:
#                     if request.POST['form[rft_ppm_category]'] != "":
#                         rft_ppm = request.POST['form[rft_ppm_category]']
#                     else:
#                         rft_ppm = date_list[1]
#                     if str(rft_ppm) == '1':
#                         percentage = float("{0:.2f}".format((vin_obj.filter(d1_status='RFT OK').count()/float(tractors_count))*100))
#                     else:
#                         percentage = float("{0:.2f}".format((vin_obj.filter(d1_status='RFT OK').count()/float(tractors_count))*1000000))
#                 else:
#                     percentage = 0
#             import pdb;pdb.set_trace()
#             if request.POST.get('form[rft_ppm_category]') != "":
#                 rft_ppm = request.POST.get('form[rft_ppm_category]')
#             else:
#                 rft_ppm = date_list[1]
#             if str(rft_ppm) == '1':
#                 self.RFT_percentage.append(percentage)
#                 self.PPM_percentage = None
#             else:
#                 self.PPM_percentage.append(percentage)
#                 self.RFT_percentage = None   
#             if len(vin_obj) != 0:
#                 percentage_dict={
#                     'name': "Rolldown RFT(%)",
#                     'value': percentage,
#                     'xAxis': _date,
#                     'yAxis': percentage
#                 }
#                 self.mark_data.append(percentage_dict)
        
#         if request.POST.get('form[rft_ppm_category]') != "":
#             rft_ppm = request.POST.get('form[rft_ppm_category]')
#         else:
#             rft_ppm = date_list[1]
#         rft_avg_percentage = []
#         ppm_avg_percentage = []
#         if str(rft_ppm) == "1":
#             try:
#                 avg_percentage =  [(float(sum(self.rft_ok))/float((sum(self.rft_ok)+sum(self.not_ok)))*100)]
#             except ZeroDivisionError:
#                 avg_percentage = [0]
#             rft_avg_percentage = avg_percentage
#             ppm_avg_percentage = None
#         else:
#             try:
#                 avg_percentage =  [(float(sum(self.rft_ok))/float((sum(self.rft_ok)+sum(self.not_ok)))*1000000)]
#             except ZeroDivisionError:
#                 avg_percentage = [0]  
#         rft_avg_percentage = None
#         ppm_avg_percentage = avg_percentage          


#         fromdate = date_list[0][0]
#         enddate = date_list[len(date_list)-2][-1]
#         data = {
#         'info': 'D1 Rolldown RFT-PPM Report For ' + fromdate + ' to ' + enddate,
#         'subinfo':"Plants:"+self.f_plant+" Markets:"+self.f_market+" Shifts:"+self.f_shift+" Base Models:"+self.f_base+" Models:"+self.f_model+" Stations:"+self.f_station,
#         'date_list': date_list[0],
#         'rft_ok': self.rft_ok,
#         'not_ok': self.not_ok,
#         'no_of_tractors': self.no_of_tractors,
#         'mark_data': self.mark_data,
#         'RFT_percentage': self.RFT_percentage,
#         'PPM_percentage':self.PPM_percentage,
#         'rft_avg_percentage':rft_avg_percentage,
#         'ppm_avg_percentage':ppm_avg_percentage,
#         'total_no_of_tractor':(sum(self.rft_ok)+sum(self.not_ok)),
#         'total_no_of_rft_ok_tractor': (sum(self.rft_ok))
#         }
#         # # # # # # # # # import pdb;pdb.set_trace()()
    
#         return data


#     def removekey(self, dictionary, key):
#         remove = dict(dictionary)
#         del remove[key]
#         return remove

#     def post(self, request, *args, **kwargs):
#         super(RftRolldownView, self).__init__()
#         user = get_user_dict(request)
#         form = dict(request.POST)
#         # form = {key: value for key, value in dict(request.POST).items() if value != [u'']}
#         # # # # import pdb;pdb.set_trace()
#         from_date = self.common.parse_date(form['from_date'][0])
#         to_date = self.common.parse_date(form['to_date'][0]) 
#         if "form[rft_ppm_category]" in request.POST:
#             if request.POST.get('form[rft_ppm_category]') == '':
#                 rft_ppm = "1"
#             else:
#                 rft_ppm = request.POST.get('form[rft_ppm_category]')
#         else:
#             rft_ppm = "1"
#         date_list = self.common.get_date_list(from_date, to_date,rft_ppm)
        
#         vin_obj = self.common.get_vin_details(user)

#         date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
#         date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

#         vin = vin_obj.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
#         ## import  pdb;pdb.set_trace
#         # if 'form[rft_rolldown_stations]' in form and form['form[rft_rolldown_stations]'] != [u'']:
#         #     stations = ModelStations.objects.filter(station_group__description='D1').values_list('station', flat=True)
#         # else:
#         stations = ModelStations.objects.filter(station_group__description='D1').values_list('station', flat=True)
#         vin_obj = vin.filter(stations__in=stations).values_list('vin', flat=True)
#         vin_obj=VinStatusGroupWise.objects.exclude(Q(d1_status=None) | Q(d1_status='')).filter(vin__in=vin_obj).values_list('vin', flat=True)
#         vin = vin.filter(vin__in=vin_obj)

#         # date_from = parse(request.POST.get('from_date')).strftime('%Y-%m-%d %H:%M:%S')
#         # date_to = parse(request.POST.get('to_date')).strftime('%Y-%m-%d %H:%M:%S')
#         # vin = vin_obj.filter(created_time__range=[date_from, date_to])
#         # form = [self.removekey(form, key) for key in ['from_date', 'to_date']]
#         # # # # # # # # # import pdb;pdb.set_trace()()
#         data = self.rft_rolldown_chart_data(request, user, vin, form, date_list)

#         return JsonResponse(data, safe=False)

class RftD2StageView(View):
    common = Common()
    
    def __init__(self):
        self.rft_ok = []
        self.not_ok = []  
        self.mark_data = []  
        self.no_of_tractors = []
        self.RFT_percentage = []
        self.PPM_percentage = []
        self.f_plant = 'All'
        self.f_market = 'All'
        self.f_shift = 'All'
        self.f_base = 'All'
        self.f_model = 'All'
        self.f_station = 'All'

    def rft_d2_stage_chart_data(self, request, user, vin, form, date_list):
        # # import pdb;pdb.set_trace()
        for _date in date_list[0]:
            if 'form[rft_d2_stage_plants]' in form and form['form[rft_d2_stage_plants]'] != [u'']:
                self.f_plant = Plants.objects.get(id=int(form['form[rft_d2_stage_plants]'][0])).plant_name
                vin = vin.filter(stations__cells__plants=int(form['form[rft_d2_stage_plants]'][0]))
            if 'form[rft_d2_stage_markets]' in form and form['form[rft_d2_stage_markets]'] != [u'']:
                self.f_market = Market.objects.get(id=int(form['form[rft_d2_stage_markets]'][0])).description
                vin = vin.filter(model__market=int(form['form[rft_d2_stage_markets]'][0]))
            if 'form[rft_d2_stage_shifts]' in form and form['form[rft_d2_stage_shifts]'] != [u'']:
                self.f_shift = Shifts.objects.get(id=int(form['form[rft_d2_stage_shifts]'][0])).description
                vin = vin.filter(shift=int(form['form[rft_d2_stage_shifts]'][0]))
            if 'form[rft_d2_stage_base_models]' in form and form['form[rft_d2_stage_base_models]'] != [u'']:
                self.f_base = BaseModels.objects.get(id=int(form['form[rft_d2_stage_base_models]'][0])).description
                vin = vin.filter(model__base_models=int(form['form[rft_d2_stage_base_models]'][0]))
            if 'form[rft_d2_stage_models]' in form and form['form[rft_d2_stage_models]'] != [u'']:
                self.f_model = Models.objects.get(id=int(form['form[rft_d2_stage_models]'][0])).description
                vin = vin.filter(model=int(form['form[rft_d2_stage_models]'][0]))
            if 'form[rft_d2_stage_stations]' in form and form['form[rft_d2_stage_stations]'] != [u'']:
                self.f_station = Stations.objects.get(id=int(form['form[rft_d2_stage_stations]'][0])).description
                vin = vin.filter(stations=int(form['form[rft_d2_stage_stations]'][0]))

            my_date = datetime.strptime(_date, '%d-%m-%Y')

            current_vin = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            # # # import pdb;pdb.set_trace()
            if 'form[rft_d2_stage_stations]' in request.POST and form['form[rft_d2_stage_stations]'] != [u'']:
                # defects_vin = len(set(InspectionDefects.objects.filter(vin__in=set(current_vin)).values_list('vin', flat=True)))
                # rft_vin = len(current_vin)-defects_vin
                defects_vin = VinStatusStationWise.objects.filter(vin__in=set(current_vin), status="RFT NOT OK", stations__in=form['form[rft_d2_stage_stations]']).count()
                rft_vin = VinStatusStationWise.objects.filter(vin__in=set(current_vin), status="RFT OK", stations__in=form['form[rft_d2_stage_stations]']).count()
                self.not_ok.append(defects_vin)
                self.rft_ok.append(rft_vin)

                vin_obj = VinStatusStationWise.objects.filter(vin__in=set(current_vin))
                # self.rft_ok.append(vin_obj.filter(status='RFT OK').count())
                # self.not_ok.append(vin_obj.filter(status='RFT NOT OK').count())
                # self.not_ok.append(vin_obj.exclude(status='RFT OK').count())
                tractors_count = vin_obj.count()
                self.no_of_tractors.append(tractors_count)
                # # # import pdb;pdb.set_trace()
                if vin_obj.filter(status='RFT OK').count() != 0:
                    if request.POST.get('form[rft_ppmd2_category]') != "":
                        rft_ppm = request.POST.get('form[rft_ppmd2_category]')
                    else:
                        rft_ppm = date_list[1]
                    if str(rft_ppm) == '1':
                        percentage = float("{0:.2f}".format((rft_vin/float(tractors_count))*100))
                    else:
                        percentage = float("{0:.2f}".format((rft_vin/float(tractors_count))*1000000))
                else:
                    percentage = 0
                if request.POST.get('form[rft_ppmd2_category]') != "":
                    rft_ppm = request.POST.get('form[rft_ppmd2_category]')
                else:
                    rft_ppm = date_list[1]
                if str(rft_ppm) == '1':
                    self.RFT_percentage.append(percentage)
                    self.PPM_percentage = None
                else:
                    self.PPM_percentage.append(percentage)
                    self.RFT_percentage = None 
            else:
                vin_obj = VinStatusGroupWise.objects.filter(vin__in=set(current_vin))
                self.rft_ok.append(vin_obj.filter(d2_status='RFT OK').count())
                self.not_ok.append(vin_obj.filter(d2_status='RFT NOT OK').count())
                # self.not_ok.append(vin_obj.exclude(d2_status='RFT OK').count())
                tractors_count = vin_obj.exclude(Q(d2_status=None) | Q(d2_status='')).count()
                self.no_of_tractors.append(tractors_count)
                
                if vin_obj.filter(d2_status='RFT OK').count() != 0:
                    if request.POST.get('form[rft_ppmd2_category]') != "":
                        rft_ppm = request.POST.get('form[rft_ppmd2_category]')
                    else:
                        rft_ppm = date_list[1]
                    if str(rft_ppm) == "1":
                        percentage = float("{0:.2f}".format((vin_obj.filter(d2_status='RFT OK').count()/float(tractors_count))*100))
                    else:
                        percentage = float("{0:.2f}".format((vin_obj.filter(d2_status='RFT OK').count()/float(tractors_count))*1000000))
                else:
                    percentage = 0
            # # import pdb;pdb.set_trace()
            if request.POST.get('form[rft_ppmd2_category]') != "":
                rft_ppm = request.POST.get('form[rft_ppmd2_category]')
            else:
                rft_ppm = date_list[1]
            
            if str(rft_ppm) == '1':
                self.RFT_percentage.append(percentage)
                self.PPM_percentage = None
            else:
                self.PPM_percentage.append(percentage)
                self.RFT_percentage = None                

            if len(vin_obj) != 0:
                percentage_dict={
                    'name': "D2 Stage RFT(%)",
                    'value': percentage,
                    'xAxis': _date,
                    'yAxis': percentage
                }
                self.mark_data.append(percentage_dict)
        # # # import pdb;pdb.set_trace()
        rft_ppm = date_list[1]
        rft_avg_percentage = []
        ppm_avg_percentage = []
        if request.POST.get('form[rft_ppmd2_category]') != "":
            rft_ppm = request.POST.get('form[rft_ppmd2_category]')
        else:
            rft_ppm = date_list[1]
        if str(rft_ppm) == "1":
            try:
                avg_percentage =  [(float(sum(self.rft_ok))/float((sum(self.rft_ok)+sum(self.not_ok)))*100)]
            except ZeroDivisionError:
                avg_percentage = [0]
            rft_avg_percentage = avg_percentage
            ppm_avg_percentage = None
        else:
            try:
                avg_percentage =  [(float(sum(self.rft_ok))/float((sum(self.rft_ok)+sum(self.not_ok)))*1000000)]
            except ZeroDivisionError:
                avg_percentage = [0] 
            rft_avg_percentage = None
            ppm_avg_percentage = avg_percentage  
        fromdate = date_list[0][0]
        enddate = date_list[len(date_list)-2][-1]         

        data = {
        'info': 'D2 RFT-PPM Report For ' + fromdate + ' to ' + enddate,
        'subinfo':"Plants:"+self.f_plant+" Markets:"+self.f_market+" Shifts:"+self.f_shift+" Base Models:"+self.f_base+" Models:"+self.f_model+" Stations:"+self.f_station,
        'date_list': date_list[0],
        'rft_ok': self.rft_ok,
        'not_ok': self.not_ok,
        'no_of_tractors': self.no_of_tractors,
        'mark_data': self.mark_data,
        'RFT_percentage': self.RFT_percentage, 
        'PPM_percentage':self.PPM_percentage,
        'rft_avg_percentage':rft_avg_percentage,
        'ppm_avg_percentage':ppm_avg_percentage,
        'total_no_of_tractor':(sum(self.rft_ok)+sum(self.not_ok)),
        'total_no_of_rft_ok_tractor': (sum(self.rft_ok))
        }

        return data


    def removekey(self, dictionary, key):
        remove = dict(dictionary)
        del remove[key]
        return remove

    def post(self, request, *args, **kwargs):
        # # # # # # # # # import pdb;pdb.set_trace()()
        super(RftD2StageView, self).__init__()
        user = get_user_dict(request)
        form = dict(request.POST)
        # form = {key: value for key, value in dict(request.POST).items() if value != [u'']}
        if "form[rft_ppm_category]" in request.POST:
            if request.POST.get('form[rft_ppm_category]') == '':
                rft_ppm = "1"
            else:
                rft_ppm = request.POST.get('form[rft_ppm_category]')
        else:
            rft_ppm = "1"
        from_date = self.common.parse_date(form['from_date'][0])
        to_date = self.common.parse_date(form['to_date'][0]) 
        date_list = self.common.get_date_list(from_date, to_date,rft_ppm)
        
        vin_obj = self.common.get_vin_details(user)

        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        
        vin = vin_obj.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        # if 'form[rft_d2_stage_stations]' in form and form['form[rft_d2_stage_stations]'] != [u'']:
        #     stations = ModelStations.objects.filter(station_group__description='D2').values_list('station', flat=True)
        # else:
        stations = ModelStations.objects.filter(station_group__description='D2').values_list('station', flat=True)
        #vin = vin.filter(stations__in=stations)
        vin_obj = vin.filter(stations__in=stations).values_list('vin', flat=True)
        vin = vin.filter(vin__in=vin_obj)
        vin_obj=VinStatusGroupWise.objects.exclude(Q(d2_status=None) | Q(d2_status='')).filter(vin__in=vin_obj).values_list('vin', flat=True)
        vin = vin.filter(vin__in=vin_obj)
        # date_from = parse(request.POST.get('from_date')).strftime('%Y-%m-%d %H:%M:%S')
        # date_to = parse(request.POST.get('to_date')).strftime('%Y-%m-%d %H:%M:%S')
        # vin = vin_obj.filter(created_time__range=[date_from, date_to])
        # form = [self.removekey(form, key) for key in ['from_date', 'to_date']]
        data = self.rft_d2_stage_chart_data(request, user, vin, form, date_list)

        return JsonResponse(data, safe=False)

class RftFinalView(View):
    common = Common()
    
    def __init__(self):
        self.rft_ok = []
        self.not_ok = []  
        self.mark_data = []  
        self.no_of_tractors = []
        self.RFT_percentage = []
        self.PPM_percentage = []
        self.f_plant = 'All'
        self.f_market = 'All'
        self.f_shift = 'All'
        self.f_base = 'All'
        self.f_model = 'All'
        self.f_station = 'All'

    def rft_final_chart_data(self, user, vin, form, date_list):
        #import pdb;pdb.set_trace()
        for _date in date_list[0]:
            if 'form[rft_final_plants]' in form and form['form[rft_final_plants]'] != [u'']:
                self.f_plant = Plants.objects.get(id=int(form['form[rft_final_plants]'][0])).plant_name
                vin = vin.filter(stations__cells__plants=int(form['form[rft_final_plants]'][0]))
            if 'form[rft_final_markets]' in form and form['form[rft_final_markets]'] != [u'']:
                self.f_market = Market.objects.get(id=int(form['form[rft_final_markets]'][0])).description
                vin = vin.filter(model__market=int(form['form[rft_final_markets]'][0]))
            if 'form[rft_final_shifts]' in form and form['form[rft_final_shifts]'] != [u'']:
                self.f_shift = Shifts.objects.get(id=int(form['form[rft_final_shifts]'][0])).description
                vin = vin.filter(shift=int(form['form[rft_final_shifts]'][0]))
            if 'form[rft_final_base_models]' in form and form['form[rft_final_base_models]'] != [u'']:
                self.f_base = BaseModels.objects.get(id=int(form['form[rft_final_base_models]'][0])).description
                vin = vin.filter(model__base_models=int(form['form[rft_final_base_models]'][0]))
            if 'form[rft_final_models]' in form and form['form[rft_final_models]'] != [u'']:
                self.f_model = Models.objects.get(id=int(form['form[rft_final_models]'][0])).description
                vin = vin.filter(model=int(form['form[rft_final_models]'][0]))
          
            my_date = datetime.strptime(_date, '%d-%m-%Y')
            current_vin = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            
            vin_obj = VinStatusGroupWise.objects.filter(vin__in=set(current_vin))
            self.rft_ok.append(vin_obj.filter(d3_status='RFT OK').count())
            self.not_ok.append(vin_obj.filter(d3_status='RFT NOT OK').count())
            # self.not_ok.append(vin_obj.exclude(d3_status='RFT OK').count())
            tractors_count = vin_obj.exclude(Q(d3_status=None)|Q(d3_status='')).count()
            self.no_of_tractors.append(tractors_count)
            #import pdb;pdb.set_trace()
            if vin_obj.filter(d3_status='RFT OK').count() != 0:
                rft_ppm = date_list[1]
                if str(rft_ppm) == '1':
                    percentage = float("{0:.2f}".format((vin_obj.filter(d3_status='RFT OK').count()/float(tractors_count))*100))
                else:
                    percentage = float("{0:.2f}".format((vin_obj.filter(d3_status='RFT OK').count()/float(tractors_count))*1000000))
            else:
                percentage = 0
            # # # # # # # # # import pdb;pdb.set_trace()()
            rft_ppm = date_list[1]
            if str(rft_ppm) == "1":
                self.RFT_percentage.append(percentage)
                self.PPM_percentage = None
            else:
                self.PPM_percentage.append(percentage)
                self.RFT_percentage = None
            if len(vin_obj) != 0:
                percentage_dict={
                    'name': "Final RFT(%)",
                    'value': percentage,
                    'xAxis': _date,
                    'yAxis': percentage
                }
                self.mark_data.append(percentage_dict)
        #import pdb;pdb.set_trace()()
        rft_ppm = date_list[1]
        rft_avg_percentage = []
        ppm_avg_percentage = []
        if str(rft_ppm) == "1":
            try:
                avg_percentage =  [(float(sum(self.rft_ok))/float((sum(self.rft_ok)+sum(self.not_ok)))*100)]
            except ZeroDivisionError:
                avg_percentage = [0]
            rft_avg_percentage = avg_percentage
            ppm_avg_percentage = None
        else:
            try:
                avg_percentage =  [(float(sum(self.rft_ok))/float((sum(self.rft_ok)+sum(self.not_ok)))*1000000)]
            except ZeroDivisionError:
                avg_percentage = [0]
            rft_avg_percentage = None
            ppm_avg_percentage = avg_percentage            
        fromdate = date_list[0][0]
        enddate = date_list[len(date_list)-2][-1]
        data = {
        'info': 'D3 Final RFT-PPM Report For ' + fromdate + ' to ' + enddate,
        'subinfo':"Plants:"+self.f_plant+" Markets:"+self.f_market+" Shifts:"+self.f_shift+" Base Models:"+self.f_base+" Models:"+self.f_model,
        'date_list': date_list[0],
        'rft_ok': self.rft_ok,
        'not_ok': self.not_ok,
        'no_of_tractors': self.no_of_tractors,
        'mark_data': self.mark_data,
        'RFT_percentage':self.RFT_percentage,
        'PPM_percentage':self.PPM_percentage,
        'rft_avg_percentage':rft_avg_percentage,
        'ppm_avg_percentage':ppm_avg_percentage,
        'total_no_of_tractor':(sum(self.rft_ok)+sum(self.not_ok)),
        'total_no_of_rft_ok_tractor': (sum(self.rft_ok))
        }
        return data


    def removekey(self, dictionary, key):
        remove = dict(dictionary)
        del remove[key]
        return remove

    def post(self, request, *args, **kwargs):
        super(RftFinalView, self).__init__()
        user = get_user_dict(request)
        form = dict(request.POST)
        # form = {key: value for key, value in dict(request.POST).items() if value != [u'']}
        
        from_date = self.common.parse_date(form['from_date'][0])
        to_date = self.common.parse_date(form['to_date'][0]) 
        if "form[rft_ppm_category]" in request.POST:
            if request.POST['form[rft_ppm_category]'] == '':
                rft_ppm = "1"
            else:
                rft_ppm = request.POST['form[rft_ppm_category]']
        else:
            rft_ppm = "1"
        date_list = self.common.get_date_list(from_date, to_date,rft_ppm)
        
        vin_obj = self.common.get_vin_details(user)

        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

        vin = vin_obj.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        # if 'form[rft_final_models]' in form and form['form[rft_final_models]'] != [u'']:
        #     stations = ModelStations.objects.filter(station_group__description='D3').values_list('station', flat=True)
        # else:
        stations = ModelStations.objects.filter(station_group__description='D3').values_list('station', flat=True)
        vin = vin.filter(stations__in=stations)
        #vin = vin.filter(stations__in=stations)
        vin_obj = vin.filter(stations__in=stations).values_list('vin', flat=True)
        vin_obj=VinStatusGroupWise.objects.exclude(Q(d3_status=None) | Q(d3_status='')).filter(vin__in=vin_obj).values_list('vin', flat=True)
        vin = vin.filter(vin__in=vin_obj)
        #vin = vin.filter(vin__in=vin_obj)

        # date_from = parse(request.POST.get('from_date')).strftime('%Y-%m-%d %H:%M:%S')
        # date_to = parse(request.POST.get('to_date')).strftime('%Y-%m-%d %H:%M:%S')
        # vin = vin_obj.filter(created_time__range=[date_from, date_to])
        # form = [self.removekey(form, key) for key in ['from_date', 'to_date']]
        data = self.rft_final_chart_data(user, vin, form, date_list)

        return JsonResponse(data, safe=False)

class RftOverallView(View):
    common = Common()
    
    def __init__(self):
        self.rft_ok = []
        self.not_ok = []  
        self.mark_data = []  
        self.no_of_tractors = []
        self.RFT_percentage = []
        self.PPM_percentage = []
        self.f_market = 'All'
        self.f_shift = 'All'
        self.f_base = 'All'
        self.f_model = 'All'
        self.f_station = 'All'
        self.f_plant = 'All'

    def rft_overall_chart_data(self, user, vin, form, date_list):
        #import pdb;pdb.set_trace()
        for _date in date_list[0]:
            if 'form[rft_overall_plants]' in form and form['form[rft_overall_plants]'] != [u'']:
                self.f_plant = Plants.objects.get(id=int(form['form[rft_overall_plants]'][0])).plant_name
                vin = vin.filter(stations__cells__plants=int(form['form[rft_overall_plants]'][0]))
            if 'form[rft_overall_markets]' in form and form['form[rft_overall_markets]'] != [u'']:
                self.f_market = Market.objects.get(id=int(form['form[rft_overall_markets]'][0])).description
                vin = vin.filter(model__market=int(form['form[rft_overall_markets]'][0]))
            if 'form[rft_overall_shifts]' in form and form['form[rft_overall_shifts]'] != [u'']:
                self.f_shift = Shifts.objects.get(id=int(form['form[rft_overall_shifts]'][0])).description
                vin = vin.filter(shift=int(form['form[rft_overall_shifts]'][0]))
            if 'form[rft_overall_base_models]' in form and form['form[rft_overall_base_models]'] != [u'']:
                self.f_base = BaseModels.objects.get(id=int(form['form[rft_overall_base_models]'][0])).description
                vin = vin.filter(model__base_models=int(form['form[rft_overall_base_models]'][0]))
            if 'form[rft_overall_models]' in form and form['form[rft_overall_models]'] != [u'']:
                self.f_model = Models.objects.get(id=int(form['form[rft_overall_models]'][0])).description
                vin = vin.filter(model=int(form['form[rft_overall_models]'][0]))
              
            my_date = datetime.strptime(_date, '%d-%m-%Y')
            current_vin = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            
            vin_obj = VinStatusGroupWise.objects.filter(vin__in=set(current_vin))
            self.rft_ok.append(vin_obj.filter(overall_status='RFT OK').count())
            self.not_ok.append(vin_obj.filter(overall_status='RFT NOT OK').count())
            # self.not_ok.append(vin_obj.exclude(overall_status='RFT OK').count())
            tractors_count = vin_obj.exclude(Q(overall_status=None)|Q(overall_status='')).count()
            self.no_of_tractors.append(tractors_count)
            # # # # # # # import pdb;pdb.set_trace()
            if vin_obj.filter(overall_status='RFT OK').count() != 0:
                rft_ppm = date_list[1]
                if str(rft_ppm) == '1':
                    percentage = float("{0:.2f}".format((vin_obj.filter(overall_status='RFT OK').count()/float(tractors_count))*100))
                else:
                    percentage = float("{0:.2f}".format((vin_obj.filter(overall_status='RFT OK').count()/float(tractors_count))*1000000))

            else:
                percentage = 0
            rft_ppm = date_list[1]
            if str(rft_ppm) == '1':
                self.RFT_percentage.append(percentage)
                self.PPM_percentage = None
            else:
                self.PPM_percentage.append(percentage)
                self.RFT_percentage = None 
            if len(vin_obj) != 0:
                percentage_dict={
                    'name': "Overall RFT(%)",
                    'value': percentage,
                    'xAxis': _date,
                    'yAxis': percentage
                }
                self.mark_data.append(percentage_dict)
        rft_ppm = date_list[1]
        if str(rft_ppm) == "1":
            rft_avg_percentage = []
            ppm_avg_percentage = []
            try:
                avg_percentage =  [(float(sum(self.rft_ok))/float((sum(self.rft_ok)+sum(self.not_ok)))*100)]
            except ZeroDivisionError:
                avg_percentage = [0]
            rft_avg_percentage = avg_percentage
            ppm_avg_percentage = None
        else:
            try:
                avg_percentage =  [(float(sum(self.rft_ok))/float((sum(self.rft_ok)+sum(self.not_ok)))*1000000)]
            except ZeroDivisionError:
                avg_percentage = [0]
            rft_avg_percentage = None
            ppm_avg_percentage = avg_percentage
        fromdate = date_list[0][0]
        enddate = date_list[len(date_list)-2][-1]
        data = {
        'info': 'Overall RFT-PPM Report(D1+D2+D3) For ' + fromdate + ' to ' + enddate,
        'subinfo':"Plants:"+self.f_plant+" Markets:"+self.f_market+" Shifts:"+self.f_shift+" Base Models:"+self.f_base+" Models:"+self.f_model,
        'date_list': date_list,
        'rft_ok': self.rft_ok,
        'not_ok': self.not_ok,
        'no_of_tractors': self.no_of_tractors,
        'mark_data': self.mark_data,
        'RFT_percentage': self.RFT_percentage,
        'PPM_percentage':self.PPM_percentage,
        'rft_avg_percentage':rft_avg_percentage,
        'ppm_avg_percentage':ppm_avg_percentage,
        'total_no_of_tractor':(sum(self.rft_ok)+sum(self.not_ok)),
        'total_no_of_rft_ok_tractor': (sum(self.rft_ok))
        }
        return data


    def removekey(self, dictionary, key):
        remove = dict(dictionary)
        del remove[key]
        return remove

    def post(self, request, *args, **kwargs):
        super(RftOverallView, self).__init__()
        user = get_user_dict(request)
        form = dict(request.POST)
        # form = {key: value for key, value in dict(request.POST).items() if value != [u'']}
        
        from_date = self.common.parse_date(form['from_date'][0])
        to_date = self.common.parse_date(form['to_date'][0]) 
        if "form[rft_ppm_category]" in request.POST:
            if request.POST['form[rft_ppm_category]'] == '':
                rft_ppm = "1"
            else:
                rft_ppm = request.POST['form[rft_ppm_category]']
        else:
            rft_ppm = "1"
        date_list = self.common.get_date_list(from_date, to_date,rft_ppm)
        
        vin_obj = self.common.get_vin_details(user)

        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

        vin = vin_obj.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        # date_from = parse(request.POST.get('from_date')).strftime('%Y-%m-%d %H:%M:%S')
        # date_to = parse(request.POST.get('to_date')).strftime('%Y-%m-%d %H:%M:%S')
        # vin = vin_obj.filter(created_time__range=[date_from, date_to])
        # form = [self.removekey(form, key) for key in ['from_date', 'to_date']]
        stations = ModelStations.objects.filter(station_group__description='D3', is_final=True).values_list('station', flat=True)
        vin = vin.filter(stations__in=stations)
        
        data = self.rft_overall_chart_data(user, vin, form, date_list)

        return JsonResponse(data, safe=False)

class DpuView(LoginRequiredMixin, TemplateView):
    common = Common()
    template_name = 'reports/dpu.html'

    def get_context_data(self, **kwargs):
        context = super(DpuView, self).get_context_data(**kwargs)
        rolldown_filter_form = DpuRolldownFilterForm(
            user=get_user_dict(self.request),
            )
        d2_stage_filter_form = DpuD2StageFilterForm(
            user=get_user_dict(self.request)
            )
        final_filter_form = DpuFinalFilterForm(
            user=get_user_dict(self.request),
            )
        overall_filter_form = DpuOverallFilterForm(
            user=get_user_dict(self.request),
            )
        context = {
            'rolldown_filter_form': rolldown_filter_form,
            'd2_stage_filter_form': d2_stage_filter_form,
            'final_filter_form': final_filter_form,
            'overall_filter_form': overall_filter_form
        }
        return context

class DpuFilterView(View):

    def post(self, request):
        
        if 'dpu_rolldown_plants' in request.POST or 'dpu_rolldown_models' in request.POST:
            rolldown_form = DpuRolldownFilterForm(user=get_user_dict(request), initial=request.POST)
            rolldown_filter_form = self.render_to_dpu_rolldown_template(request, rolldown_form)
            return JsonResponse(rolldown_filter_form, safe=False)
        if 'dpu_d2_stage_plants' in request.POST or 'dpu_d2_stage_models' in request.POST:
            d2_stage_form = DpuD2StageFilterForm(user=get_user_dict(request), initial=request.POST)
            d2_stage_filter_form = self.render_to_dpu_d2_stage_template(request, d2_stage_form)
            return JsonResponse(d2_stage_filter_form, safe=False)
        if 'dpu_final_plants' in request.POST or 'dpu_final_models' in request.POST:
            final_form = DpuFinalFilterForm(user=get_user_dict(request), initial=request.POST)
            final_filter_form = self.render_to_dpu_final_template(request, final_form)
            return JsonResponse(final_filter_form, safe=False)
        if 'dpu_overall_plants' in request.POST or 'dpu_overall_models' in request.POST:
            overall_form = DpuOverallFilterForm(user=get_user_dict(request), initial=request.POST)
            overall_filter_form = self.render_to_dpu_overall_template(request, overall_form)
            return JsonResponse(overall_filter_form, safe=False)

    def render_to_dpu_rolldown_template(self, request, form):
        template = TemplateResponse(request, 'reports/dpu_rolldown_filter.html', {
            'rolldown_filter_form': form,
        })
        template.render()
        return template.content

    def render_to_dpu_d2_stage_template(self, request, form):
        template = TemplateResponse(request, 'reports/dpu_d2_stage_filter.html', {
            'd2_stage_filter_form': form,
        })
        template.render()
        return template.content

    def render_to_dpu_final_template(self, request, form):
        template = TemplateResponse(request, 'reports/dpu_final_filter.html', {
            'final_filter_form': form,
        })
        template.render()
        return template.content

    def render_to_dpu_overall_template(self, request, form):
        template = TemplateResponse(request, 'reports/dpu_overall_filter.html', {
            'overall_filter_form': form,
        })
        template.render()
        return template.content


class DpuSearchView(View):
    common = Common()

    def get_rolldown_dpu_by_date(self, date_list, vin):
        dpu_list = [] 
        mark_data = [] 
        defects_data = []
        sourcegates_list = []
        no_of_tractors = []
        stations = ModelStations.objects.filter(station_group__description='D1').values_list('station', flat=True)
        vin = vin.filter(stations__in=stations)
        for _date in date_list:
            my_date = datetime.strptime(_date, '%d-%m-%Y')
            dpu_obj =  vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            check_point_defects = []
            part_defect = []
            no_of_tractors.append(len(set([dpu.vin for dpu in dpu_obj])))
            if len(dpu_obj) != 0:
                defect_rolldown = 0
                for dpu in dpu_obj:
                    inspection_defects = InspectionDefects.objects.filter(vin=dpu)
                    defect_rolldown  +=  inspection_defects.count()
                    if len(inspection_defects) !=0:
                        for inspection_defect in inspection_defects:
                            if inspection_defect.checkpoints != None:
                                try:
                                    check_point_defect = Checkpoints.objects.get(id=inspection_defect.checkpoints.id)
                                    sourcegate =SourceGates.objects.get(id=check_point_defect.defects.sourcegates.id).description
                                    check_point_defects.append(sourcegate)
                                except:
                                    check_point_defect = ""
                            else:
                                try:
                                    defect_obj = Defects.objects.get(id=inspection_defect.defects.id)
                                    sourcegate =SourceGates.objects.get(id=defect_obj.sourcegates.id).description
                                    part_defect.append(sourcegate)
                                except:
                                    defect_obj = ""

                tractor_count = len(set([dpu.vin for dpu in dpu_obj]))
                dpu = float("{0:.2f}".format(defect_rolldown/float(tractor_count)))
                mark_dict={
                    'name': "Average",
                    'value': dpu,
                    'xAxis': _date,
                    'yAxis': dpu
                    }
                mark_data.append(mark_dict)
            else:
                dpu = 0
            dpu_list.append(dpu)
            
            sourcegates = check_point_defects + part_defect
            d = {x:sourcegates.count(x) for x in sourcegates}
            sourcegates_list.extend(sourcegates)
            defects_data.append(d)

        source_list=list(set(sourcegates_list))
        chart_defects = []
        for source in source_list:
            defects_list =[]
            for defects in defects_data:
                if source in defects:
                    defects_list.append(defects[source])
                else:
                    defects_list.append(0)
            chart_defects.append(defects_list) 

        data = {
        'date_list': date_list,
        'dpu': dpu_list,
        'mark_data': mark_data,
        'source_list': source_list,
        'chart_defects': chart_defects,
        'no_of_tractors': no_of_tractors
        }
        return data

    def get_d2_stage_dpu_by_date(self, date_list, vin):
        dpu_list = [] 
        mark_data = []  
        defects_data = []
        sourcegates_list = []
        no_of_tractors = []
        stations = ModelStations.objects.filter(station_group__description='D2').values_list('station', flat=True)
        vin = vin.filter(stations__in=stations)
        for _date in date_list:
            my_date = datetime.strptime(_date, '%d-%m-%Y')
            dpu_obj =  vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            check_point_defects = []
            part_defect = []
            no_of_tractors.append(len(set([dpu.vin for dpu in dpu_obj])))
            if len(dpu_obj) != 0:
                    defect_final = 0
                    for dpu in dpu_obj:
                        inspection_defects =  InspectionDefects.objects.filter(vin=dpu)
                        defect_final += inspection_defects.count()
                        if len(inspection_defects) !=0:
                            for inspection_defect in inspection_defects:
                                if inspection_defect.checkpoints != None:
                                    try:
                                        check_point_defect = Checkpoints.objects.get(id=inspection_defect.checkpoints.id)
                                        sourcegate =SourceGates.objects.get(id=check_point_defect.defects.sourcegates.id).description
                                        check_point_defects.append(sourcegate)
                                    except:
                                        check_point_defect = ""
                                else:
                                    try:
                                        defect_obj = Defects.objects.get(id=inspection_defect.defects.id)
                                        sourcegate =SourceGates.objects.get(id=defect_obj.sourcegates.id).description
                                        part_defect.append(sourcegate)
                                    except:
                                        defect_obj = ""
                    tractor_count = len(set([dpu.vin for dpu in dpu_obj]))
                    dpu = float("{0:.2f}".format(defect_final/float(tractor_count)))
                    mark_dict={
                        'name': "Average",
                        'value': dpu,
                        'xAxis': _date,
                        'yAxis': dpu
                        }
                    #print mark_dict
                    mark_data.append(mark_dict)
            else:
                dpu = 0
            dpu_list.append(dpu)
            sourcegates = check_point_defects + part_defect
            d = {x:sourcegates.count(x) for x in sourcegates}
            # #import pdb;pdb.set_trace()
            sourcegates_list.extend(sourcegates)
            defects_data.append(d)

        # #import pdb;pdb.set_trace()
        source_list=list(set(sourcegates_list))

        chart_defects = []
        for source in source_list:
            defects_list =[]
            for defects in defects_data:
                if source in defects:
                    defects_list.append(defects[source])
                else:
                    defects_list.append(0)
            chart_defects.append(defects_list) 

        data = {
        'date_list': date_list,
        'dpu': dpu_list,
        'mark_data': mark_data,
        'source_list': source_list,
        'chart_defects': chart_defects,
        'no_of_tractors': no_of_tractors
        }
        return data

    def get_final_dpu_by_date(self, date_list, vin):
        dpu_list = [] 
        mark_data = []  
        defects_data = []
        sourcegates_list = []
        no_of_tractors = []
        stations = ModelStations.objects.filter(station_group__description='D3').values_list('station', flat=True)
        vin = vin.filter(stations__in=stations)
        for _date in date_list:
            my_date = datetime.strptime(_date, '%d-%m-%Y')
            dpu_obj =  vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            check_point_defects = []
            part_defect = []
            no_of_tractors.append(len(set([dpu.vin for dpu in dpu_obj])))
            if len(dpu_obj) != 0:
                    defect_final = 0
                    for dpu in dpu_obj:
                        inspection_defects =  InspectionDefects.objects.filter(vin=dpu)
                        defect_final += inspection_defects.count()
                        if len(inspection_defects) !=0:
                            for inspection_defect in inspection_defects:
                                if inspection_defect.checkpoints != None:
                                    try:
                                        check_point_defect = Checkpoints.objects.get(id=inspection_defect.checkpoints.id)
                                        sourcegate =SourceGates.objects.get(id=check_point_defect.defects.sourcegates.id).description
                                        check_point_defects.append(sourcegate)
                                    except:
                                        check_point_defect = ""
                                else:
                                    try:
                                        defect_obj = Defects.objects.get(id=inspection_defect.defects.id)
                                        sourcegate =SourceGates.objects.get(id=defect_obj.sourcegates.id).description
                                        part_defect.append(sourcegate)
                                    except:
                                        defect_obj = ""
                    tractor_count = len(set([dpu.vin for dpu in dpu_obj]))
                    dpu = float("{0:.2f}".format(defect_final/float(tractor_count)))
                    mark_dict={
                        'name': "Average",
                        'value': dpu,
                        'xAxis': _date,
                        'yAxis': dpu
                        }
                    #print mark_dict
                    mark_data.append(mark_dict)
            else:
                dpu = 0
            dpu_list.append(dpu)
            sourcegates = check_point_defects + part_defect
            d = {x:sourcegates.count(x) for x in sourcegates}
            # #import pdb;pdb.set_trace()
            sourcegates_list.extend(sourcegates)
            defects_data.append(d)

        # #import pdb;pdb.set_trace()
        source_list=list(set(sourcegates_list))

        chart_defects = []
        for source in source_list:
            defects_list =[]
            for defects in defects_data:
                if source in defects:
                    defects_list.append(defects[source])
                else:
                    defects_list.append(0)
            chart_defects.append(defects_list) 

        data = {
        'date_list': date_list,
        'dpu': dpu_list,
        'mark_data': mark_data,
        'source_list': source_list,
        'chart_defects': chart_defects,
        'no_of_tractors': no_of_tractors
        }
        return data

    def get_overall_dpu_by_date(self, date_list, vin):
        dpu_list = [] 
        mark_data = []   
        defects_data = []  
        sourcegates_list = [] 
        no_of_tractors = []
        for _date in date_list:
            my_date = datetime.strptime(_date, '%d-%m-%Y')
            dpu_obj = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            check_point_defects = []
            part_defect = []
            no_of_tractors.append(len(set([dpu.vin for dpu in dpu_obj])))
            if len(dpu_obj) != 0:
                    defect_overall = 0
                    for dpu in dpu_obj:
                        inspection_defects =  InspectionDefects.objects.filter(vin=dpu)
                        defect_overall  += inspection_defects.count()
                        if len(inspection_defects) !=0:
                            for inspection_defect in inspection_defects:
                                if inspection_defect.checkpoints != None:
                                    try:
                                        check_point_defect = Checkpoints.objects.get(id=inspection_defect.checkpoints.id)
                                        sourcegate =SourceGates.objects.get(id=check_point_defect.defects.sourcegates.id).description
                                        check_point_defects.append(sourcegate)
                                    except:
                                        check_point_defect = ""
                                else:
                                    try:
                                        defect_obj = Defects.objects.get(id=inspection_defect.defects.id)
                                        sourcegate =SourceGates.objects.get(id=defect_obj.sourcegates.id).description
                                        part_defect.append(sourcegate)
                                    except:
                                        defect_obj = ""
                    tractor_count = len(set([dpu.vin for dpu in dpu_obj]))
                    dpu = float("{0:.2f}".format(defect_overall/float(tractor_count)))
                    mark_dict={
                        'name': "Average",
                        'value': dpu,
                        'xAxis': _date,
                        'yAxis': dpu
                        }
                    mark_data.append(mark_dict)
            else:
                dpu = 0
            dpu_list.append(dpu)
            sourcegates = check_point_defects + part_defect
            d = {x:sourcegates.count(x) for x in sourcegates}
            # #import pdb;pdb.set_trace()
            sourcegates_list.extend(sourcegates)
            defects_data.append(d)

        # #import pdb;pdb.set_trace()
        source_list=list(set(sourcegates_list))

        chart_defects = []
        for source in source_list:
            defects_list =[]
            for defects in defects_data:
                if source in defects:
                    defects_list.append(defects[source])
                else:
                    defects_list.append(0)
            chart_defects.append(defects_list) 

        data = {
        'date_list': date_list,
        'dpu': dpu_list,
        'mark_data': mark_data,
        'source_list': source_list,
        'chart_defects': chart_defects,
        'no_of_tractors': no_of_tractors
        }
        return data


    def post(self, request, *args, **kwargs):
        user=get_user_dict(request)
        from_date = self.common.parse_date(request.POST.get('from_date'))
        to_date = self.common.parse_date(request.POST.get('to_date')) 
        date_list = self.common.get_date_lists(from_date, to_date)
        
        vin_obj = self.common.get_vin_details(user)

        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

        vin = vin_obj.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        # vin = vin_obj
        vsg = VinStatusGroupWise.objects.exclude(d1_status=None).values_list('vin')
        vin = vin.filter(vin__in=vsg)
        vsg_d2 = VinStatusGroupWise.objects.exclude(d2_status=None).values_list('vin')
        d2_vin = vin.filter(vin__in=vsg_d2)
        vsg_final = VinStatusGroupWise.objects.exclude(d3_status=None).values_list('vin')
        final_vin = vin.filter(vin__in=vsg_final)
        vsg_overall = VinStatusGroupWise.objects.exclude(overall_status=None).values_list('vin')
        overall_vin = vin.filter(vin__in=vsg_overall)
        date_list = self.common.get_date_lists(from_date, to_date)
        rolldown = self.get_rolldown_dpu_by_date(date_list, vin)
        d2_stage = self.get_d2_stage_dpu_by_date(date_list, d2_vin)
        final = self.get_final_dpu_by_date(date_list, final_vin)
        overall = self.get_overall_dpu_by_date(date_list, overall_vin)
        data = {
            'user': user,
            'rolldown': rolldown,
            'd2_stage': d2_stage,
            'final': final,
            'overall': overall
        }
        #print data
        return JsonResponse(data, safe=False)

class DpuRolldownView(View):
    common = Common()
    
    def __init__(self):
        self.rft_ok = []
        self.not_ok = []  
        self.mark_data = []  
        self.no_of_tractors = []
        self.f_plant = 'All'
        self.f_market = 'All'
        self.f_shift = 'All'
        self.f_base = 'All'
        self.f_model = 'All'
        self.f_sourcegate = 'All'

    def dpu_rolldown_chart_data(self, request, user, vin, form, date_list):
        dpu_list = [] 
        mark_data = []  
        defects_data = []
        sourcegates_list = []
        no_of_tractors = []
        stations = ModelStations.objects.filter(station_group__description='D1').values_list('station', flat=True)
        vin = vin.filter(stations__in=stations)
        for _date in date_list:
            check_point_defects = []
            part_defect = []
            my_date = datetime.strptime(_date, '%d-%m-%Y')
            # vin_obj = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            # no_of_tractors.append(len(set([obj.vin for obj in vin_obj])))
            if 'form[dpu_rolldown_plants]' in request.POST and form['form[dpu_rolldown_plants]'] != [u'']:
                self.f_plant = Plants.objects.get(id=int(form['form[dpu_rolldown_plants]'][0])).plant_name
                vin = vin.filter(stations__cells__plants=int(form['form[dpu_rolldown_plants]'][0]))
            if 'form[dpu_rolldown_markets]' in form and form['form[dpu_rolldown_markets]'] != [u'']:
                self.f_market = Market.objects.get(id=int(form['form[dpu_rolldown_markets]'][0])).description
                vin = vin.filter(model__market=int(form['form[dpu_rolldown_markets]'][0]))
            if 'form[dpu_rolldown_shifts]' in form and form['form[dpu_rolldown_shifts]'] != [u'']:
                self.f_shift = Shifts.objects.get(id=int(form['form[dpu_rolldown_shifts]'][0])).description
                vin = vin.filter(shift=int(form['form[dpu_rolldown_shifts]'][0]))
            if 'form[dpu_rolldown_base_models]' in form and form['form[dpu_rolldown_base_models]'] != [u'']:
                self.f_base = BaseModels.objects.get(id=int(form['form[dpu_rolldown_base_models]'][0])).description
                vin = vin.filter(model__base_models=int(form['form[dpu_rolldown_base_models]'][0]))
            if 'form[dpu_rolldown_models]' in form and form['form[dpu_rolldown_models]'] != [u'']:
                self.f_model = Models.objects.get(id=int(form['form[dpu_rolldown_models]'][0])).description
                vin = vin.filter(model=int(form['form[dpu_rolldown_models]'][0]))
            if 'form[dpu_rolldown_sourcegates]' in form and form['form[dpu_rolldown_sourcegates]'] != [u'']:
                sourcegates = SourceGates.objects.get(id=int(form['form[dpu_rolldown_sourcegates]'][0]))
                self.f_sourcegate=sourcegates.description
                defects = Defects.objects.filter(sourcegates = sourcegates)
                checkpoint_defects = Checkpoints.objects.filter(defects__in = defects)
                # partdefects = Defects.objects.filter(id__in = defects)           
                check_point_defect_list = []
                for check_point_defect in checkpoint_defects:
                    check_point_defect_list.append(check_point_defect.id)
                inspection_defect_vin = InspectionDefects.objects.filter(checkpoints__in=check_point_defect_list).values_list('vin',flat=True)    
                inspection_defect_vin_defect = InspectionDefects.objects.filter(defects__in = defects).values_list('vin',flat=True)
                vin_list = list(chain(inspection_defect_vin, inspection_defect_vin_defect))
                vin = vin.filter(id__in=vin_list)
                # print vin
            current_vin = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            no_of_tractors.append(len(set([obj.vin for obj in current_vin])))
            if len(current_vin) != 0:
                    defect_overall = 0
                    for dpu in current_vin:
                        inspection_defects =  InspectionDefects.objects.filter(vin=dpu)
                        # if 'form[dpu_rolldown_sourcegates]' in form and form['form[dpu_rolldown_sourcegates]'] != [u'']:
                        #     sourcegates = SourceGates.objects.get(id=int(form['form[dpu_rolldown_sourcegates]'][0]))
                        #     if inspection_defects.checkpoints != None:
                        #         defects_obj = Defects.objects.filter(sourcegates = sourcegates)
                        #         checkpoints = Checkpoints.objects.filter(defects__in = defects_obj)
                        #         defect_overall  += inspection_defects.filter(checkpoints__in=checkpoints).count()
                        #     else:
                        #         defects_obj = Defects.objects.filter(sourcegates = sourcegates)
                        #         defect_overall  += inspection_defects.filter(defects__in = defects).count()
                        # else:
                        #     defect_overall  += inspection_defects.count()   
                        # defect_overall  += inspection_defects.count()  
                        # #import pdb;pdb.set_trace()                       
                        if len(inspection_defects) !=0:
                            for inspection_defect in inspection_defects:
                                if inspection_defect.checkpoints != None:
                                    if 'form[dpu_rolldown_sourcegates]' in form and form['form[dpu_rolldown_sourcegates]'] != [u'']:
                                        sourcegates = SourceGates.objects.get(id=int(form['form[dpu_rolldown_sourcegates]'][0]))
                                        defects_obj = Defects.objects.filter(sourcegates = sourcegates)
                                        checkpoints = Checkpoints.objects.filter(defects__in = defects_obj)
                                        defect_overall  += inspection_defects.filter(id=inspection_defect.id, checkpoints__in=checkpoints).count()
                                    else:
                                        defect_overall  += inspection_defects.filter(id=inspection_defect.id).count()
                                    try:
                                        check_point_defect = Checkpoints.objects.get(
                                            id=inspection_defect.checkpoints.id)
                                        sourcegate =SourceGates.objects.get(id=check_point_defect.defects.sourcegates.id).description
                                        check_point_defect_sourcegate_id = check_point_defect.defects.sourcegates.id
                                        if 'form[dpu_rolldown_sourcegates]' in form and form['form[dpu_rolldown_sourcegates]'] != [u'']:
                                            sourcegate_id = int(form['form[dpu_rolldown_sourcegates]'][0])
                                            if check_point_defect_sourcegate_id == sourcegate_id:
                                                check_point_defects.append(sourcegate)
                                        else:
                                            check_point_defects.append(sourcegate)
                                    except:
                                        check_point_defect = ""
                                else:
                                    if 'form[dpu_rolldown_sourcegates]' in form and form['form[dpu_rolldown_sourcegates]'] != [u'']:
                                        sourcegates = SourceGates.objects.get(id=int(form['form[dpu_rolldown_sourcegates]'][0]))
                                        defects_obj = Defects.objects.filter(sourcegates = sourcegates)
                                        defect_overall  += inspection_defects.filter(id=inspection_defect.id, defects__in=defects_obj).count()
                                    else:
                                        defect_overall  += inspection_defects.filter(id=inspection_defect.id).count()
                                    try:
                                        defect_obj = Defects.objects.get(id=inspection_defect.defects.id)
                                        sourcegate =SourceGates.objects.get(id=defect_obj.sourcegates.id).description
                                        part_defect_sourcegate_id = defect_obj.sourcegates.id
                                        if 'form[dpu_rolldown_sourcegates]' in form and form['form[dpu_rolldown_sourcegates]'] != [u'']:
                                            sourcegate_id = int(form['form[dpu_rolldown_sourcegates]'][0])
                                            if part_defect_sourcegate_id == sourcegate_id:
                                                part_defect.append(sourcegate)
                                        else:
                                            part_defect.append(sourcegate)
                                    except:
                                        defect_obj = ""
                    tractor_count = len(set([obj.vin for obj in current_vin]))
                    dpu = float("{0:.2f}".format(defect_overall/float(tractor_count)))
                    mark_dict={
                        'name': "Average",
                        'value': dpu,
                        'xAxis': _date,
                        'yAxis': dpu
                        }
                    mark_data.append(mark_dict)
            else:
                dpu = 0
            dpu_list.append(dpu)
            sourcegates = check_point_defects + part_defect
            d = {x:sourcegates.count(x) for x in sourcegates}
            sourcegates_list.extend(sourcegates)
            defects_data.append(d)

        source_list=list(set(sourcegates_list))

        chart_defects = []
        for source in source_list:
            defects_list =[]
            for defects in defects_data:
                if source in defects:
                    defects_list.append(defects[source])
                else:
                    defects_list.append(0)
            chart_defects.append(defects_list) 
        #print chart_defects 
        data = {
        'date_list': date_list,
        'dpu': dpu_list,
        'mark_data': mark_data,
        'source_list': source_list,
        'chart_defects': chart_defects,
        'no_of_tractors': no_of_tractors,
        'subinfo': "Plants:"+self.f_plant+" Markets:"+self.f_market+" Shifts:"+self.f_shift+" Base Models:"+self.f_base+" Models:"+self.f_model+" Sourcegates:"+self.f_sourcegate,
        }

        return data


    def removekey(self, dictionary, key):
        remove = dict(dictionary)
        del remove[key]
        return remove

    def post(self, request, *args, **kwargs):
        super(DpuRolldownView, self).__init__()
        user = get_user_dict(request)
        form = dict(request.POST)
        # form = {key: value for key, value in dict(request.POST).items() if value != [u'']}

        from_date = self.common.parse_date(form['from_date'][0])
        to_date = self.common.parse_date(form['to_date'][0]) 
        date_list = self.common.get_date_lists(from_date, to_date)
        vin_obj = self.common.get_vin_details(user)

        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

        vin = vin_obj.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        vsg = VinStatusGroupWise.objects.exclude(d1_status=None).values_list('vin')
        vin = vin.filter(vin__in=vsg)
        # vin = vin_obj
        # form = [self.removekey(form, key) for key in ['from_date', 'to_date']]
        data = self.dpu_rolldown_chart_data(request, user, vin, form, date_list)
        #print data

        return JsonResponse(data, safe=False)

class DpuD2StageView(View):
    common = Common()

    def __init__(self):
        self.rft_ok = []
        self.not_ok = []  
        self.mark_data = []  
        self.no_of_tractors = []
        self.f_plant = 'All'
        self.f_market = 'All'
        self.f_shift = 'All'
        self.f_base = 'All'
        self.f_model = 'All'
        self.f_sourcegate = 'All'

    def dpu_d2_stage_chart_data(self, request, user, vin, form, date_list):
        dpu_list = [] 
        mark_data = []  
        defects_data = []
        sourcegates_list = []
        no_of_tractors = []
        stations = ModelStations.objects.filter(station_group__description='D2').values_list('station', flat=True)
        vin = vin.filter(stations__in=stations)
        for _date in date_list:
            check_point_defects = []
            part_defect = []
            my_date = datetime.strptime(_date, '%d-%m-%Y')
            # vin_obj = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            # no_of_tractors.append(len(set([obj.vin for obj in vin_obj])))
            if 'form[dpu_d2_stage_plants]' in request.POST and form['form[dpu_d2_stage_plants]'] != [u'']:
                self.f_plant = Plants.objects.get(id=int(form['form[dpu_d2_stage_plants]'][0])).plant_name
                vin = vin.filter(stations__cells__plants=int(form['form[dpu_d2_stage_plants]'][0]))
            if 'form[dpu_d2_stage_markets]' in form and form['form[dpu_d2_stage_markets]'] != [u'']:
                self.f_market = Market.objects.get(id=int(form['form[dpu_d2_stage_markets]'][0])).description
                vin = vin.filter(model__market=int(form['form[dpu_d2_stage_markets]'][0]))
            if 'form[dpu_d2_stage_shifts]' in form and form['form[dpu_d2_stage_shifts]'] != [u'']:
                self.f_shift = Shifts.objects.get(id=int(form['form[dpu_d2_stage_shifts]'][0])).description
                vin = vin.filter(shift=int(form['form[dpu_d2_stage_shifts]'][0]))
            if 'form[dpu_d2_stage_base_models]' in form and form['form[dpu_d2_stage_base_models]'] != [u'']:
                self.f_base = BaseModels.objects.get(id=int(form['form[dpu_d2_stage_base_models]'][0])).description
                vin = vin.filter(model__base_models=int(form['form[dpu_d2_stage_base_models]'][0]))
            if 'form[dpu_d2_stage_models]' in form and form['form[dpu_d2_stage_models]'] != [u'']:
                self.f_model = Models.objects.get(id=int(form['form[dpu_d2_stage_models]'][0])).description
                vin = vin.filter(model=int(form['form[dpu_d2_stage_models]'][0]))
            if 'form[dpu_d2_stage_sourcegates]' in form and form['form[dpu_d2_stage_sourcegates]'] != [u'']:
                sourcegates = SourceGates.objects.get(id=int(form['form[dpu_d2_stage_sourcegates]'][0]))
                self.f_sourcegate = sourcegates.description
                defects = Defects.objects.filter(sourcegates = sourcegates)
                checkpoint_defects = Checkpoints.objects.filter(defects__in = defects)
                check_point_defect_list = []
                for check_point_defect in checkpoint_defects:
                    check_point_defect_list.append(check_point_defect.id)
                inspection_defect_vin = InspectionDefects.objects.filter(checkpoints__in=check_point_defect_list).values_list('vin',flat=True)    
                inspection_defect_vin_defect = InspectionDefects.objects.filter(defects__in = defects).values_list('vin',flat=True)
                vin_list = list(chain(inspection_defect_vin, inspection_defect_vin_defect))
                vin = vin.filter(id__in=vin_list)

            current_vin = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            no_of_tractors.append(len(set([obj.vin for obj in current_vin])))
            if len(current_vin) != 0:
                    defect_overall = 0
                    for dpu in current_vin:
                        inspection_defects =  InspectionDefects.objects.filter(vin=dpu)
                        # defect_overall  += inspection_defects.count()
                        if len(inspection_defects) !=0:
                            for inspection_defect in inspection_defects:
                                if inspection_defect.checkpoints != None:
                                    if 'form[dpu_d2_stage_sourcegates]' in form and form['form[dpu_d2_stage_sourcegates]'] != [u'']:
                                        sourcegates = SourceGates.objects.get(id=int(form['form[dpu_d2_stage_sourcegates]'][0]))
                                        defects_obj = Defects.objects.filter(sourcegates = sourcegates)
                                        checkpoints = Checkpoints.objects.filter(defects__in = defects_obj)
                                        defect_overall  += inspection_defects.filter(id=inspection_defect.id, checkpoints__in=checkpoints).count()
                                    else:
                                        defect_overall  += inspection_defects.filter(id=inspection_defect.id).count()
                                    try:
                                        check_point_defect = Checkpoints.objects.get(
                                            id=inspection_defect.checkpoints.id)
                                        sourcegate =SourceGates.objects.get(id=check_point_defect.defects.sourcegates.id).description
                                        check_point_defect_sourcegate_id = check_point_defect.defects.sourcegates.id
                                        if 'form[dpu_d2_stage_sourcegates]' in form and form['form[dpu_d2_stage_sourcegates]'] != [u'']:
                                            sourcegate_id = int(form['form[dpu_d2_stage_sourcegates]'][0])
                                            if check_point_defect_sourcegate_id == sourcegate_id:
                                                check_point_defects.append(sourcegate)
                                        else:
                                            check_point_defects.append(sourcegate)
                                    except:
                                        check_point_defect = ""
                                else:
                                    if 'form[dpu_d2_stage_sourcegates]' in form and form['form[dpu_d2_stage_sourcegates]'] != [u'']:
                                        sourcegates = SourceGates.objects.get(id=int(form['form[dpu_d2_stage_sourcegates]'][0]))
                                        defects_obj = Defects.objects.filter(sourcegates = sourcegates)
                                        defect_overall  += inspection_defects.filter(id=inspection_defect.id, defects__in=defects_obj).count()
                                    else:
                                        defect_overall  += inspection_defects.filter(id=inspection_defect.id).count()
                                    try:
                                        defect_obj = Defects.objects.get(id=inspection_defect.defects.id)
                                        sourcegate =SourceGates.objects.get(id=defect_obj.sourcegates.id).description
                                        part_defect_sourcegate_id = defect_obj.sourcegates.id
                                        if 'form[dpu_d2_stage_sourcegates]' in form and form['form[dpu_d2_stage_sourcegates]'] != [u'']:
                                            sourcegate_id = int(form['form[dpu_d2_stage_sourcegates]'][0])
                                            if part_defect_sourcegate_id == sourcegate_id:
                                                part_defect.append(sourcegate)
                                        else:
                                            part_defect.append(sourcegate)
                                    except:
                                        defect_obj = ""
                    tractor_count = len(set([dpu.vin for dpu in current_vin]))
                    dpu = float("{0:.2f}".format(defect_overall/float(tractor_count)))
                    mark_dict={
                        'name': "Average",
                        'value': dpu,
                        'xAxis': _date,
                        'yAxis': dpu
                        }
                    mark_data.append(mark_dict)
            else:
                dpu = 0
            dpu_list.append(dpu)
            sourcegates = check_point_defects + part_defect
            d = {x:sourcegates.count(x) for x in sourcegates}
            sourcegates_list.extend(sourcegates)
            defects_data.append(d)

        source_list=list(set(sourcegates_list))

        chart_defects = []
        for source in source_list:
            defects_list =[]
            for defects in defects_data:
                if source in defects:
                    defects_list.append(defects[source])
                else:
                    defects_list.append(0)
            chart_defects.append(defects_list) 
        #print chart_defects 
        data = {
        'date_list': date_list,
        'dpu': dpu_list,
        'mark_data': mark_data,
        'source_list': source_list,
        'chart_defects': chart_defects,
        'no_of_tractors': no_of_tractors,
        'subinfo': "Plants:"+self.f_plant+" Markets:"+self.f_market+" Shifts:"+self.f_shift+" Base Models:"+self.f_base+" Models:"+self.f_model+" Sourcegates:"+self.f_sourcegate,
        }

        return data


    def removekey(self, dictionary, key):
        remove = dict(dictionary)
        del remove[key]
        return remove

    def post(self, request, *args, **kwargs):
        super(DpuD2StageView, self).__init__()
        user = get_user_dict(request)
        form = dict(request.POST)
        # form = {key: value for key, value in dict(request.POST).items() if value != [u'']}
        

        from_date = self.common.parse_date(form['from_date'][0])
        to_date = self.common.parse_date(form['to_date'][0]) 
        date_list = self.common.get_date_lists(from_date, to_date)
        
        vin_obj = self.common.get_vin_details(user)

        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

        vin = vin_obj.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        vsg = VinStatusGroupWise.objects.exclude(d2_status=None).values_list('vin')
        vin = vin.filter(vin__in=vsg)
        # vin = vin_obj
        # form = [self.removekey(form, key) for key in ['from_date', 'to_date']]
        data = self.dpu_d2_stage_chart_data(request, user, vin, form, date_list)
        #print data

        return JsonResponse(data, safe=False)

class DpuFinalView(View):
    common = Common()
    
    def __init__(self):
        self.rft_ok = []
        self.not_ok = []  
        self.mark_data = []  
        self.no_of_tractors = []
        self.f_plant = 'All'
        self.f_market = 'All'
        self.f_shift = 'All'
        self.f_base = 'All'
        self.f_model = 'All'
        self.f_sourcegate = 'All'

    def dpu_final_chart_data(self, request, user, vin, form, date_list):
        dpu_list = [] 
        mark_data = []  
        defects_data = []
        sourcegates_list = []
        no_of_tractors = []
        stations = ModelStations.objects.filter(station_group__description='D3').values_list('station', flat=True)
        vin = vin.filter(stations__in=stations)
        for _date in date_list:
            check_point_defects = []
            part_defect = []
            my_date = datetime.strptime(_date, '%d-%m-%Y')
            # vin_obj = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            # no_of_tractors.append(len(set([obj.vin for obj in vin_obj])))
            # if user['plant'] == '':
            if 'form[dpu_final_plants]' in request.POST and form['form[dpu_final_plants]'] != [u'']:
                self.f_plant = Plants.objects.get(id=int(form['form[dpu_final_plants]'][0])).plant_name
                vin = vin.filter(stations__cells__plants=int(form['form[dpu_final_plants]'][0]))
            # else:
            if 'form[dpu_fianl_markets]' in form and form['form[dpu_fianl_markets]'] != [u'']:
                self.f_market = Market.objects.get(id=int(form['form[dpu_fianl_markets]'][0])).description
                vin = vin.filter(model__market=int(form['form[dpu_fianl_markets]'][0]))
            if 'form[dpu_final_shifts]' in form and form['form[dpu_final_shifts]'] != [u'']:
                self.f_shift = Shifts.objects.get(id=int(form['form[dpu_final_shifts]'][0])).description
                vin = vin.filter(shift=int(form['form[dpu_final_shifts]'][0]))
            if 'form[dpu_fianl_base_models]' in form and form['form[dpu_final_base_models]'] != [u'']:
                self.f_base = BaseModels.objects.get(id=int(form['form[dpu_final_base_models]'][0])).description
                vin = vin.filter(model__base_models=int(form['form[dpu_final_base_models]'][0]))
            if 'form[dpu_final_models]' in form and form['form[dpu_final_models]'] != [u'']:
                self.f_model = Models.objects.get(id=int(form['form[dpu_final_models]'][0])).description
                vin = vin.filter(model=int(form['form[dpu_final_models]'][0]))
            if 'form[dpu_final_sourcegates]' in form and form['form[dpu_final_sourcegates]'] != [u'']:
                sourcegates = SourceGates.objects.get(id=int(form['form[dpu_final_sourcegates]'][0]))
                self.f_sourcegate = sourcegates.description
                defects = Defects.objects.filter(sourcegates = sourcegates)
                check_point_defects = Checkpoints.objects.filter(defects__in = defects)
                # partdefects = Defects.objects.filter(id__in = defects)           
                check_point_defect_list = []
                for check_point_defect in check_point_defects:
                    check_point_defect_list.append(check_point_defect.id)
                inspection_defect_vin = InspectionDefects.objects.filter(checkpoints__in=check_point_defect_list).values_list('vin',flat=True)    
                inspection_defect_vin_defect = InspectionDefects.objects.filter(defects__in = defects).values_list('vin',flat=True)
                vin_list = list(chain(inspection_defect_vin, inspection_defect_vin_defect))
                vin = vin.filter(id__in=vin_list)

            dpu_obj =  vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            no_of_tractors.append(len(set([obj.vin for obj in dpu_obj])))
            check_point_defects = []
            part_defect = []
            if len(dpu_obj) != 0:
                    defect_final = 0
                    for dpu in dpu_obj:
                        inspection_defects =  InspectionDefects.objects.filter(vin=dpu).filter(vin__stations__description='Final Inspection')
                        # defect_final += inspection_defects.count()
                        if len(inspection_defects) !=0:
                            for inspection_defect in inspection_defects:
                                if inspection_defect.checkpoints != None:
                                    if 'form[dpu_final_sourcegates]' in form and form['form[dpu_final_sourcegates]'] != [u'']:
                                        sourcegates = SourceGates.objects.get(id=int(form['form[dpu_final_sourcegates]'][0]))
                                        defects_obj = Defects.objects.filter(sourcegates = sourcegates)
                                        checkpoints = Checkpoints.objects.filter(defects__in = defects_obj)
                                        defect_final  += inspection_defects.filter(id=inspection_defect.id, checkpoints__in=checkpoints).count()
                                    else:
                                        defect_final  += inspection_defects.filter(id=inspection_defect.id).count()
                                    try:
                                        check_point_defect = Checkpoints.objects.get(
                                            id=inspection_defect.checkpoints.id)
                                        sourcegate =SourceGates.objects.get(id=check_point_defect.defects.sourcegates.id).description
                                        check_point_defect_sourcegate_id = check_point_defect.defects.sourcegates.id
                                        if 'form[dpu_final_sourcegates]' in form and form['form[dpu_final_sourcegates]'] != [u'']:
                                            sourcegate_id = int(form['form[dpu_final_sourcegates]'][0])
                                            if check_point_defect_sourcegate_id == sourcegate_id:
                                                check_point_defects.append(sourcegate)
                                        else:
                                            check_point_defects.append(sourcegate)
                                        # check_point_defects.append(sourcegate)
                                    except:
                                        check_point_defect = ""
                                else:
                                    if 'form[dpu_final_sourcegates]' in form and form['form[dpu_final_sourcegates]'] != [u'']:
                                        sourcegates = SourceGates.objects.get(id=int(form['form[dpu_final_sourcegates]'][0]))
                                        defects_obj = Defects.objects.filter(sourcegates = sourcegates)
                                        defect_final  += inspection_defects.filter(id=inspection_defect.id, defects__in=defects_obj).count()
                                    else:
                                        defect_final  += inspection_defects.filter(id=inspection_defect.id).count()
                                    try:
                                        defect_obj = Defects.objects.get(id=inspection_defect.defects.id)
                                        sourcegate =SourceGates.objects.get(id=defect_obj.sourcegates.id).description
                                        part_defect_sourcegate_id = defect_obj.sourcegates.id
                                        if 'form[dpu_final_sourcegates]' in form and form['form[dpu_final_sourcegates]'] != [u'']:
                                            sourcegate_id = int(form['form[dpu_final_sourcegates]'][0])
                                            if part_defect_sourcegate_id == sourcegate_id:
                                                part_defect.append(sourcegate)
                                        else:
                                            part_defect.append(sourcegate)
                                    except:
                                        defect_obj = ""
                    tractor_count = len(set([dpu.vin for dpu in dpu_obj]))
                    dpu = float("{0:.2f}".format(defect_final/float(tractor_count)))
                    mark_dict={
                        'name': "Average",
                        'value': dpu,
                        'xAxis': _date,
                        'yAxis': dpu
                        }
                    #print mark_dict
                    mark_data.append(mark_dict)
            else:
                dpu = 0
            dpu_list.append(dpu)
            sourcegates = check_point_defects + part_defect
            d = {x:sourcegates.count(x) for x in sourcegates}
            sourcegates_list.extend(sourcegates)
            defects_data.append(d)

        source_list=list(set(sourcegates_list))

        chart_defects = []
        for source in source_list:
            defects_list =[]
            for defects in defects_data:
                if source in defects:
                    defects_list.append(defects[source])
                else:
                    defects_list.append(0)
            chart_defects.append(defects_list) 
        data = {
        'date_list': date_list,
        'dpu': dpu_list,
        'mark_data': mark_data,
        'source_list': source_list,
        'chart_defects': chart_defects,
        'no_of_tractors': no_of_tractors,
        'subinfo': "Plants:"+self.f_plant+" Markets:"+self.f_market+" Shifts:"+self.f_shift+" Base Models:"+self.f_base+" Models:"+self.f_model+" Sourcegates:"+self.f_sourcegate,
        }
        return data



    def removekey(self, dictionary, key):
        remove = dict(dictionary)
        del remove[key]
        return remove

    def post(self, request, *args, **kwargs):
        super(DpuFinalView, self).__init__()
        user = get_user_dict(request)
        form = dict(request.POST)
        
        from_date = self.common.parse_date(form['from_date'][0])
        to_date = self.common.parse_date(form['to_date'][0]) 
        date_list = self.common.get_date_lists(from_date, to_date)
        
        vin_obj = self.common.get_vin_details(user)

        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

        # vin = vin_obj.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        vin = vin_obj
        vsg = VinStatusGroupWise.objects.exclude(d3_status=None).values_list('vin')
        vin = vin.filter(vin__in=vsg)
        data = self.dpu_final_chart_data(request, user, vin, form, date_list)

        return JsonResponse(data, safe=False)

class DpuOverallView(View):
    common = Common()
    
    def __init__(self):
        self.rft_ok = []
        self.not_ok = []  
        self.mark_data = []  
        self.no_of_tractors = []
        self.f_plant = 'All'
        self.f_market = 'All'
        self.f_shift = 'All'
        self.f_base = 'All'
        self.f_model = 'All'
        self.f_sourcegate = 'All'

    def dpu_overall_chart_data(self, request, user, vin, form, date_list):
        dpu_list = [] 
        mark_data = []  
        defects_data = []
        sourcegates_list = []
        no_of_tractors = []
        for _date in date_list:
            check_point_defects = []
            part_defect = []
            my_date = datetime.strptime(_date, '%d-%m-%Y')
            # vin_obj = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            # no_of_tractors.append(len(set([obj.vin for obj in vin_obj])))
            if 'form[dpu_overall_plants]' in request.POST and form['form[dpu_overall_plants]'] != [u'']:
                self.f_plant = Plants.objects.get(id=int(form['form[dpu_overall_plants]'][0])).plant_name
                vin = vin.filter(stations__cells__plants=int(form['form[dpu_overall_plants]'][0]))
            # else:
            if 'form[dpu_overall_markets]' in form and form['form[dpu_overall_markets]'] != [u'']:
                self.f_market = Market.objects.get(id=int(form['form[dpu_overall_markets]'][0])).description
                vin = vin.filter(model__market=int(form['form[dpu_overall_markets]'][0]))
            if 'form[dpu_overall_shifts]' in form and form['form[dpu_overall_shifts]'] != [u'']:
                self.f_shift = Shifts.objects.get(id=int(form['form[dpu_overall_shifts]'][0])).description
                vin = vin.filter(shift=int(form['form[dpu_overall_shifts]'][0]))
            if 'form[dpu_overall_base_models]' in form and form['form[dpu_overall_base_models]'] != [u'']:
                self.f_base = BaseModels.objects.get(id=int(form['form[dpu_overall_base_models]'][0])).description
                vin = vin.filter(model__base_models=int(form['form[dpu_overall_base_models]'][0]))
            if 'form[dpu_overall_models]' in form and form['form[dpu_overall_models]'] != [u'']:
                self.f_model = Models.objects.get(id=int(form['form[dpu_overall_models]'][0])).description
                vin = vin.filter(model=int(form['form[dpu_overall_models]'][0]))
            if 'form[dpu_overall_sourcegates]' in form and form['form[dpu_overall_sourcegates]'] != [u'']:
                # #import pdb;pdb.set_trace()
                sourcegates = SourceGates.objects.get(id=int(form['form[dpu_overall_sourcegates]'][0]))
                self.f_sourcegate = sourcegates.description
                defects = Defects.objects.filter(sourcegates = sourcegates)
                checkpoint_defects = Checkpoints.objects.filter(defects__in = defects)
                # partdefects = Defects.objects.filter(id__in = defects)           
                check_point_defect_list = []
                for check_point_defect in checkpoint_defects:
                    check_point_defect_list.append(check_point_defect.id)
                ##import pdb;pdb.set_trace()
                inspection_defect_vin = InspectionDefects.objects.filter(checkpoints__in=check_point_defect_list).values_list('vin',flat=True)    
                inspection_defect_vin_defect = InspectionDefects.objects.filter(defects__in = defects).values_list('vin',flat=True)
                vin_list = list(chain(inspection_defect_vin, inspection_defect_vin_defect))
                vin = vin.filter(id__in=vin_list)  

            dpu_obj =  vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'))
            no_of_tractors.append(len(set([obj.vin for obj in dpu_obj])))
            # check_point_defects = []
            # part_defect = []
            if len(dpu_obj) != 0:
                    defect_overall = 0
                    for dpu in dpu_obj:
                        inspection_defects =  InspectionDefects.objects.filter(vin=dpu)
                        # defect_overall  += inspection_defects.count()
                        if len(inspection_defects) !=0:
                            for inspection_defect in inspection_defects:
                                if inspection_defect.checkpoints != None:
                                    if 'form[dpu_overall_sourcegates]' in form and form['form[dpu_overall_sourcegates]'] != [u'']:
                                        sourcegates = SourceGates.objects.get(id=int(form['form[dpu_overall_sourcegates]'][0]))
                                        defects_obj = Defects.objects.filter(sourcegates = sourcegates)
                                        checkpoints = Checkpoints.objects.filter(defects__in = defects_obj)
                                        defect_overall  += inspection_defects.filter(id=inspection_defect.id, checkpoints__in=checkpoints).count()
                                    else:
                                        defect_overall  += inspection_defects.filter(id=inspection_defect.id).count()
                                    try:
                                        check_point_defect = Checkpoints.objects.get(
                                            id=inspection_defect.checkpoints.id)
                                        sourcegate =SourceGates.objects.get(id=check_point_defect.defects.sourcegates.id).description
                                        check_point_defect_sourcegate_id = check_point_defect.defects.sourcegates.id
                                        if 'form[dpu_overall_sourcegates]' in form and form['form[dpu_overall_sourcegates]'] != [u'']:
                                            sourcegate_id = int(form['form[dpu_overall_sourcegates]'][0])
                                            if check_point_defect_sourcegate_id == sourcegate_id:
                                                check_point_defects.append(sourcegate)
                                        else:
                                            check_point_defects.append(sourcegate)
                                    except:
                                        check_point_defect = ""
                                else:
                                    if 'form[dpu_overall_sourcegates' in form and form['form[dpu_overall_sourcegates'] != [u'']:
                                        sourcegates = SourceGates.objects.get(id=int(form['form[dpu_overall_sourcegates'][0]))
                                        defects_obj = Defects.objects.filter(sourcegates = sourcegates)
                                        defect_overall  += inspection_defects.filter(id=inspection_defect.id, defects__in=defects_obj).count()
                                    else:
                                        defect_overall  += inspection_defects.filter(id=inspection_defect.id).count()
                                    try:
                                        defect_obj = Defects.objects.get(id=inspection_defect.defects.id)
                                        sourcegate =SourceGates.objects.get(id=defect_obj.sourcegates.id).description
                                        part_defect_sourcegate_id = defect_obj.sourcegates.id
                                        if 'form[dpu_overall_sourcegates]' in form and form['form[dpu_overall_sourcegates]'] != [u'']:
                                            sourcegate_id = int(form['form[dpu_overall_sourcegates]'][0])
                                            if part_defect_sourcegate_id == sourcegate_id:
                                                part_defect.append(sourcegate)
                                        else:
                                            part_defect.append(sourcegate)
                                    except:
                                        defect_obj = ""
                    tractor_count = len(set([dpu.vin for dpu in dpu_obj]))
                    dpu = float("{0:.2f}".format(defect_overall/float(tractor_count)))
                    mark_dict={
                        'name': "Average",
                        'value': dpu,
                        'xAxis': _date,
                        'yAxis': dpu
                        }
                    mark_data.append(mark_dict)
            else:
                dpu = 0
            dpu_list.append(dpu)
            sourcegates = check_point_defects + part_defect
            d = {x:sourcegates.count(x) for x in sourcegates}
            # #import pdb;pdb.set_trace()
            sourcegates_list.extend(sourcegates)
            defects_data.append(d)

        # #import pdb;pdb.set_trace()
        source_list=list(set(sourcegates_list))

        chart_defects = []
        for source in source_list:
            defects_list =[]
            for defects in defects_data:
                if source in defects:
                    defects_list.append(defects[source])
                else:
                    defects_list.append(0)
            chart_defects.append(defects_list) 
        #print chart_defects 
        data = {
        'date_list': date_list,
        'dpu': dpu_list,
        'mark_data': mark_data,
        'source_list': source_list,
        'chart_defects': chart_defects,
        'no_of_tractors': no_of_tractors,
        'subinfo': "Plants:"+self.f_plant+" Markets:"+self.f_market+" Shifts:"+self.f_shift+" Base Models:"+self.f_base+" Models:"+self.f_model+" Sourcegates:"+self.f_sourcegate,
        }
        print (data)
        return data



    def removekey(self, dictionary, key):
        remove = dict(dictionary)
        del remove[key]
        return remove

    def post(self, request, *args, **kwargs):
        super(DpuOverallView, self).__init__()
        user = get_user_dict(request)
        form = dict(request.POST)
        # form = {key: value for key, value in dict(request.POST).items() if value != [u'']}
        
        
        from_date = self.common.parse_date(form['from_date'][0])
        to_date = self.common.parse_date(form['to_date'][0]) 
        date_list = self.common.get_date_lists(from_date, to_date)
        
        vin_obj = self.common.get_vin_details(user)

        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

        vin = vin_obj.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        vsg = VinStatusGroupWise.objects.exclude(overall_status=None).values_list('vin')
        vin = vin.filter(vin__in=vsg)
        # vin = vin_obj
        # form = [self.removekey(form, key) for key in ['from_date', 'to_date']]
        data = self.dpu_overall_chart_data(request, user, vin, form, date_list)
        return JsonResponse(data, safe=False)


class SummaryView(LoginRequiredMixin, FormView):
    common = Common()
    template_name = 'reports/summary.html'

    def get(self, request, *args, **kwargs):
        user = get_user_dict(self.request)
        plants = Plants.objects.all()
        if user['plant'] != '':
            plants = plants.filter(id=user['plant'])
            cells = Cells.objects.filter(plants__in = plants)
            station = Stations.objects.filter(cells__in = cells)
            station_id_list = station.values_list('id', flat=True)
            model_station = ModelStations.objects.filter(station__in = station_id_list).values_list('model',flat=True)
            model = Models.objects.filter(id__in=model_station)
            market_list = model.values_list('market', flat=True)
            market = Market.objects.filter(id__in=market_list) 
            shift = Shifts.objects.filter(plants__in = plants)
            basemodel_list = model.values_list('base_models', flat=True)
            basemodel = BaseModels.objects.filter(id__in=basemodel_list)
        else:
            station = Stations.objects.all()
            market = Market.objects.all()
            shift = Shifts.objects.all()
            basemodel = Models.objects.all()
            model = Models.objects.all()
        context = {
        'plants': plants, 'station':station, 'market':market, 'model':model, 
        'shift':shift, 'basemodel':basemodel 
        }
        return render(request, self.template_name, context)

class SummaryfilterView(View):
    def post(self, request, *args, **kwargs):
        plant = Plants.objects.all()
        if request.POST.get('plant') != 'All':
            plant = Plants.objects.filter(id=request.POST.get('plant'))
        cells = Cells.objects.filter(plants__in = plant)
        station = Stations.objects.filter(cells__in = cells)
        station_id_list = station.values_list('id', flat=True)
        model_station = ModelStations.objects.filter(station__in = station_id_list).values_list('model',flat=True)
        model = Models.objects.filter(id__in=model_station)
        market_list = model.values_list('market', flat=True)
        market = Market.objects.filter(id__in=market_list)#.values('market__description','market__id')
        shift = Shifts.objects.filter(plants__in = plant)
        basemodel_list = model.values_list('base_models', flat=True)
        basemodel = BaseModels.objects.filter(id__in=basemodel_list)#.values('base_models__description', 'base_models__id')
        return JsonResponse( {'station':list(station.values('id','description')),'market':list(market.values('id','description')),'basemodel':list(basemodel.values('id','description')),
            'model':list(model.values('id','description')),'shift':list(shift.values('id','description'))}, safe=False)

class SummarySearchView(View):
    common = Common()
    def _get_avg_inspection_time(self, objs):
        duration = ExpressionWrapper(F('closed_time') - F('created_time'), output_field=fields.DurationField())
        objects = objs.annotate(duration=duration)
        avg_time = td(hours=0, minutes=0)
        for obj in set(objects):
            if obj.duration:
                avg_time = avg_time + obj.duration
        return avg_time        

    def post(self, request, *args, **kwargs):
        user = get_user_dict(self.request)
        plant = request.POST.get('plant')
        market = request.POST.get('market')
        basemodel = request.POST.get('basemodel')
        model = request.POST.get('model')
        station = request.POST.get('station')
        shift = request.POST.get('shift')
        from_date =self.common.parse_date(
            request.POST.get('from_date'))
        to_date = self.common.parse_date(
            request.POST.get('to_date'))
        if "form[contact]" not in request.POST:
            rft_ppm = "rft"
        else:
            rft_ppm = request.POST['form[contact]']
        date_list = self.common.get_date_list(from_date, to_date,rft_ppm)
        vin_status_and_rft = []  
        vin_obj = self.common.get_vin_details(user)

        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

        vin_details = vin_obj.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        vin_status_group = VinStatusGroupWise.objects.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])

        for _date in date_list[0]:
            _date = _date.split('-')
            _date.reverse()
            rolldown_defects = 0
            d2_stage_defects = 0
            final_defects = 0
            overall_defects = 0
            query = self.get_query(request)
            modelstations = ModelStations.objects.all()
            if query:
                vin_obj = vin_details.filter(query)
                vin_list = vin_obj.values_list('vin',flat=True)
                vin_status_obj = vin_status_group.filter(created_time__contains='-'.join(_date), vin__in=vin_list)
            else:
                vin_status_obj = vin_status_group.filter(created_time__contains='-'.join(_date))

            if request.POST.get('station') == 'All':
                vin_status_obj = vin_status_obj.exclude(d1_status=None)
            rolldown_tractors = vin_obj.filter(stations__in=modelstations.filter(station_group__description='D1').values_list('station', flat=True)).filter(created_time__contains='-'.join(_date))
            rolldown_avg_inspectiontime = self._get_avg_inspection_time(rolldown_tractors)
            d2_stage_tractors = vin_obj.filter(stations__in=modelstations.filter(station_group__description='D2').values_list('station', flat=True)).filter(created_time__contains='-'.join(_date))
            d2_stage_avg_inspectiontime = self._get_avg_inspection_time(d2_stage_tractors)
            final_tractors = vin_obj.filter(stations__in=modelstations.filter(station_group__description='D3').values_list('station', flat=True)).filter(created_time__contains='-'.join(_date))
            final_avg_inspectiontime = self._get_avg_inspection_time(final_tractors)
            overall_tractors = vin_obj.filter(stations__in=modelstations.values_list('station', flat=True)).filter(created_time__contains='-'.join(_date))
            overall_avg_inspectiontime = self._get_avg_inspection_time(overall_tractors)
            
            for vin_status in vin_status_obj:
                rolldown_defects += InspectionDefects.objects.filter(vin__vin=vin_status.vin).filter(vin__stations__in=modelstations.filter(station_group__description='D1').values_list('station', flat=True)).count()
                d2_stage_defects += InspectionDefects.objects.filter(vin__vin=vin_status.vin).filter(vin__stations__in=modelstations.filter(station_group__description='D2').values_list('station', flat=True)).count()
                final_defects += InspectionDefects.objects.filter(vin__vin=vin_status.vin).filter(vin__stations__in=modelstations.filter(station_group__description='D3').values_list('station', flat=True)).count()
                overall_defects += InspectionDefects.objects.filter(vin__vin=vin_status.vin).count()
            
            if len(vin_status_obj) != 0:
                vin_status_and_rft.append(
                    {
                        "date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
                        "no_of_tractors": len(vin_status_obj),
                        "rolldown_rft_ok": vin_status_obj.filter(d1_status='RFT OK').count(),
                        "rolldown_rft_not_ok": vin_status_obj.filter(d1_status='RFT NOT OK').count(),
                        "rolldown_rft_avg_inspection": rolldown_avg_inspectiontime,
                        "d2_stage_rft_ok": vin_status_obj.filter(d2_status='RFT OK').count(),
                        "d2_stage_rft_not_ok": vin_status_obj.filter(d2_status='RFT NOT OK').count(),
                        "d2_stage_rft_avg_inspection": d2_stage_avg_inspectiontime,
                        "final_rft_ok": vin_status_obj.filter(d3_status='RFT OK').count(),
                        "final_rft_not_ok": vin_status_obj.filter(d3_status='RFT NOT OK').count(),
                        "final_rft_avg_inspection": final_avg_inspectiontime,
                        "overall_rft_ok": vin_status_obj.filter(overall_status='RFT OK').count(),
                        "overall_rft_not_ok":vin_status_obj.filter(overall_status='RFT NOT OK').count(),
                        "overall_rft_avg_inspection": overall_avg_inspectiontime,
                        "rolldown_dpu": float("{0:.2f}".format(rolldown_defects/float(len(set(rolldown_tractors))))) if len(set(rolldown_tractors)) > 0 else 0,
                        "d2_stage_dpu": float("{0:.2f}".format(d2_stage_defects/float(len(set(d2_stage_tractors))))) if len(set(d2_stage_tractors)) > 0 else 0,
                        "final_dpu": float("{0:.2f}".format(final_defects/float(len(set(final_tractors))))) if len(set(final_tractors)) > 0 else 0,
                        "overall_dpu": float("{0:.2f}".format(overall_defects/float(len(set(overall_tractors))))) if len(set(overall_tractors)) > 0 else 0
                    }
                )
        response = self.render_to_template(vin_status_and_rft, request)
        return JsonResponse(response, safe=False)


    def get_query(self, request):
        query=Q()
        user = get_user_dict(self.request)
        if user['plant'] != '':
            plant = user['plant']
        else:
            plant = request.POST.get('plant')
        if plant != 'All':
            query &=Q(stations__cells__plants__id=plant)
        if request.POST.get('market') != 'All':
            query &=Q(model__market__id=request.POST.get('market'))
        if request.POST.get('basemodel') != 'All':
            query &=Q(model__base_models__id=request.POST.get('basemodel'))
        if request.POST.get('model') != 'All':
           query &=Q(model__id=request.POST.get('model'))
        if request.POST.get('station') != 'All':
           query &=Q(stations__id=request.POST.get('station'))
        if request.POST.get('shift') != 'All':
           query &=Q(shift__id=request.POST.get('shift'))
        return query

    def render_to_template(self, vin_status_and_rft, request):
        
        template = TemplateResponse(request, 'reports/summary_table.html', {
            'items': vin_status_and_rft,
            'Parts_name':Parts_name
        })
        template.render()
        return template.content

class VinSummaryView(View):
    common = Common()
    def post(self, request, *args, **kwargs):
        # # import  pdb;pdb.set_trace
        user = get_user_dict(self.request)
        _date = str(request.POST.get('date')).split('-')
        _date.reverse()
        query = self.get_query(request)
        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

        vin_obj = self.common.get_vin_details(user)
        vin_details = vin_obj.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        vin_status = VinStatusGroupWise.objects.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        
        if query:
            vin_obj = vin_details.filter(query)
            vin_list = vin_obj.values_list('vin',flat=True)
            vin_status_obj = vin_status.filter(created_time__contains='-'.join(_date), vin__in=vin_list)
        else:
            vin_status_obj = vin_status.filter(created_time__contains='-'.join(_date))
        vin_status = []
        if request.POST.get('station') == 'All':
            vin_status_obj = vin_status_obj.exclude(d1_status=None)
        for vin in vin_status_obj:
            model = Models.objects.filter(id__in=VinDetails.objects.filter(vin=vin.vin).values_list('model', flat=True))
            # inspectiondefects = InspectionDefects.objects.filter(vin__vin=vin_status_obj).count()
            # defect_closure = DefectClosure.objects.filter(inspection_defects__vin__vin=vin_status_obj).count()
            vin_status.append({
                    "model": model[0],
                    "vin_status":vin,
            })
            

        response = self.render_to_template(vin_status, request)
        return JsonResponse(response, safe=False)

    def render_to_template(self, vin_status, request):
        template = TemplateResponse(request, 'reports/vin_table.html', {
            'datas': vin_status,
            'Product_name':Product_name
        })
        template.render()
        return template.content

    def get_query(self, request):
        query=Q()
        user = get_user_dict(self.request)
        if user['plant'] != '':
            plant = user['plant']
        else:
            plant = request.POST.get('plant')
        if plant != 'All':
            query &=Q(stations__cells__plants__id=plant)
        if request.POST.get('market') != 'All':
            query &=Q(model__market__id=request.POST.get('market'))
        if request.POST.get('basemodel') != 'All':
            query &=Q(model__base_models__id=request.POST.get('basemodel'))
        if request.POST.get('model') != 'All':
           query &=Q(model__id=request.POST.get('model'))
        if request.POST.get('station') != 'All':
           query &=Q(stations__id=request.POST.get('station'))
        if request.POST.get('shift') != 'All':
           query &=Q(shift__id=request.POST.get('shift'))
        return query

class VinDetailsView(View):
    def __init__(self):
        self.f_plant = 'All'
        self.f_market = 'All'
        self.f_shift = 'All'
        self.f_base = 'All'
        self.f_model = 'All'
        self.f_station = 'All'

    def post(self, request, *args, **kwargs):
        # # import  pdb;pdb.set_trace
        query=Q()
        query = self.get_query(request)
        vin_number = request.POST.get("vin_number")
        
        if request.POST.get('rft') == 'rolldown':
            
            station = ModelStations.objects.filter(station_group__description='D1').values_list('station', flat=True)
        elif request.POST.get('rft') == 'overall':  
            user = get_user_dict(self.request)
            if user['plant'] != '':
                plant = [user['plant']]
            else:
                plant = Plants.objects.all().values_list('id', flat=True)
            station = Stations.objects.filter(cells__plants_id__in = plant)
        elif  request.POST.get('rft') == 'd2_stage': 
            station = ModelStations.objects.filter(station_group__description='D2').values_list('station', flat=True)
        else:
            station = ModelStations.objects.filter(station_group__description='D3').values_list('station', flat=True)
        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        vin = VinDetails.objects.filter(stations__in=station)
        if query:
            vin = vin.filter(query)
        if request.POST.get('rft') == 'overall':
            vin_obj = vin 
        else:
            vin_obj = vin.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)]).values_list('id', flat=True)
        vin_status = VinStatusStationWise.objects.filter(vin__in=vin_obj)
        vinstatus = vin_status.filter(vin__vin=vin_number)
        subinfo = "From Date:"+ request.POST.get('from_date')  +'  '+ "To Date:"+'  ' +request.POST.get('to_date')+'  ' +"Plants:"+self.f_plant+'  ' +" Markets:"+self.f_market+'  ' +" Shifts:"+self.f_shift+'  ' +" Base Models:"+'  ' +self.f_base+'  ' +" Models:"+'  ' +self.f_model+'  ' +" Stations:"+'  ' +self.f_station

        response = self.render_to_template(vinstatus, request, vin_number, subinfo)
        inspectiondefects = InspectionDefects.objects.filter(vin__in = vin_obj)
        inspection_defects = inspectiondefects.filter(vin__vin=vin_number)
        inspection_defect_and_defect_closure = []
        for inspection_defect in inspection_defects:
            try:
                defects_closure = DefectClosure.objects.get(
                    inspection_defects = inspection_defect.id 
                )
            except:
                defects_closure = ""
            inspection_defect_and_defect_closure.append({
                "inspection_defect":inspection_defect,
                "defect_closure":defects_closure,

            })

        inspection_defects_table = self.render_defect_details_to_template(
            inspection_defect_and_defect_closure, request, subinfo
        )
        return JsonResponse({"vin_table":response,
            "inspection_defect_table":inspection_defects_table}, safe=False
        )

    def render_to_template(self, data, request, vin_number, subinfo):
        template = TemplateResponse(request, 'reports/vin_details_table.html', {
            'datas': data,
            'vin_number':vin_number,
            'rft':request.POST.get('rft'),
            'filter_info':subinfo,
            'Product_name':Product_name
        })
        template.render()
        return template.content

    def render_defect_details_to_template(self, data, request, subinfo):
        template = TemplateResponse(request, 'reports/inspection_defect_details.html', {
            'datas': data,
            'rft':request.POST.get('rft'),
            'filter_info':subinfo,
        })
        template.render()
        return template.content  
    
    def get_query(self, request):
        # # import  pdb;pdb.set_trace
        query=Q()
        user = get_user_dict(self.request)
        if user['plant'] != '':
            plant = user['plant']
            self.f_plant = Plants.objects.get(id=user['plant']).plant_name
        else:
            plant = request.POST.get('plant')
            if plant != '':
                query &=Q(stations__cells__plants__id=plant)
                self.f_plant = Plants.objects.get(id=plant).plant_name
            
        if request.POST.get('market') != '':
            query &=Q(model__market__id=request.POST.get('market'))
            self.f_market = Market.objects.get(id=request.POST.get('market')).description
        if request.POST.get('basemodel') != '':
            query &=Q(model__base_models__id=request.POST.get('basemodel'))
            self.f_base = BaseModels.objects.get(id=request.POST.get('basemodel')).description
        if request.POST.get('model') != '':
           query &=Q(model__id=request.POST.get('model'))
           self.f_model = Models.objects.get(id=request.POST.get('model')).description
        if request.POST.get('station') != '':
           query &=Q(stations__id=request.POST.get('station'))
           self.f_station = Stations.objects.get(id=request.POST.get('station')).description
        if request.POST.get('shift') != '':
           query &=Q(shift__id=request.POST.get('shift'))
           self.f_shift = Shifts.objects.get(id=request.POST.get('shift')).description
        return query

    # def get_query(self, request):
    #     query=Q()
    #     user = get_user_dict(self.request)
    #     if user['plant'] != '':
    #         plant = user['plant']
    #     else:
    #         plant = request.POST.get('plant')
    #     if plant != '':
    #         query &=Q(stations__cells__plants__id=plant)
    #     if request.POST.get('market') != '':
    #         query &=Q(model__market__id=request.POST.get('market'))
    #     if request.POST.get('basemodel') != '':
    #         query &=Q(model__base_models__id=request.POST.get('basemodel'))
    #     if request.POST.get('model') != '':
    #        query &=Q(model__id=request.POST.get('model'))
    #     if request.POST.get('station') != '':
    #        query &=Q(stations__id=request.POST.get('station'))
    #     if request.POST.get('shift') != '':
    #        query &=Q(shift__id=request.POST.get('shift'))
    #     return query

class CAPAView(LoginRequiredMixin, TemplateView):
    common = Common()
    template_name = 'reports/capa_table.html'

    def get_context_data(self, **kwargs):
        context = super(CAPAView, self).get_context_data(**kwargs)
        
        return context

class CAPATableView(View):
    common = Common()
    def get_assigned_user(self, rec, assigned_user):
        # # import  pdb;pdb.set_trace
        try:
           if assigned_user == 'assigned_to':
                user=Users.objects.get(user_code=CAPARecords.objects.filter(capa=rec.id)[0].assigned_to).name
           if assigned_user == 'permanent_assigned_to':
               user=Users.objects.get(user_code=CAPARecords.objects.filter(capa=rec.id)[0].permanent_assigned_to).name
        except Users.DoesNotExist:
            try:
                if assigned_user == 'assigned_to': 
                    user=Users.objects.get(name=CAPARecords.objects.filter(capa=rec.id)[0].assigned_to).name
                if assigned_user == 'permanent_assigned_to':
                    user=Users.objects.get(name=CAPARecords.objects.filter(capa=rec.id)[0].permanent_assigned_to).name  
            except Users.DoesNotExist:
                user=''
        except IndexError as error:
            user=''
        return user

    def get_approved_user(self, rec, approved_user):
        # # import  pdb;pdb.set_trace
        try:
            if approved_user == 'approved_by':
                user=Users.objects.get(id=CAPARecords.objects.filter(capa=rec.id)[0].approved_by)
            if approved_user == 'permanent_approved_by':
                user=Users.objects.get(id=CAPARecords.objects.filter(capa=rec.id)[0].permanent_approved_by)
        except Users.DoesNotExist:
            user=''
        except Exception as e:
            user=''
        return user

    def get_shift(self, rec):
        try:
            shift = Shifts.objects.get(id=int(rec.shift))
        except:
            shift = ''
        return shift 

    def get_soucegate_defect_categories(self, rec):

        alert_config = AlertConfig.objects.get(id=int(rec.alert_config))
        if alert_config.defectcategories !=None:
            return alert_config.defectcategories.description
        if alert_config.sourcegate:
            return alert_config.sourcegate.description
    
    def get_tips(self, rec):
        try:
            capa_record = CAPARecords.objects.get(capa=rec.id)
            tips = capa_record.tips
        except CAPARecords.DoesNotExist:
            tips='-'
        return tips

    def post(self, request, *args, **kwargs):
        # # import  pdb;pdb.set_trace
        # try:
        #     request.POST['capa']
        # except  MultiValueDictKeyError:
        #     request.POST = request.POST.copy()
        #     request.POST.update({'capa':'capa'})
            # request.POST.update({'capa':'capa'}) 
        if request.POST['capa'] == 'capa_dash':
            # # import  pdb;pdb.set_trace
            datas = []
            user=get_user_dict(request)
            ids_list = eval(request.POST['datas'])
            if request.POST['repeated_defect'] == 'y':
                capa = CAPA.objects.filter(id__in=ids_list)#.values_list('defect_or_source_gate', flat=True)
                # capa = CAPA.objects.filter(defect_or_source_gate__in=defect_or_source_gate)
            else:
                capa = CAPA.objects.filter(id__in=ids_list)
            #print request.POST
        if request.POST['capa'] == 'capa':
            datas = []
            user=get_user_dict(request)
            date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
            date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')        
            user = get_user_dict(self.request)
            if user['plant'] != '':
                capa = CAPA.objects.filter(plant=user['plant']).order_by('last_modified_date').reverse()
            else:
                capa = CAPA.objects.all().order_by('last_modified_date').reverse()
            capa = capa.extra(where=["created_time_stamp >= '%s' and created_time_stamp <= '%s'"%(date_from,date_to)])
        _obj = capa.query.group_by = ['defect_or_source_gate']
        #print _obj
        for rec in capa:
            defect_count = capa.filter(defect_or_source_gate=rec.defect_or_source_gate).filter(Q(permanent_status='Null') | Q(permanent_status='Open'))
            data={
                'user':user['user'].upper(),
                'capa':rec,
                'defect_count':[value['id'] for value in (defect_count.values('id'))],
                'shift':self.get_shift(rec),
                'categories':self.get_soucegate_defect_categories(rec),
                'assigned_to':self.get_assigned_user(rec, 'assigned_to'),
                'approved_by':self.get_approved_user(rec, 'approved_by'),
                'permanent_assigned_to':self.get_assigned_user(rec, 'permanent_assigned_to'),
                'permanent_approved_by':self.get_approved_user(rec, 'permanent_approved_by'),
                'tips':self.get_tips(rec)
            }
            datas.append(data)
        # print datas
        # # import  pdb;pdb.set_trace
        if request.POST['capa'] == 'capa_dash':
            response = self.render_to_template(datas, request, 'capa_dash', request.POST['repeated_defect'])
        if request.POST['capa'] == 'capa':
            response = self.render_to_template(datas, request)
        return JsonResponse(response, safe=False)

    def render_to_template(self, datas, request, capa_report =None, repeated_defect_report=None):
        template = TemplateResponse(request, 'reports/capa_view.html', {'datas': datas, 'capa_report':capa_report, 'repeated_defect_report':repeated_defect_report})
        template.render()
        return template.content  

class CAPADeatilsView(View):
    def post(self, request):
        response = self.render_to_template(request)
        return JsonResponse(response, safe=False)

    def render_to_template(self, request):
        ## import  pdb;pdb.set_trace
        user = get_user_dict(self.request)
        # user = Users.objects.all()
        id_val = request.POST['id']
        action = request.POST['action']
        form = CAPAForm(request.POST, request.FILES, user = user)
        try:
            form = CAPAForm(user = user)
            capa = CAPA.objects.get(id=id_val)
            capa_record = CAPARecords.objects.get(capa=id_val)
            form.edit_initial(capa_record, request.POST['action'])

        except CAPARecords.DoesNotExist:
            pass
            
        template = TemplateResponse(request, 'reports/capa_details.html', {
            'users': user, 'id':id_val, 'form':form, "title":capa.defect_or_source_gate, 'action':action
        })
        template.render()
        return template.content  

def make_content(template_name, context):
        template     = get_template(template_name)
        render_context = Context(context)
        html_content = template.render(render_context)
        return html_content

def send_capa_alert(subject, html_content, recipient):
        from_email, to = EMAIL_HOST_USER, recipient
        msg = EmailMultiAlternatives(subject, html_content, from_email, to)
        msg.attach_alternative(html_content, "text/html")
        status = msg.send()
        return status

class CAPARecordView(View):
   
    def post(self, request):
        
        # # import  pdb;pdb.set_trace
        user = get_user_dict(self.request)
        #print user['user']
        #user = request.POST.get('assigned_to')
        approved_user = request.POST.get('approved_by')
        tips = request.POST.get('tips')
        _id = request.POST.get('id')
        capa = CAPA.objects.get(id=_id)
        alert_config_obj=AlertConfig.objects.get(id=capa.alert_config)
        alert_obj = AlertGroup.objects.filter(id=alert_config_obj.group.id).prefetch_related('user')
        recipient_list = [x for x in alert_obj[0].user.all().values_list('email_id', flat=True)]
        obj, created = CAPARecords.objects.update_or_create(capa=capa)
        approved_by  = Users.objects.get(id=approved_user)
        try:
            assigned_user = Users.objects.get(user_code=get_user_dict(self.request)['user'])
        except Users.DoesNotExist:
            try:
                assigned_user = Users.objects.get(name=get_user_dict(self.request)['user'])
            except Users.DoesNotExist:
                return JsonResponse({"data":"Your Details not availble please contact administrator"}, safe=False)
        recipient_list.append(approved_by.email_id)
        recipient_list.append(assigned_user.email_id)
        recipient_list = set(recipient_list)
        #print recipient_list
        try:
            file = request.FILES['upload_file']
        except MultiValueDictKeyError:
            file = obj.upload_file
        if request.POST['action'] == '1':
            obj.tips = tips
            obj.assigned_to = user['user']
            obj.approved_by = approved_user
            obj.upload_file = file
            obj.save()
        if request.POST['action'] == '2':
            obj.permanent_tips = tips
            obj.permanent_assigned_to = user['user']
            obj.permanent_approved_by = approved_user
            obj.permanent_upload_file = file
            obj.save()
        ## import  pdb;pdb.set_trace

        if created:
            if request.POST['action'] == '1': 
                capa.status = "Progress"
            if request.POST['action'] == '2':
                capa.permanent_status = "Progress"
            capa.save()
            msg = "Record created successfully"
        else:
            if request.POST['action'] == '1': 
                capa.status = "Progress"
            if request.POST['action'] == '2':
                capa.permanent_status = "Progress"
            capa.save()
            msg = "Record updated successfully"
            
        mail_content = make_content('reports/mail.html', {'capa_id': capa.id, 'sourceGate_decectcategories':capa.defect_or_source_gate, 'approved_user': approved_by.name, 'created_time':obj.last_modified_date, 'organization':capa.organization, 'status':capa.status})
        send_capa_alert(
        'CAPA Alert',
        mail_content,
        recipient_list
        )
        from django.core import serializers
        data = serializers.serialize('json', [capa])

        # capa_obj = json.dumps(capa)
        return JsonResponse({"msg":msg, 'capa':data}, safe=False)

    

class CAPAApproveView(View):
    
    def post(self, request):
        # # import  pdb;pdb.set_trace
        _id = request.POST.get('id')
        try:
            assigned_user = Users.objects.get(user_code=get_user_dict(self.request)['user'])
        except Users.DoesNotExist:
            assigned_user = Users.objects.get(name=get_user_dict(self.request)['user'])
        capa = CAPA.objects.get(id=_id)
        alert_config_obj=AlertConfig.objects.get(id=capa.alert_config)
        alert_obj = AlertGroup.objects.filter(id=alert_config_obj.group.id).prefetch_related('user')
        recipient_list = [x for x in alert_obj[0].user.all().values_list('email_id', flat=True)]
        obj = CAPARecords.objects.filter(capa=capa)
        #user_dict = get_user_dict(self.request)
        # try:
        #     assigned_user=Users.objects.get(user_code=user['user'])
        # except Users.DoesNotExist:
	    #     assigned_user=Users.objects.get(name=user['user'])
        # recipient_list.append(user.email_id)
        recipient_list.append(assigned_user.email_id)
        recipient_list = set(recipient_list)
        if request.POST.get('status') == 'approve':
            if request.POST.get('action') == '1': 
                capa.status = 'Closed'
            if request.POST.get('action') == '2':
                capa.permanent_status = 'Closed'
            capa.save()
            msg = "Approved Successfully"
            if request.POST.get('action') == '1':
                mail_content = make_content('reports/capa_mail.html', {'capa_id': capa.id, 'sourceGate_decectcategories':capa.defect_or_source_gate, 'approved_user':assigned_user.name, 'created_time':capa.last_modified_date, 'organization':capa.organization, 'status':capa.status})
            if request.POST.get('action') == '2':
                mail_content = make_content('reports/capa_mail.html', {'capa_id': capa.id, 'sourceGate_decectcategories':capa.defect_or_source_gate, 'approved_user':assigned_user.name, 'created_time':capa.last_modified_date, 'organization':capa.organization, 'status':capa.permanent_status})
            send_capa_alert(
            'CAPA' + str(capa.id) + ' ' +'Approved',
            mail_content,
            recipient_list,
            )
        if  request.POST.get('status') == 'reject':
            if request.POST.get('action') == '1': 
                capa.status = 'Open'
            if request.POST.get('action') == '2':
                capa.permanent_status = 'Open' 
            capa.save()
            msg = "Rejected"
            if request.POST.get('action') == '1':
                mail_content = make_content('reports/capa_mail.html', {'capa_id': capa.id, 'sourceGate_decectcategories':capa.defect_or_source_gate, 'approved_user':assigned_user.name, 'created_time':capa.last_modified_date, 'organization':capa.organization, 'status':capa.status})
            if request.POST.get('action') == '2':
                mail_content = make_content('reports/capa_mail.html', {'capa_id': capa.id, 'sourceGate_decectcategories':capa.defect_or_source_gate, 'approved_user':assigned_user.name, 'created_time':capa.last_modified_date, 'organization':capa.organization, 'status':capa.permanent_status})
            send_capa_alert(
            'CAPA' + str(capa.id) + ' ' +'Rejected',
            mail_content,
            recipient_list,
            )
            
        return JsonResponse({"msg":msg}, safe=False)

class CAPADownloadView(View):
    def get(self, request):
        # # import  pdb;pdb.set_trace
        _id = request.GET['id']
        capa_record = CAPARecords.objects.get(capa=int(_id))
        try:
            if request.GET.get('action') == '1':
                filename = capa_record.upload_file.name.split('/')[-1]
                response = HttpResponse(capa_record.upload_file, content_type='text/plain')
            if request.GET.get('action') == '2':
                filename = capa_record.permanent_upload_file.name.split('/')[-1]
                response = HttpResponse(capa_record.permanent_upload_file, content_type='text/plain')
            response['Content-Disposition'] = 'attachment; filename=%s' % filename

            return response
        except:
            return render_to_response(
                'reports/capa_table.html', {
                    "message": 'Files Does Not Exist.'
                })
# harshi
class RolldownSummaryView(View):
    def __init__(self):
        self.f_plant = 'All'
        self.f_market = 'All'
        self.f_shift = 'All'
        self.f_base = 'All'
        self.f_model = 'All'
        self.f_station = 'All'

    def post(self, request, *args, **kwargs):
        _date = str(request.POST.get('date')).split('-')
        _date.reverse()
        query = self.get_query(request)
        # # import pdb;pdb.set_trace()
        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        vin_obj = VinDetails.objects.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])        
        if _date == ['Average Percentage']:
            _vin = vin_obj
        else:
            _vin = vin_obj.filter(created_time__contains='-'.join(_date))
        if request.POST.get('station') != '':
            station = request.POST.get('station')
        else:
            if request.POST.get('rft') == 'rolldown':
                model_station = ModelStations.objects.filter(station_group__description='D1')
                station = model_station.values_list('station_id', flat=True)
                rollout_station = model_station.filter(is_rolldown = True)
            elif request.POST.get('rft') == 'overall':
                user = get_user_dict(self.request)
                if user['plant'] != '':
                    plant = [user['plant']]
                else:
                    plant = Plants.objects.all().values_list('id', flat=True)
                station = Stations.objects.filter(cells__plants__id__in=plant)
                model_station = ModelStations.objects.filter(station_group__description='D3')
                station = model_station.values_list('station_id', flat=True)
                rollout_station = model_station.filter(is_final = True)
            elif request.POST.get('rft') == 'd2_stage':
                model_station = ModelStations.objects.filter(station_group__description='D2')
                station = model_station.values_list('station_id', flat=True)
                rollout_station = model_station.filter(d2_rolldown = True)
            else:
                # if request.POST.get('station') == '':
                #     model_station = ModelStations.objects.filter(station_group__description='D3', is_final=True)
                # else:
                model_station = ModelStations.objects.filter(station_group__description='D3')
                station = model_station.values_list('station_id', flat=True)
                rollout_station = model_station.filter(is_final = True)
        if type(station) == unicode:
            station = [station]
            vin = _vin.filter(stations__in=station)
        else:
            vin = _vin.filter(stations__in=station)
        if query:
            filter_vin = vin.filter(query)
            vin = filter_vin.values_list('vin',flat=True)
        vin_status_and_rolldown_rft = []
        if request.POST.get('rft') == 'rolldown':
            vin_status = VinStatusGroupWise.objects.exclude(Q(d1_status=None) | Q(d1_status='')).filter(vin__in=vin.values_list('vin', flat=True))
        elif request.POST.get('rft') == 'overall':            
            vin_status = VinStatusGroupWise.objects.exclude(Q(overall_status=None) | Q(overall_status='')).filter(vin__in=vin.values_list('vin', flat=True))
        elif request.POST.get('rft') == 'd2_stage':
            vin_status = VinStatusGroupWise.objects.exclude(Q(d2_status=None) | Q(d2_status='')).filter(vin__in=vin.values_list('vin', flat=True))
        else:
            vin_status = VinStatusGroupWise.objects.exclude(Q(d3_status=None) | Q(d3_status='')).filter(vin__in=vin.values_list('vin', flat=True))
        for vin_status_obj in vin_status:
            model = Models.objects.filter(id__in=VinDetails.objects.filter(vin=vin_status_obj.vin).values_list('model', flat=True))
            inspectiondefects = InspectionDefects.objects.filter(vin__vin=vin_status_obj.vin, vin__stations__in=station).count()
            defect_closure = DefectClosure.objects.filter(inspection_defects__vin__vin=vin_status_obj.vin, closed_from__in=station).count()
            if query and request.POST.get('station') == '':                    
                vin_created_time = _vin.filter(vin =vin_status_obj, stations__in = rollout_station.values_list('station', flat=True))
            elif request.POST.get('station') != '':
                 vin_created_time = _vin.filter(vin =vin_status_obj, stations = request.POST.get('station'))                
            else:
                vin_created_time = _vin.filter(vin =vin_status_obj,stations__in = rollout_station.values_list('station', flat=True))
            if request.POST.get('station') != '':
                vin_station = VinStatusStationWise.objects.get(vin__vin=vin_status_obj.vin, stations = request.POST.get('station'))
            else:
                vin_station = VinStatusStationWise.objects.filter(vin__vin=vin_status_obj.vin, stations__in = rollout_station.values_list('station', flat=True))
                vin_station = vin_station[0]
            if not vin_created_time:
                vin_created_time = _vin 
            vin_status_and_rolldown_rft.append({
                    "model": model[0],
                    "vin_status":vin_status_obj,
                    "inspectiondefects":inspectiondefects,
                    "defect_closure":defect_closure,
                    # "vin_created_time":vin_created_time[0].created_time,
                    "vin_created_time":"2021-12-30 00:00:00",
                    "vin_station_status":vin_station
            })
        
        # "Plants:"+','.join(_plant_obj)
        subinfo = "From Date:"+ request.POST.get('from_date')  +'  '+ "To Date:"+'  ' +request.POST.get('to_date')+'  ' +"Plants:"+self.f_plant+'  ' +" Markets:"+self.f_market+'  ' +" Shifts:"+self.f_shift+'  ' +" Base Models:"+'  ' +self.f_base+'  ' +" Models:"+'  ' +self.f_model+'  ' +" Stations:"+'  ' +self.f_station

        response = self.render_to_template(vin_status_and_rolldown_rft, request, subinfo)
        return JsonResponse(response, safe=False)
            
    def get_query(self, request):
        # # import  pdb;pdb.set_trace
        query=Q()
        user = get_user_dict(self.request)
        if user['plant'] != '':
            plant = user['plant']
            self.f_plant = Plants.objects.get(id=user['plant']).plant_name
            query &=Q(stations__cells__plants__id=plant)
        else:
            plant = request.POST.get('plant')
            if plant != '':
                query &=Q(stations__cells__plants__id=plant)
                self.f_plant = Plants.objects.get(id=plant).plant_name
            
        if request.POST.get('market') != '':
            query &=Q(model__market__id=request.POST.get('market'))
            self.f_market = Market.objects.get(id=request.POST.get('market')).description
        if request.POST.get('basemodel') != '':
            query &=Q(model__base_models__id=request.POST.get('basemodel'))
            self.f_base = BaseModels.objects.get(id=request.POST.get('basemodel')).description
        if request.POST.get('model') != '':
           query &=Q(model__id=request.POST.get('model'))
           self.f_model = Models.objects.get(id=request.POST.get('model')).description
        if request.POST.get('station') != '':
           query &=Q(stations__id=request.POST.get('station'))
           self.f_station = Stations.objects.get(id=request.POST.get('station')).description
        if request.POST.get('shift') != '':
           query &=Q(shift__id=request.POST.get('shift'))
           self.f_shift = Shifts.objects.get(id=request.POST.get('shift')).description
        return query

    # renderr
    def render_to_template(self, vin_status_and_rolldown_rft, request, subinfo):
        # # import pdb;pdb.set_trace()
        if 'x' in request.POST:
            if request.POST['x'] == "":
                val = "rft"
            else:
                val = "ppm"
        if 'x[]' in request.POST:
            if request.POST['x[]'] == "":
                val = "rft"
            else:
                val = "ppm"
                
        defect_overall = 0
        percentage = 0
        no_of_tractors = []
        vin_obj = VinDetails.objects.all()
        print('----------------------------')
        print(request.POST)
        print('----------------------------')
        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        vin = vin_obj.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        
        rolldown_stations = ModelStations.objects.filter(station_group__description='D1').values_list('station', flat=True)
        d2_stations = ModelStations.objects.filter(station_group__description='D2').values_list('station', flat=True)
        final_stations = ModelStations.objects.filter(station_group__description='D3').values_list('station', flat=True)
        
        if str(request.POST['rft']) == 'rolldown':          
          final_stations = rolldown_stations
        
        if str(request.POST['rft']) == 'overall':
          final_stations = ModelStations.objects.filter(station_group__description__in=['D3','D2','D1']).values_list('station', flat=True)
        
        if str(request.POST['rft']) == 'd2_stage':
          final_stations = d2_stations
        	
        if str(request.POST['rft']) == 'final':
          #vinobj = VinStatusGroupWise.objects.filter(vin__in = vin_ids)
          #no_of_tractors = vinobj.count()
          #rft_ok = vinobj.filter(d3_status='RFT OK').count()
          #not_ok = vinobj.filter(d3_status='RFT NOT OK').count()
          #try:
          #    ppm = float(rft_ok)/(int(rft_ok)+int(not_ok))*1000000
          #except:
          #    ppm = 0
          pass
        		
        my_date = datetime.strptime(request.POST.get('date'), '%d-%m-%Y')
        current_vin = vin.filter(created_time__contains=datetime.strftime(my_date, '%Y-%m-%d'), stations__in=final_stations)
        
        vin_obj = VinStatusGroupWise.objects.filter(vin__in=set(current_vin))
        tractors_count = vin_obj.count()
        no_of_tractors.append(tractors_count)
        defect_overall = 0
        for dpu in current_vin:
          inspection_defects =  InspectionDefects.objects.filter(vin=dpu)
          defect_overall  += inspection_defects.count()
          if defect_overall != 0 and tractors_count != 0:
            percentage = float("{0:.2f}".format((defect_overall/float(tractors_count))*1000000))
          else:
            percentage = 0
        print('defect', defect_overall ,percentage, tractors_count)  
        #print('RFT ok', vin_obj.filter(overall_status='RFT OK').count() ,percentage_ok, tractors_count)
        
        template = TemplateResponse(request, 'reports/rolldown_summary.html', {
            'datas': vin_status_and_rolldown_rft,
            'rft': request.POST.get('rft'),
            'no_of_tractors':tractors_count,
            'rft_ok':defect_overall,
            'not_ok':defect_overall,
            'ppm':percentage,
            'val':val,
            'date':request.POST['date'],
            'filter_info':subinfo
        })
        template.render()
        return template.content        

class DefectsSummaryView(LoginRequiredMixin, TemplateView):
    # template_name = 'reports/defects_summary.html'

    def get_context_data(self, **kwargs):
        # # import  pdb;pdb.set_trace
        context = super(DefectsSummaryView, self).get_context_data(**kwargs)
        user = get_user_dict(self.request)
        plants = Plants.objects.all()
        if user['plant'] != '':
            plants = plants.filter(id=user['plant'])
            cells = Cells.objects.filter(plants__in = plants)
            station = Stations.objects.filter(cells__in = cells)
            station_id_list = station.values_list('id', flat=True)
            model_station = ModelStations.objects.filter(station__in = station_id_list).values_list('model',flat=True)
            model = Models.objects.filter(id__in=model_station)
            market_list = model.values_list('market', flat=True)
            market = Market.objects.filter(id__in=market_list) 
            shift = Shifts.objects.filter(plants__in = plants)
            basemodel_list = model.values_list('base_models', flat=True)
            basemodel = BaseModels.objects.filter(id__in=basemodel_list)
        else:
            station = Stations.objects.all()
            market = Market.objects.all()
            shift = Shifts.objects.all()
            basemodel = Models.objects.all()
            model = Models.objects.all()
        station_group = StationGroups.objects.all()
        context = {
        'plants': plants, 'station':station, 'market':market, 'model':model, 
        'shift':shift, 'basemodel':basemodel, 'station_group':station_group

        }
        return context

class DefectsSummaryfilterView(View):
        def post(self, request, *args, **kwargs):
            plant = Plants.objects.all()
            if request.POST.get('plant') != 'All':
                plant = Plants.objects.filter(id=request.POST.get('plant'))
            cells = Cells.objects.filter(plants__in = plant)
            station = Stations.objects.filter(cells__in = cells)
            station_id_list = station.values_list('id', flat=True)
            model_station = ModelStations.objects.filter(station__in = station_id_list).values_list('model',flat=True)
            model = Models.objects.filter(id__in=model_station)
            market_list = model.values_list('market', flat=True)
            market = Market.objects.filter(id__in=market_list)#.values('market__description','market__id')
            shift = Shifts.objects.filter(plants__in = plant)
            basemodel_list = model.values_list('base_models', flat=True)
            basemodel = BaseModels.objects.filter(id__in=basemodel_list)#.values('base_models__description', 'base_models__id')
            
            return JsonResponse( {'station':list(station.values('id','description')),'market':list(market.values('id','description')),'basemodel':list(basemodel.values('id','description')),
                'model':list(model.values('id','description')),'shift':list(shift.values('id','description'))}, safe=False)
                

class DefectsSummarySearchView(View):
    common = Common()
    def post(self, request, *args, **kwargs):
        # import pdb;pdb.set_trace()
        from_date =self.common.parse_date(
            request.POST.get('from_date'))
        to_date = self.common.parse_date(
            request.POST.get('to_date'))
        if "form[contact]" not in request.POST:
            rft_ppm = "rft"
        else:
            rft_ppm = request.POST['form[contact]']
        date_list = self.common.get_date_lists(from_date, to_date)
        inspection_defect_and_defect_closure = [] 

        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

        vin_obj = VinDetails.objects.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        
        for _date in date_list:
            _date = str(_date).split('-')
            _date.reverse()
            query = self.get_query(request, _date)
            if query:
                vins = vin_obj.filter(query).filter(created_time__contains='-'.join(_date))
                # if  request.POST.get('station_group') !='All' and request.POST.get('station') =='All':
                #     # import  pdb;pdb.set_trace
                    
                    
            else:
                vins = vin_obj.filter(created_time__contains='-'.join(_date))
            for vin in vins:
                    inspection_defects_obj = InspectionDefects.objects.filter(vin=vin.id)
                    for inspection_defect in inspection_defects_obj:
                        try:
                            defects_closure = DefectClosure.objects.get(
                                inspection_defects = inspection_defect.id 
                            )
                        except:
                            # import pdb;pdb.set_trace()
                            defects_closure = ""
                        vin_status = VinStatusGroupWise.objects.get(vin=inspection_defect.vin)
                        inspection_defect_and_defect_closure.append({
                            "date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
                            "vin":vin,
                            "inspection_defect":inspection_defect,
                            "defect_closure":defects_closure,
                            "vin_status":vin_status
                        })
        response = self.render_defect_details_to_template(
            inspection_defect_and_defect_closure, request
        )
        return JsonResponse(response, safe=False)

    def render_defect_details_to_template(self, data, request):
        template = TemplateResponse(request, 'reports/defects_summary_table.html', {
            'datas': data,
            'Product_name':Product_name
        })
        template.render()
        return template.content   

    def get_query(self, request, date):
        query=Q()
        user = get_user_dict(self.request)
        if user['plant'] != '':
            plant = user['plant']
        else:
            plant = request.POST.get('plant')
        if plant != 'All':
            query &=Q(stations__cells__plants__id=plant)
        if request.POST.get('market') != 'All':
            query &=Q(model__market__id=request.POST.get('market'))
        if request.POST.get('basemodel') != 'All':
            query &=Q(model__base_models__id=request.POST.get('basemodel'))
        if request.POST.get('model') != 'All':
           query &=Q(model__id=request.POST.get('model'))
        if  request.POST.get('station_group') =='All' and request.POST.get('station') !='All':
            query &=Q(stations__id=request.POST.get('station'))
        if  request.POST.get('station_group') !='All' and request.POST.get('station') =='All':
            stations_id = ModelStations.objects.filter(station_group=request.POST.get('station_group')).values_list('station', flat=True)
            query &=Q(stations__id__in=stations_id)
        # if request.POST.get('station') != 'All':
        #    query &=Q(stations__id=request.POST.get('station'))
        if request.POST.get('shift') != 'All':
           query &=Q(shift__id=request.POST.get('shift'))
        return query

class DefectsView(LoginRequiredMixin, TemplateView):
    # # import  pdb;pdb.set_trace
    common = Common()
    template_name = 'reports/defects.html'

    def get_context_data(self, **kwargs):
        context = super(DefectsView, self).get_context_data(**kwargs)
        defects_filter_form = DefectsFilterForm(
            user=get_user_dict(self.request),
            )
        context = {
            'defects_filter_form': defects_filter_form
        }
        return context

class DefectSearchView(View):
    from collections import OrderedDict
    common = Common()
    def get_sourcegate_char_data(self, inspection_obj, defects_objs):
        series = []
        legend = []
        for defects_obj in defects_objs:
            legend.append(defects_obj['defects__sourcegates__description'])
            series.append({
                'name': defects_obj['defects__sourcegates__description'],
                'value': defects_obj['count']
                })
        # # import  pdb;pdb.set_trace
        others_count = inspection_obj.exclude(defects__description__in=legend).count()
        if others_count > 0:
            legend.append("Others")
            series.append(
                {
                'name':'Others',
                'value':others_count, 'selected':"true"
                }
            )
        return legend, series

    def get_inspection_defects(self, user):
        inspection_obj = InspectionDefects.objects.all()
        if user['plant'] != '':
            inspection_obj = inspection_obj.filter(vin__plant=user['plant'])
        return inspection_obj

    def get_chart_data(self, inspection_obj, defects_objs):
        series = []
        legend = []
        # # # # # import pdb;pdb.set_trace()
        for defects_obj in defects_objs:
            legend.append(defects_obj['defects__description'])
            series.append({
                'name': defects_obj['defects__description'],
                'value': defects_obj['count']
                })
        # # # # # import pdb;pdb.set_trace()
        others_count = inspection_obj.exclude(defects__description__in=legend).count()
        if others_count > 0:
            legend.append("Others")
            series.append(
                {
                'name':'Others',
                'value':others_count, 'selected':"true"
                }
            )
        return legend, series


    def post(self, request, *args, **kwargs):
        # # # # # import pdb;pdb.set_trace()
        user = get_user_dict(self.request)
        form = dict(request.POST)
        from_date =self.common.parse_date(
            request.POST.get('from_date'))
        to_date = self.common.parse_date(
            request.POST.get('to_date'))
        if "form[contact]" not in request.POST:
            rft_ppm = "rft"
        else:
            rft_ppm = request.POST['form[contact]']
        date_list = self.common.get_date_lists(from_date, to_date)
        table_data = []
        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        inspection_obj = self.get_inspection_defects(user)
        # # # # # import pdb;pdb.set_trace()
        if 'form[defects_plants]' in form and form['form[defects_plants]'] != [u'']:
            inspection_obj = inspection_obj.filter(vin__plant=int(form['form[defects_plants]'][0]))
        if 'form[defects_markets]' in form and form['form[defects_markets]'] != [u'']:
            inspection_obj = inspection_obj.filter(vin__model__market=int(form['form[defects_markets]'][0]))
        if 'form[defects_shifts]' in form and form['form[defects_shifts]'] != [u'']:
            inspection_obj = inspection_obj.filter(vin__shift=int(form['form[defects_shifts]'][0]))
        if 'form[defects_base_models]' in form and form['form[defects_base_models]'] != [u'']:
            inspection_obj = inspection_obj.filter(vin__model__base_models=int(form['form[defects_base_models]'][0]))
        if 'form[defects_models]' in form and form['form[defects_models]'] != [u'']:
            inspection_obj = inspection_obj.filter(vin__model=int(form['form[defects_models]'][0]))
        if 'form[defects_stations]' in form and form['form[defects_stations]'] != [u'']:
            inspection_obj = inspection_obj.filter(vin__stations=int(form['form[defects_stations]'][0])) 
        inspection_obj = inspection_obj.extra(where=["InspectionDefects.created_time >= '%s' and InspectionDefects.created_time <= '%s'"%(date_from,date_to)])   
        if 'form[defects_category]' in form and form['form[defects_category]'] == [u'Sourcegate']:
            defects_objs = inspection_obj.values('defects__sourcegates__description').annotate(count=Count('defects')).order_by('-count')[:10]
            legend, series = self.get_sourcegate_char_data(inspection_obj, defects_objs)
            from operator import itemgetter
            series = sorted(series, key=itemgetter('value'), reverse=True)
            values = [item['value'] for item in series]
            pareto = np.cumsum([value/float(sum(values))*100 for value in values])
        else:
            defects_objs = inspection_obj.values('defects__description').annotate(count=Count('defects')).order_by('-count')[:10]
            legend, series = self.get_chart_data(inspection_obj, defects_objs)
            from operator import itemgetter
            series = sorted(series, key=itemgetter('value'), reverse=True)
            values = [item['value'] for item in series]
            pareto = np.cumsum([value/float(sum(values))*100 for value in values])
        # # # # # import pdb;pdb.set_trace()
        for i in range(len(legend)):
            table_data.append({'name':series[i]['name'],'value':series[i]['value'],'quantity':pareto[i]})
        #print table_data

        
        
            
        chart_data = {
            'user': user,
            'titles': 'Defects For ' + date_list[0] + ' to ' + date_list[len(date_list)-1],
            'legend': legend,
            'series': series,
            'defects': [item['name'] for item in series],
            'counts': [item['value'] for item in series],
            'pareto': list(pareto.round(2)),
            'table_data':table_data
            
        }
        return JsonResponse(chart_data, safe=False)

class DefectsFilterView(View):
    
    def post(self, request):
        if 'defects_plants' in request.POST or 'defects_models' in request.POST:
            defects_form = DefectsFilterForm(user=get_user_dict(request), initial=request.POST)
            defects_filter_form = self.render_to_defects_template(request, defects_form)
            return JsonResponse(defects_filter_form, safe=False)
    
    def render_to_defects_template(self, request, form):
        template = TemplateResponse(request, 'reports/defects_filter_form.html', {
            'defects_filter_form': form,
        })
        template.render()
        return template.content

class ReworkedSummaryView(LoginRequiredMixin, TemplateView):
    # template_name = 'reports/defects_summary.html'

    def get_context_data(self, **kwargs):
        context = super(ReworkedSummaryView, self).get_context_data(**kwargs)
        user = get_user_dict(self.request)
        plants = Plants.objects.all()
        if user['plant'] != '':
            plants = plants.filter(id=user['plant'])
            cells = Cells.objects.filter(plants__in = plants)
            station = Stations.objects.filter(cells__in = cells)
            station_id_list = station.values_list('id', flat=True)
            model_station = ModelStations.objects.filter(station__in = station_id_list).values_list('model',flat=True)
            model = Models.objects.filter(id__in=model_station)
            market_list = model.values_list('market', flat=True)
            market = Market.objects.filter(id__in=market_list) 
            shift = Shifts.objects.filter(plants__in = plants)
            basemodel_list = model.values_list('base_models', flat=True)
            basemodel = BaseModels.objects.filter(id__in=basemodel_list)
        else:
            station = Stations.objects.all()
            market = Market.objects.all()
            shift = Shifts.objects.all()
            basemodel = Models.objects.all()
            model = Models.objects.all()
        context = {
        'plants': plants, 'station':station, 'market':market, 'model':model, 
        'shift':shift, 'basemodel':basemodel 
        }
        return context

class ReworkedSummaryfilterView(View):
    def post(self, request, *args, **kwargs):
        plant = Plants.objects.all()
        if request.POST.get('plant') != 'All':
            plant = Plants.objects.filter(id=request.POST.get('plant'))
        cells = Cells.objects.filter(plants__in = plant)
        station = Stations.objects.filter(cells__in = cells)
        station_id_list = station.values_list('id', flat=True)
        model_station = ModelStations.objects.filter(station__in = station_id_list).values_list('model',flat=True)
        model = Models.objects.filter(id__in=model_station)
        market_list = model.values_list('market', flat=True)
        market = Market.objects.filter(id__in=market_list)#.values('market__description','market__id')
        shift = Shifts.objects.filter(plants__in = plant)
        basemodel_list = model.values_list('base_models', flat=True)
        basemodel = BaseModels.objects.filter(id__in=basemodel_list)#.values('base_models__description', 'base_models__id')
        return JsonResponse( {'station':list(station.values('id','description')),'market':list(market.values('id','description')),'basemodel':list(basemodel.values('id','description')),
            'model':list(model.values('id','description')),'shift':list(shift.values('id','description'))}, safe=False)
                
class ReworkedSummarySearchView(View):
    common = Common()
    def post(self, request, *args, **kwargs):
        from_date =self.common.parse_date(
            request.POST.get('from_date'))
        to_date = self.common.parse_date(
            request.POST.get('to_date'))
        if "form[contact]" not in request.POST:
            rft_ppm = "rft"
        else:
            rft_ppm = request.POST['form[contact]']
        date_list = self.common.get_date_lists(from_date, to_date)
        summary_data = [] 
        
        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

        vin_detail = VinDetails.objects.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        
        for _date in date_list:
            _date = str(_date).split('-')
            _date.reverse()
            query = self.get_query(request, _date)
            if query:
                vin_obj = vin_detail.filter(query).filter(created_time__contains='-'.join(_date))
            else:
                vin_obj = vin_detail.filter(created_time__contains='-'.join(_date))
            
            no_of_tractors = len(set([vin.vin for vin in vin_obj]))
            defects_count = InspectionDefects.objects.filter(vin__in=vin_obj).count()
            reworked_time_list = InspectionDefects.objects.filter(vin__in=vin_obj).values_list('reworked_time')
            reworked_time = ReworkedTime.objects.filter(id__in=reworked_time_list).aggregate(Sum('reworked_time'))
            if reworked_time['reworked_time__sum']:
                duration = str(td(seconds=int(reworked_time['reworked_time__sum']))) 
            else:
                duration = 0

            summary_data.append({
                            "date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
                            "no_of_tractors":no_of_tractors,
                            "defects_count":defects_count,
                            "reworked_time":duration,
                        })

        response = self.render_reworked_details_to_template(
            summary_data, request
        )
        return JsonResponse(response, safe=False)

    def render_reworked_details_to_template(self, data, request):
        template = TemplateResponse(request, 'reports/reworked_summary_table.html', {
            'datas': data,
            'Parts_name':Parts_name        
            })
        template.render()
        return template.content   

    def get_query(self, request, date):
        query=Q()
        user = get_user_dict(self.request)
        if user['plant'] != '':
            plant = user['plant']
        else:
            plant = request.POST.get('plant')
        if plant != 'All':
            query &=Q(stations__cells__plants__id=plant)
        if request.POST.get('market') != 'All':
            query &=Q(model__market__id=request.POST.get('market'))
        if request.POST.get('basemodel') != 'All':
            query &=Q(model__base_models__id=request.POST.get('basemodel'))
        if request.POST.get('model') != 'All':
           query &=Q(model__id=request.POST.get('model'))
        if request.POST.get('station') != 'All':
           query &=Q(stations__id=request.POST.get('station'))
        if request.POST.get('shift') != 'All':
           query &=Q(shift__id=request.POST.get('shift'))
        return query                

class OverallVinDetailsView(View):
    def post(self, request, *args, **kwargs):
        # # import  pdb;pdb.set_trace
        query = self.get_query(request)
        vin_number = request.POST.get("vin_number")
        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        vin = VinDetails.objects.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)]).values_list('id', flat=True)
        if query:
            vin = vin.filter(query)
        vin_obj = vin.values_list('id', flat=True)
        vin_status = VinStatusStationWise.objects.filter(vin__in=vin_obj)
        vinstatus = vin_status.filter(vin__vin=vin_number)
        response = self.render_to_template(vinstatus, request, vin_number)
        inspectiondefects = InspectionDefects.objects.filter(vin__in = vin_obj)
        inspection_defects = inspectiondefects.filter(vin__vin=vin_number)
        inspection_defect_and_defect_closure = []
        for inspection_defect in inspection_defects:
            try:
                defects_closure = DefectClosure.objects.get(
                    inspection_defects = inspection_defect.id 
                )
            except:
                defects_closure = ""
            inspection_defect_and_defect_closure.append({
                "inspection_defect":inspection_defect,
                "defect_closure":defects_closure,

            })

        inspection_defects_table = self.render_defect_details_to_template(
            inspection_defect_and_defect_closure, request
        )
        return JsonResponse({"vin_table":response,
            "inspection_defect_table":inspection_defects_table}, safe=False
        )

    def render_to_template(self, data, request, vin_number):
        template = TemplateResponse(request, 'reports/vin_details_table.html', {
            'datas': data,
            'Product_name':Product_name
        })
        template.render()
        return template.content

    def render_defect_details_to_template(self, data, request):
        template = TemplateResponse(request, 'reports/inspection_defect_details.html', {
            'datas': data,
        })
        template.render()
        return template.content  

    def get_query(self, request):
        query=Q()
        user = get_user_dict(self.request)
        if user['plant'] != '':
            plant = user['plant']
        else:
            plant = request.POST.get('plant')
        if plant != 'All':
            query &=Q(stations__cells__plants__id=plant)
        if request.POST.get('market') != 'All':
            query &=Q(model__market__id=request.POST.get('market'))
        if request.POST.get('basemodel') != 'All':
            query &=Q(model__base_models__id=request.POST.get('basemodel'))
        if request.POST.get('model') != 'All':
           query &=Q(model__id=request.POST.get('model'))
        if request.POST.get('station') != 'All':
           query &=Q(stations__id=request.POST.get('station'))
        if request.POST.get('shift') != 'All':
           query &=Q(shift__id=request.POST.get('shift'))
        return query


class VinView(LoginRequiredMixin, TemplateView):
    
    #common = Common()
    template_name = 'reports/vin_summary.html'

    def get_context_data(self, **kwargs):
        context = super(VinView, self).get_context_data(**kwargs)
        vin_summary_form = VinSummaryForm()
        context = {
            'vin_summary_form': vin_summary_form,
            'Product_name': Product_name
        }
        return context

class VinSearchView(View):

    def post(self, request, *args, **kwargs):
        # # import  pdb;pdb.set_trace 
        vin_detail = VinDetails.objects.filter(vin=request.POST.get('vin'))
        #response = self.render_to_template(vin_detail, request)
        #return JsonResponse(response, safe=False)
        inspection_defect_and_defect_closure = []
        if len(vin_detail) > 0:  
            for vin in vin_detail:
                    print(vin,vin.created_time,vin.closed_time)
                    inspection_defects_obj = InspectionDefects.objects.filter(vin=vin.id)
                    if inspection_defects_obj:
                        for inspection_defect in inspection_defects_obj:
                            try:
                                defects_closure = DefectClosure.objects.get(
                                    inspection_defects = inspection_defect.id 
                                )
                            except:
                                defects_closure = ""
                            #print vin
                            inspection_defect_and_defect_closure.append({
                                #"date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
                                "vin":vin,
                                "inspection_defect":inspection_defect,
                                "defect_closure":defects_closure,
                            })
                        if inspection_defects_obj:
                            response = self.render_to_template(
                                inspection_defect_and_defect_closure, request
                            )
                    else:
                        #print vin.model
                        defects_closure = ""
                        inspection_defect = ""
                        inspection_defect_and_defect_closure.append({
                                #"date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
                                "vin":vin,
                                "inspection_defect":inspection_defect,
                                "defect_closure":defects_closure,
                            })
                        response = self.render_to_template(
                            inspection_defect_and_defect_closure, request
                        )
            
            return JsonResponse(response, safe=False)

        else:
                defects_closure = ""
                inspection_defect = ""
                vin =""
                inspection_defect_and_defect_closure.append({
                        #"date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
                        "vin":vin,
                        "inspection_defect":inspection_defect,
                        "defect_closure":defects_closure,
                    })
                response = self.render_to_template(
                    inspection_defect_and_defect_closure, request
                )
                return JsonResponse(response, safe=False)            
    def render_to_template(self, data, request):
            template = TemplateResponse(request, 'reports/vin_details.html', {
            'datas': data,
            'Product_name':Product_name
            })
            template.render()
            return template.content




class TravelCardView(LoginRequiredMixin, TemplateView):
    
    #common = Common()
    template_name = 'reports/travelcard.html'

    def get_context_data(self, **kwargs):
        context = super(TravelCardView, self).get_context_data(**kwargs)
        vin_summary_form = VinSummaryForm()
        context = {
            'vin_summary_form': vin_summary_form
        }
        return context

# class TravelCardSearchView(View):

#     def post(self, request, *args, **kwargs):
#         import  pdb;pdb.set_trace()
#         vin_detail = VinDetails.objects.filter(vin=request.POST.get('vin'))
#         #response = self.render_to_template(vin_detail, request)
#         #return JsonResponse(response, safe=False)
#         inspection_defect_and_defect_closure = []
#         if len(vin_detail) > 0:  
#             for vin in vin_detail:
#                     print(vin,vin.created_time,vin.closed_time)
#                     inspection_defects_obj = InspectionDefects.objects.filter(vin=vin.id)
#                     if inspection_defects_obj:
#                         for inspection_defect in inspection_defects_obj:
#                             try:
#                                 defects_closure = DefectClosure.objects.get(
#                                     inspection_defects = inspection_defect.id 
#                                 )
#                             except:
#                                 defects_closure = ""
#                             #print vin
#                             inspection_defect_and_defect_closure.append({
#                                 #"date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
#                                 "vin":vin,
#                                 "inspection_defect":inspection_defect,
#                                 "defect_closure":defects_closure,
#                             })
#                         if inspection_defects_obj:
#                             response = self.render_to_template(
#                                 inspection_defect_and_defect_closure, request
#                             )
#                     else:
#                         #print vin.model
#                         defects_closure = ""
#                         inspection_defect = ""
#                         inspection_defect_and_defect_closure.append({
#                                 #"date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
#                                 "vin":vin,
#                                 "inspection_defect":inspection_defect,
#                                 "defect_closure":defects_closure,
#                             })
#                         response = self.render_to_template(
#                             inspection_defect_and_defect_closure, request
#                         )
            
#             return JsonResponse(response, safe=False)

#         else:
#                 defects_closure = ""
#                 inspection_defect = ""
#                 vin =""
#                 inspection_defect_and_defect_closure.append({
#                         #"date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
#                         "vin":vin,
#                         "inspection_defect":inspection_defect,
#                         "defect_closure":defects_closure,
#                     })
#                 response = self.render_to_template(
#                     inspection_defect_and_defect_closure, request
#                 )
#                 return JsonResponse(response, safe=False)            
#     def render_to_template(self, data, request):
#             import pdb;pdb.set_trace()
#             template = TemplateResponse(request, 'reports/travelcardfilter.html', {
#             'datas': data
#             })
#             template.render()
#             return template.content
            



class VinAlertLogView(View):
    def get(self, request):
        # # import  pdb;pdb.set_trace
        try:
            vinalertlog = VinAlertLog.objects.get(capa_id=int(request.GET['id']))
            vin_obj = vinalertlog.vin.all()
            vindetails = VinDetails.objects.filter(id__in = (vin_obj.values_list('id', flat=True)))
        except VinAlertLog.DoesNotExist:
            vindetails = ''
        response = self.render_to_template(
                    vindetails, vinalertlog, request
                )
        return JsonResponse(response, safe=False)
    
    def render_to_template(self, data, vinalertlog, request):
            template = TemplateResponse(request, 'reports/vinalerttable.html', {
            'datas': data,
            'vinalertlog':vinalertlog
            })
            template.render()
            return template.content

class CapaDashboardView(LoginRequiredMixin, TemplateView, View):
    
    #common = Common()
    template_name = 'reports/capa_dashboard.html'

    def get_context_data(self, **kwargs):
        context = super(CapaDashboardView, self).get_context_data(**kwargs)
        user = get_user_dict(self.request)
        capa_dashboard_form = CAPADashboardForm(user=user)
        context = {
            'capa_dashboard_form': capa_dashboard_form
        }
        return context

    def post(self, request, *args, **kwargs):
        shift = get_shift_list(request.POST['plant'])
        return JsonResponse({'shift':list(shift.values('id','description'))}, safe=False)

class CAPADashboardTableView(View):
    common = Common()
    def get(self, request):
        user = get_user_dict(self.request)
        datas = []
        self.mark_data=[]
        self.agency=[]
        self.containment_action_open=[]
        self.containment_action_closed=[]
        self.capa_tot = []
        self.permanent_action_open=[]
        self.permanent_action_closed=[]
        self.ageing_capa_percentage=[]
        self.ageing_capa_percentage_close=[]
        self.ageing_capa_permanent_percentage=[]
        self.ageing_capa_permanent_percentage_close=[]
        source_gates = SourceGates.objects.all()
        date_from = (datetime.strptime(request.GET.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.GET.get('to_date'), "%d-%m-%Y %H:%M:%S") -td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        query = self.get_query(request, user)
        capa_tot = CAPA.objects.filter(query)
        capa_tot = capa_tot.extra(where=["created_time_stamp >= '%s' and created_time_stamp <= '%s'"%(date_from,date_to)])
        capa_total_count = capa_tot.count()
        capa_open_count= capa_tot.filter(Q(permanent_status='Null') | Q(permanent_status='Open')).count()
        capa_closed_count = capa_tot.filter(permanent_status='Closed').count()
        capa_progress_count = capa_tot.filter(permanent_status='Progress').count()
        
        for source_gate in source_gates:
            # # import  pdb;pdb.set_trace
            if request.GET.get('plant') =='':
                if  user['plant'] == '':
                    plants = Plants.objects.all()
                if user['plant'] != '':
                    plants = Plants.objects.filter(id=int(user['plant']))
            else:
                plants = Plants.objects.filter(id=int(request.GET.get('plant')))
            for _obj in plants:    
                capa = capa_tot.filter(sourcegate=source_gate.description)
                if query:
                    capa = capa.filter(query)
                if request.GET.get('shift') == '':
                    shifts = Shifts.objects.filter(plants=_obj)
                else:
                    shifts = Shifts.objects.filter(id=int(request.GET.get('shift')))
                for _shift in shifts:
                    now = datetime.now().replace(microsecond=0)
                    date_ = (datetime.strptime(str(now), "%Y-%m-%d %H:%M:%S") -td(hours=24)).strftime('%Y-%m-%d %H:%M:%S')
                    _permanent_filter_date = (datetime.strptime(str(now), "%Y-%m-%d %H:%M:%S") -td(hours=7*24)).strftime('%Y-%m-%d %H:%M:%S')
                    ageing_capa = capa.filter(Q(status='Null') | Q(status='Open')).filter(created_time_stamp__lt=date_, shift=_shift.id)
                    permanent_ageing_capa = capa.filter(Q(permanent_status='Null') | Q(permanent_status='Open')).filter(created_time_stamp__lt = _permanent_filter_date, shift=_shift.id)
                    capa_dict = {
                        'plant':_obj,
                        'shift':_shift,
                        'source_gate':source_gate.description,
                        'totcount': [value['id'] for value in (capa.filter(shift=_shift.id).values('id'))],
                        'containment_action_open':[value['id'] for value in (capa.filter(Q(status='Null') | Q(status='Open')).filter(shift=_shift.id).values('id'))],
                        'containment_action_closed':[value['id'] for value in (capa.filter(status='Closed').filter(shift=_shift.id).values('id'))],
                        'containment_action_progress':[value['id'] for value in (capa.filter(status='Progress').filter(shift=_shift.id).values('id'))],
                        'containment_ageing':[value['id'] for value in (ageing_capa.values('id'))],
                        'permanent_action_open':[value['id'] for value in (capa.filter(Q(permanent_status='Null') | Q(permanent_status='Open')).filter(shift=_shift.id).values('id'))],
                        'permanent_action_closed':[value['id'] for value in (capa.filter(permanent_status='Closed').filter(shift=_shift.id).values('id'))],
                        'permanent_action_progress':[value['id'] for value in (capa.filter(permanent_status='Progress').filter(shift=_shift.id).values('id'))],
                        'permanent_ageing_capa':[value['id'] for value in (permanent_ageing_capa.values('id').filter(shift=_shift.id).values('id'))],
                    }
                    datas.append(capa_dict)
            # # import  pdb;pdb.set_trace
            # alert_config_data = AlertConfig.objects.filter(sourcegate=source_gate).values_list('id', flat=True)
            # capa_datas = CAPA.objects.filter(alert_config__in=alert_config_data)
            # capa_datas = capa_datas.extra(where=["created_time_stamp >= '%s' and created_time_stamp <= '%s'"%(date_from,date_to)])
            capa_datas =capa 
            if query:
                capa_datas = capa_datas.filter(query)
            ageing_capa_percentage_open = float("{0:.2f}".format((capa_datas.filter(Q(status='Null') | Q(status='Open')).filter(created_time_stamp__lt=date_).count()/float(len(capa_datas)))*100))if len(set(capa_datas)) > 0 else 0
            ageing_capa_percentage_closed = float("{0:.2f}".format((capa_datas.filter(Q(status='Closed')).filter(created_time_stamp__lt=date_).count()/float(len(capa_datas)))*100))if len(set(capa_datas)) > 0 else 0
            permanent_ageing_capa_percentage = float("{0:.2f}".format((capa_datas.filter(Q(permanent_status='Null') | Q(permanent_status='Open')).filter(created_time_stamp__lt = _permanent_filter_date).count()/float(len(capa_datas)))*100))if len(set(capa_datas)) > 0 else 0
            permanent_ageing_capa_percentage = float("{0:.2f}".format((capa_datas.filter(Q(permanent_status='Closed')).filter(created_time_stamp__lt = _permanent_filter_date).count()/float(len(capa_datas)))*100))if len(set(capa_datas)) > 0 else 0
            self.ageing_capa_permanent_percentage_close.append(permanent_ageing_capa_percentage)
            self.ageing_capa_permanent_percentage.append(permanent_ageing_capa_percentage)
            self.ageing_capa_percentage_close.append(ageing_capa_percentage_closed)
            self.ageing_capa_percentage.append(ageing_capa_percentage_open)
            self.agency.append(source_gate.description)
            self.capa_tot.append(capa_datas.count())
            # # import  pdb;pdb.set_trace
            self.containment_action_open.append(capa_datas.filter(Q(status='Null') | Q(status='Open')).count())
            self.containment_action_closed.append((capa_datas.filter(status='Closed')).count())
            self.permanent_action_open.append(capa_datas.filter(Q(permanent_status='Null') | Q(permanent_status='Open')).count())
            self.permanent_action_closed.append(capa_datas.filter(permanent_status='Closed').count())
        if request.GET.get('plant') != '':
            _plant_obj = ([value['plant_name'] for value in (plants.values('plant_name'))])
        else:
            _plant_obj = ['All']
        if request.GET.get('shift') != '':
            _shift_obj = ([value['description'] for value in (shifts.values('description'))])
        else:
            _shift_obj = ['All']
        chart_data = {
        'info': 'CAPA  Status for Containment Action',
        'subinfo': "Plants:"+(','.join(_plant_obj)) + '  '+ "Shifts:" + (','.join(_shift_obj)) + ' '+ "From Date:" + request.GET.get('from_date')  +' '+ "To Date:" + request.GET.get('to_date'),
        'agency_list': self.agency,
        'capa_count':self.capa_tot,
        'containment_action_open': self.containment_action_open,
        'containment_action_closed': self.containment_action_closed,
        'permanent_action_open':self.permanent_action_open,
        'permanent_action_closed':self.permanent_action_closed,
        'ageing_capa_percentage_open':self.ageing_capa_percentage,
        'ageing_capa_percentage_closed':self.ageing_capa_percentage_close,
        'ageing_capa_permanent_percentage_close':self.ageing_capa_permanent_percentage_close,
        'ageing_capa_permanent_percentage':self.ageing_capa_permanent_percentage
        }
        # # import  pdb;pdb.set_trace
        #print chart_data
        filter_data = "Plants:"+','.join(_plant_obj) + '  '+ "Shifts:" + ','.join(_shift_obj) + ' '+ "From Date:" + request.GET.get('from_date')  +' '+ "To Date:" + request.GET.get('to_date')
        filter_data = filter_data.encode("utf-8")
        capa_count_details = "Plants:"+','.join(_plant_obj) + '  '+ "Shifts:" + ','.join(_shift_obj) + ' '+ "From Date:" + request.GET.get('from_date')  +' '+ "To Date:" + request.GET.get('to_date')  + '  '+ "CAPA Count:" + str(capa_total_count) + '  '+ "CAPA Open Count:" + str(capa_open_count)+ ' ' + "CAPA Closed Count:" + str(capa_closed_count)
        response = self.render_to_template(
                    datas, request, filter_data, capa_count_details,  capa_total_count, capa_open_count, capa_closed_count, capa_progress_count
                )
        return JsonResponse({'data':response, 'chart_data':chart_data}, safe=False)
    
    def render_to_template(self, datas, request, filter_data=None,                           capa_count_details=None, capa_total_count=None, capa_open_count=None,          capa_closed_count=None, capa_progress_count=None):
                template = TemplateResponse(request, 'reports/capa_dashboard_table.html', {
                'datas': datas, "filter_data":filter_data, 'capa_count_details':capa_count_details, 
                'capa_total_count':capa_total_count,
                'capa_open_count':capa_open_count,
                'capa_closed_count':capa_closed_count,
                'capa_progress_count':capa_progress_count
                })
                template.render()
                return template.content

    def get_query(self, request, user):
        query=Q()
        plant = request.GET.get('plant')
        if plant != '':
            query &=Q(plant=plant)
        else:
            if user['plant'] != '':
                query &=Q(plant=user['plant'])       
        if request.GET.get('shift') != '':
            query &=Q(shift=request.GET.get('shift'))
        return query


class ApprovedTractotView(LoginRequiredMixin, TemplateView, View):
    
    #common = Common()
    template_name = 'reports/approved_tractor_filter.html'
    # template_name = 'reports/capa_dashboard.html'

    def get_context_data(self, **kwargs):
        context = super(ApprovedTractotView, self).get_context_data(**kwargs)
        user = get_user_dict(self.request)
        dashboard_form = CAPADashboardForm(user=user)
        context = {
            'dashboard_form': dashboard_form
        }
        return context

    def post(self, request, *args, **kwargs):
        shift = get_shift_list(request.POST['plant'])
        return JsonResponse({'shift':list(shift.values('id','description'))}, safe=False)




class ApprovedTractotView(LoginRequiredMixin, TemplateView, View):
    
    #common = Common()
    template_name = 'reports/approved_tractor_filter.html'
    # template_name = 'reports/capa_dashboard.html'

    def get_context_data(self, **kwargs):
        context = super(ApprovedTractotView, self).get_context_data(**kwargs)
        user = get_user_dict(self.request)
        dashboard_form = CAPADashboardForm(user=user)
        context = {
            'dashboard_form': dashboard_form
        }
        return context

    def post(self, request, *args, **kwargs):
        shift = get_shift_list(request.POST['plant'])
        return JsonResponse({'shift':list(shift.values('id','description'))}, safe=False)

     

class ApprovedTractotListView(View):
    common = Common()
    capa = CAPADashboardTableView()
    def post(self, request, *args, **kwargs):
        datas = []
        # # import  pdb;pdb.set_trace
        user=get_user_dict(request)
        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        modelstations = ModelStations.objects.filter(is_approval=True)
        stations = modelstations.values_list('station', flat=True)
        if request.POST['sticker'] == 'Completed':
            vin_obj = VinDetails.objects.extra(where=["approved_date >= '%s' and approved_date <= '%s'"%(date_from,date_to)]).filter(is_approval=True, stations__in=stations)
        elif request.POST['sticker'] == 'Not Completed':
            vin_obj = VinDetails.objects.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)]).filter(is_approval=False, stations__in=stations)
        else:
            vin_obj = VinDetails.objects.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)]).filter(stations__in=stations)
        query = self.get_query(request, user)
        if query:
            vin_obj = vin_obj.filter(query)
        d1_stations = ModelStations.objects.filter(station_group__description='D1').values_list('station', flat=True)
        d2_stations = ModelStations.objects.filter(station_group__description='D2').values_list('station', flat=True)
        d3_stations = ModelStations.objects.filter(station_group__description='D3').values_list('station', flat=True)
        # vin_id = vin_obj.values_list('vin')
        # vin_ = set(vin_id)
        for vin in vin_obj:
            d1_dpu = InspectionDefects.objects.filter(vin__vin=vin.vin, vin__stations__in=d1_stations).count()
            d2_dpu = InspectionDefects.objects.filter(vin__vin=vin.vin, vin__stations__in=d2_stations).count()
            d3_dpu = InspectionDefects.objects.filter(vin__vin=vin.vin, vin__stations__in=d3_stations).count()
            # # import  pdb;pdb.set_trace
            vin_data = VinDetails.objects.filter(vin = vin, stations=vin.stations)
            dpu = {
                'vin':vin_data[0],
                'd1_dpu':d1_dpu,
                'd2_dpu':d2_dpu,
                'd3_dpu':d3_dpu,
                'total_dpu':d1_dpu+d2_dpu+d3_dpu
            }
            datas.append(dpu)

        if request.POST['plant'] != '':
            plant_info = Plants.objects.get(id = request.POST['plant'])
            plant_info = plant_info.plant_name
        else:
            plant_info = 'All'
        if request.POST['shift'] != '':
            shift_info = Shifts.objects.get(id=request.POST['shift'])
            shift_info = shift_info.description
        else:
             shift_info = 'All'
        # if request.POST['sticker'] != '':
        #     sticker_info = Sticker
        filter_info = "From Date:" + request.POST.get('from_date') +'  ' +  "To                 Date:" + request.POST.get('to_date') +'  '  + "Plant:" +                           plant_info +'  ' + "Shift:" + shift_info
        response = self.render_to_template(
                    datas, request, filter_info
                )
        return JsonResponse(response, safe=False)

    def render_to_template(self, data, request, filter_info=None):
            template = TemplateResponse(request, 'reports/approved_tractor_list.html', {
            'datas': data,
            'tot_data':len(data),
            'filter_info':filter_info,
            'Product_name': Product_name,
            })
            template.render()
            return template.content
    
    def get_query(self, request, user):
        query=Q()
        plant = request.POST['plant']
        if plant != '':
            query &=Q(plant=plant)
        else:
            if user['plant'] != '':
                query &=Q(plant=user['plant'])       
        if request.POST['shift'] != '':
            query &=Q(shift=request.POST['shift'])
        return query



class ModelStationListView(View):
     #common = Common()
     def get(self, request):
        ## import  pdb;pdb.set_trace
        user=get_user_dict(request)
        if user['plant'] != '':
            model_station = ModelStations.objects.filter(station__cells__plants_id=user['plant'])
        else:
            model_station = ModelStations.objects.all()
        context = {'model_stations': model_station}
        return render(request, 'reports/model_station.html', context)

class CheckpointListView(View):
    def get(self, request):
        ## import  pdb;pdb.set_trace
        if  request.GET['id'] != '':
            model_station = ModelStations.objects.get(id=request.GET['id'])
            checkpoints = Checkpoints.objects.filter(modelstations=model_station)
        else:
            model_station = None
            checkpoints = None
        inspectiontypes = InspectionTypes.objects.all()
        parts = Parts.objects.all()
        defects = Defects.objects.all()
        models = Models.objects.all()
        user=get_user_dict(request)
        if user['plant'] != '':
            stations = Stations.objects.filter(cells__plants_id=user['plant'])
        else:
            stations = Stations.objects.all()
        station_groups = StationGroups.objects.all()
        opt_model_station =ModelStations.objects.all()
        response = self.render_to_template(
                    request, model_station,  checkpoints, inspectiontypes, parts, defects, models, stations, station_groups,opt_model_station
                )
        return JsonResponse(response, safe=False)

    def render_to_template(self, request, model_station,  checkpoints, inspectiontypes,parts, defects, models, stations, station_groups,    opt_model_station, filter_info=None):
            template = TemplateResponse(request, 'reports/model_station_clone.html', {
            'model_station': model_station,
            'checkpoints':checkpoints,
            'inspectiontypes':inspectiontypes,
            'parts': parts,
            'defects': defects,
            'models':models,
            'stations':stations,
            'station_groups':station_groups,
            'opt_model_station':opt_model_station
            })
            template.render()
            return template.content
    
class ModelStationsCloneView(View, LoginRequiredMixin):

    def get(self, request):
        try:
            ## import  pdb;pdb.set_trace
            is_rolldown = request.GET.has_key('is_rolldown')
            d2_rolldown = request.GET.has_key('d2_rolldown')
            is_final = request.GET.has_key('is_final')
            is_approval = request.GET.has_key('is_approval')
            model_station = ModelStations.objects.create(station_order=request.GET['station_order'],
            model_id=request.GET['model_station_model'],
            station_id=request.GET['model_station_station'],
            station_group_id=request.GET['model_station_station_group'],
            is_rolldown = is_rolldown,
            d2_rolldown=d2_rolldown,
            is_final=is_final,
            is_approval=is_approval
            )

            for index, value in enumerate(request.GET.getlist('checkpoint_description')):
                
                checkpoint = Checkpoints.objects.create(modelstations_id=model_station.id, description=value, inspectiontypes_id=request.GET.getlist('inspectiontypes')[index], parts_id=request.GET.getlist('parts')[index], defects_id=request.GET.getlist('defects')[index],
                checkpoint_order=request.GET.getlist('checkpoint_order')[index], is_active=request.GET.getlist('is_active')[index])
            return JsonResponse({"data":"Created Successfully"})
        except IntegrityError as e:
            return JsonResponse({"data": "Duplicate Entry"})

    def post(self, request, *args, **kwargs):
        try:
            #print request.POST
            import re
            temp = re.findall(r'\d+', request.POST['model_station_id'])
            model_station_id = (map(int, temp))[0]
            is_rolldown = request.POST.has_key('is_rolldown')
            d2_rolldown = request.POST.has_key('d2_rolldown')
            is_final = request.POST.has_key('is_final')
            is_approval = request.POST.has_key('is_approval')
            model_station = ModelStations.objects.filter(id=model_station_id).update(
                station_order=request.POST['station_order'],
                model_id=request.POST['model_station_model'],
                station_id=request.POST['model_station_station'],
                station_group_id=request.POST['model_station_station_group'],
                is_rolldown = is_rolldown,
                d2_rolldown=d2_rolldown,
                is_final=is_final,
                is_approval=is_approval
                )
            for index, value in enumerate(request.POST.getlist('checkpoint_id')):
                #print value
               # # import  pdb;pdb.set_trace
                # request.POST.getlist('checkpoint_description')
                if request.POST.getlist('is_active')[index] == 'False':
                    is_active = False
                else:
                    is_active = True
                temp = re.findall(r'\d+', value)
                _id = (map(int, temp))[0]
                checkpoint = Checkpoints.objects.filter(id=_id, modelstations_id=model_station_id).update( description=request.POST.getlist('checkpoint_description')[index], inspectiontypes_id=request.POST.getlist('inspectiontypes')[index], parts_id=request.POST.getlist('parts')[index], defects_id=request.POST.getlist('defects')[index],
                checkpoint_order=request.POST.getlist('checkpoint_order')[index], is_active=is_active)
            ## import  pdb;pdb.set_trace
            if len(request.POST.getlist('checkpoint_id')) != len(request.POST.getlist('checkpoint_description')):
                
                checkpoint_description = request.POST.getlist('checkpoint_description')[len(request.POST.getlist('checkpoint_id')):]
                inspectiontypes = request.POST.getlist('inspectiontypes')[len(request.POST.getlist('checkpoint_id')):]
                parts_id = request.POST.getlist('parts')[len(request.POST.getlist('checkpoint_id')):]
                defects_id  = request.POST.getlist('defects')[len(request.POST.getlist('checkpoint_id')):]
                checkpoint_order = request.POST.getlist('checkpoint_order')[len(request.POST.getlist('checkpoint_id')):]
                is_active = request.POST.getlist('is_active')[len(request.POST.getlist('checkpoint_id')):]
                for index, value in enumerate(checkpoint_description): 
                    checkpoint = Checkpoints.objects.create(modelstations_id=model_station_id, description=value, inspectiontypes_id=inspectiontypes[index], parts_id=parts_id[index], defects_id=defects_id[index],
                    checkpoint_order=checkpoint_order[index], is_active=is_active[index])
            return JsonResponse({"data":"Updated Successfully"})

        except IntegrityError as e:
            return JsonResponse({"data": "Duplicate Entry"})



# Vignesh - Station Summary Worked

class StationSummaryView(LoginRequiredMixin, TemplateView):

    def get_context_data(self, **kwargs):
        context = super(StationSummaryView, self).get_context_data(**kwargs)
        user = get_user_dict(self.request)
        plants = Plants.objects.all()
        if user['plant'] != '':
            plants = plants.filter(id=user['plant'])
            cells = Cells.objects.filter(plants__in = plants)
            station = Stations.objects.filter(cells__in = cells)
            station_id_list = station.values_list('id', flat=True)
            model_station = ModelStations.objects.filter(station__in = station_id_list).values_list('model',flat=True)
            model = Models.objects.filter(id__in=model_station)
            shift = Shifts.objects.filter(plants__in = plants)
            inspector = Users.objects.filter(plants__in = plants, roles__description='Inspector')
            basemodel_list = model.values_list('base_models', flat=True)
            basemodel = BaseModels.objects.filter(id__in=basemodel_list)
        else:
            station = Stations.objects.all()
            market = Market.objects.all()
            shift = Shifts.objects.all()
            model = Models.objects.all()
            inspector = Users.objects.filter(roles__description='Inspector')
        station_group = StationGroups.objects.all()
        context = {
        'plants': plants, 'station':station, 'model':model, 
        'shift':shift, 'inspector':inspector

        }
        return context

class StationSummarySearchView(View):
    common = Common()
    def post(self, request, *args, **kwargs):
        
        from_date =self.common.parse_date(
            request.POST.get('from_date'))
        to_date = self.common.parse_date(
            request.POST.get('to_date'))
        if "form[contact]" not in request.POST:
            rft_ppm = "rft"
        else:
            rft_ppm = request.POST['form[contact]']
        date_list = self.common.get_date_lists(from_date, to_date)
        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')

        vin_obj = VinDetails.objects.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        # # import  pdb;pdb.set_trace
        """First Table Logical Part"""
        
        station_objects = []
        query = self.get_query(request)
        vins = vin_obj.filter(query)
        station_obj = VinStatusStationWise.objects.filter(vin__in=vins)
        for station in station_obj:
            station_objects.append({'vin': station})
        station_objects.append({'from_date':date_from, 'to_date':date_to})  
        dates_view = "Station Summary For {0} to {1}".format(request.POST['from_date'], request.POST['to_date'])
        
        # # import  pdb;pdb.set_trace
        
        response = self.render_defect_details_to_template(
                                    station_objects,dates_view, request)
                                
            
        return JsonResponse(response, safe=False)

        

        
        # return JsonResponse(response, safe=False)

    def render_defect_details_to_template(self, data, dates,  request):
        template = TemplateResponse(request, 'reports/station_summary_table.html', {
            'datas': data,
            'dates': dates, 
            'request':request,
            'Product_name':Product_name
        })
        template.render()
        return template.content   

    def get_query(self, request):
        query=Q()
        user = get_user_dict(self.request)
        if user['plant'] != '':
            plant = user['plant']
        else:
            plant = request.POST.get('plant')
        if plant != 'All':
            query &=Q(stations__cells__plants__id=plant)
        if request.POST.get('model') != 'All':
           query &=Q(model__id=request.POST.get('model'))
        if request.POST.get('station') != 'All':
           query &=Q(stations__id=request.POST.get('station'))
        if request.POST.get('shift') != 'All':
           query &=Q(shift__id=request.POST.get('shift'))
        if request.POST.get('inspector') != 'All':
           query &=Q(users__id=request.POST.get('inspector'))
        return query
    
       


class StationDefectsSummaryView(LoginRequiredMixin, TemplateView):

    def get_context_data(self, **kwargs):
        context = super(StationDefectsSummaryView, self).get_context_data(**kwargs)
        user = get_user_dict(self.request)
        plants = Plants.objects.all()
        if user['plant'] != '':
            plants = plants.filter(id=user['plant'])
            cells = Cells.objects.filter(plants__in = plants)
            station = Stations.objects.filter(cells__in = cells)
            station_id_list = station.values_list('id', flat=True)
            model_station = ModelStations.objects.filter(station__in = station_id_list).values_list('model',flat=True)
            model = Models.objects.filter(id__in=model_station)
            shift = Shifts.objects.filter(plants__in = plants)
            inspector = Users.objects.filter(plants__in = plants, roles__description='Inspector')
            basemodel_list = model.values_list('base_models', flat=True)
            basemodel = BaseModels.objects.filter(id__in=basemodel_list)
        else:
            station = Stations.objects.all()
            market = Market.objects.all()
            shift = Shifts.objects.all()
            model = Models.objects.all()
            inspector = Users.objects.filter(roles__description='Inspector')
        station_group = StationGroups.objects.all()
        context = {
        'plants': plants, 'station':station, 'model':model, 
        'shift':shift, 'inspector':inspector

        }
        return context

class StationSummaryDefectsView(View):
    common = Common()
    def post(self, request, *args, **kwargs):
        
        from_date =self.common.parse_date(
            request.POST.get('from_date'))
        to_date = self.common.parse_date(
            request.POST.get('to_date'))
        if "form[contact]" not in request.POST:
            rft_ppm = "1"
        else:
            rft_ppm = request.POST['form[contact]']
        date_list = self.common.get_date_lists(from_date, to_date)
        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        vin_obj = VinDetails.objects.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        query = self.get_query(request)
        vins = vin_obj.filter(query)
        inspection_defect_and_defect_closure = []
        if len(vins) > 0:  
            for vin in vins:
                    inspection_defects_obj = InspectionDefects.objects.filter(vin=vin.id)
                    if inspection_defects_obj:
                        for inspection_defect in inspection_defects_obj:
                            try:
                                defects_closure = DefectClosure.objects.get(
                                    inspection_defects = inspection_defect.id 
                                )
                            except:
                                defects_closure = ""
                            print vin
                            inspection_defect_and_defect_closure.append({
                                "vin":vin,
                                "inspection_defect":inspection_defect,
                                "defect_closure":defects_closure,
                            })
                        
                    else:
                        defects_closure = ""
                        inspection_defect = ""
                        inspection_defect_and_defect_closure.append({
                                #"date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
                                "vin":vin,
                                "inspection_defect":inspection_defect,
                                "defect_closure":defects_closure,
                            })
                        

        else:
                defects_closure = ""
                inspection_defect = ""
                vin =""
                inspection_defect_and_defect_closure.append({
                        #"date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
                        "vin":vin,
                        "inspection_defect":inspection_defect,
                        "defect_closure":defects_closure,
                    })
        response = self.render_to_template(
                    inspection_defect_and_defect_closure, request
                )
        # # import  pdb;pdb.set_trace
        return JsonResponse(response, safe=False)            
    def render_to_template(self, data, request):
            # # import  pdb;pdb.set_trace
            template = TemplateResponse(request, 'reports/station_defects_summary_table.html', {
            'datas': data,
            'Product_name':Product_name
            })
            template.render()
            return template.content

    def get_query(self, request):
        query=Q()
        user = get_user_dict(self.request)
        if user['plant'] != '':
            plant = user['plant']
        else:
            plant = request.POST.get('plant')
        if plant != 'All':
            query &=Q(stations__cells__plants__id=plant)
        if request.POST.get('model') != 'All':
           query &=Q(model__id=request.POST.get('model'))
        if request.POST.get('station') != 'All':
           query &=Q(stations__id=request.POST.get('station'))
        if request.POST.get('shift') != 'All':
           query &=Q(shift__id=request.POST.get('shift'))
        if request.POST.get('inspector') != 'All':
           query &=Q(users__id=request.POST.get('inspector'))
        return query


class DSNreportView(LoginRequiredMixin,View):

    def get(self,request):
        user = get_user_dict(self.request)
        plants = Plants.objects.all()
        if user['plant'] != '':
            plants = plants.filter(id=user['plant'])
            cells = Cells.objects.filter(plants__in = plants)
            station = Stations.objects.filter(cells__in = cells)
            content_type = DSNWorkContent.objects.all()
            station_id_list = station.values_list('id', flat=True)
            model_station = ModelStations.objects.filter(station__in = station_id_list).values_list('model',flat=True)
            model = Models.objects.filter(id__in=model_station)
            shift = Shifts.objects.filter(plants__in = plants)
            inspector = Users.objects.filter(plants__in = plants, roles__description='Inspector')
            basemodel_list = model.values_list('base_models', flat=True)
            basemodel = BaseModels.objects.filter(id__in=basemodel_list)
        else:
            content_type = DSNWorkContent.objects.all()
            station = Stations.objects.filter(DSN_consider = True)
            market = Market.objects.all()
            shift = Shifts.objects.all()
            model = Models.objects.all()
            inspector = Users.objects.filter(roles__description='Inspector')
        station_group = StationGroups.objects.all()
        return render(
            request,
                'reports/dsn_summary.html',
            {
                "content_type":content_type,'plants': plants, 'station':station, 'model':model, 
                'shift':shift, 'inspector':inspector
            }
            )



class DSNreportFilterView(View):
    common = Common()

    def post(self, request, *args, **kwargs):
        # import pdb;pdb.set_trace()
        cursor = connection.cursor()
        plant = request.POST.get('plant')
        from_date = self.common.parse_date(request.POST.get("from_date"))
        to_date = self.common.parse_date(request.POST.get("to_date"))
        date_list = self.common.get_date_lists(from_date, to_date)
        date_from = (datetime.strptime(request.POST.get("from_date"), "%d-%m-%Y %H:%M:%S")- td(hours=5, minutes=30)).strftime("%Y-%m-%d %H:%M:%S")
        date_to = (datetime.strptime(request.POST.get("to_date"), "%d-%m-%Y %H:%M:%S")- td(hours=5, minutes=30)).strftime("%Y-%m-%d %H:%M:%S")
        vin_obj = VinDetails.objects.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        query = self.get_query(request)
        vins = vin_obj.filter(query)
        DSN_time_calc_list = []
        station_time_calc_list = []
        stage_D1_closed_time_list = []
        stage_D2_created_time_list = []
        dsn_consider = Stations.objects.filter(DSN_consider=True).values_list("id", flat=True)
        vin_details = vins.filter(stations__in=dsn_consider,DSN_number__isnull = False)
        
        # import pdb;pdb.set_trace()
        rolldown_status = "select distinct(station_id) station_id from modelstations join stationgroups on stationgroups.id = modelstations.station_group_id and stationgroups.description ='D1' join stations on stations.id = modelstations.station_id join cells on cells.id = stations.cells_id and plants_id = {} where modelstations.is_rolldown = True;".format(plant)
        cursor.execute(rolldown_status)
        rolldown_station_D1_group = cursor.fetchall()
        station_group = "select distinct(station_id) station_id from modelstations join stationgroups on stationgroups.id = modelstations.station_group_id and stationgroups.description ='D2' join stations on stations.id = modelstations.station_id join cells on cells.id = stations.cells_id and plants_id = {};".format(plant)
        cursor.execute(station_group)
        station_D2_group = cursor.fetchall()

        for data in vin_details:
            DSN_created_time = data.DSN_start_time
            DSN_closed_time = data.approved_date
            if DSN_closed_time == None:
                DSN_time_calc_list.append('-')
            else:
                time = (DSN_closed_time) - (DSN_created_time)
                total_seconds = time.total_seconds()
                DSN_time_calculation = str(timedelta(seconds=total_seconds))
                DSN_time_calc_list.append(DSN_time_calculation)
            
            
            stage_D1_closed_time = vin_obj.filter(stations__in=rolldown_station_D1_group,vin=data).values_list('closed_time',flat =True)
            
            if stage_D1_closed_time :
                stage_D1_closed_time_list.append(stage_D1_closed_time[0])
            else:
                stage_D1_closed_time_list.append("-")
            
            
            stage_D2_created_time = vin_obj.filter(stations__in=station_D2_group,vin=data).values_list('created_time',flat=True)

            if stage_D2_created_time :
                stage_D2_created_time_list.append(stage_D2_created_time[0])
            else:
                stage_D2_created_time_list.append("-")

        rolldown_time_list = []

        for D1_time, D2_time in zip(stage_D1_closed_time_list, stage_D2_created_time_list):
            if (D1_time == '-' and D2_time == '-')or (D1_time == '-')or (D2_time == '-'):
                station_time_calc_list.append('-')
                rolldown_time_list.append('-')
            else :
                rolldown_time_list.append(D1_time)
                station = abs(D2_time - D1_time)
                total_seconds = station.total_seconds()
                time_calculation = str(timedelta(seconds=total_seconds))
                station_time_calc_list.append(time_calculation)
        dates_view = "DSN Summary For {0} to {1}".format(
            request.POST["from_date"], request.POST["to_date"]
        )
        print(len(vin_details),len(DSN_time_calc_list),len(station_time_calc_list),len(rolldown_time_list))
        my_list = zip(
            vin_details, DSN_time_calc_list, station_time_calc_list, rolldown_time_list
        )
        context = {
            "dates_view": dates_view,
            "my_list": my_list,
        }
        cursor.close()
        return render(request, "reports/dsn_summary_table.html", context)

    def get_query(self, request):
        query=Q()
        user = get_user_dict(self.request)
        # import pdb;pdb.set_trace()
        if user['plant'] != '':
            plant = user['plant']
        else:
            plant = request.POST.get('plant')
        if plant != 'All':
            query &=Q(stations__cells__plants__id=plant)
        if request.POST.get('model') != 'All':
           query &=Q(model__id=request.POST.get('model'))
        if request.POST.get('station') != 'All':
           query &=Q(stations__id=request.POST.get('station'))
        if request.POST.get('shift') != 'All':
           query &=Q(shift__id=request.POST.get('shift'))
        if request.POST.get('DSNtype') != 'All':
           query &=Q(model__DSN_type_id=request.POST.get('DSNtype'))
        return query


class DSNhourlyreportView(LoginRequiredMixin,View):

    def get(self,request):
        user = get_user_dict(self.request)
        plants = Plants.objects.all()
        if user['plant'] != '':
            content_type = DSNWorkContent.objects.all()
            plants = plants.filter(id=user['plant'])
            cells = Cells.objects.filter(plants__in = plants)
            station = Stations.objects.filter(cells__in = cells)
            station_id_list = station.values_list('id', flat=True)
            model_station = ModelStations.objects.filter(station__in = station_id_list).values_list('model',flat=True)
            model = Models.objects.filter(id__in=model_station)
            shift = Shifts.objects.filter(plants__in = plants)
            inspector = Users.objects.filter(plants__in = plants, roles__description='Inspector')
            basemodel_list = model.values_list('base_models', flat=True)
            basemodel = BaseModels.objects.filter(id__in=basemodel_list)
        else:
            content_type = DSNWorkContent.objects.all()
            station = Stations.objects.all()
            market = Market.objects.all()
            shift = Shifts.objects.all()
            model = Models.objects.all()
            inspector = Users.objects.filter(roles__description='Inspector')
            station_group = StationGroups.objects.all()
        return render(
            request,
                'reports/dsn_hourlyreport.html',
            {
                "content_type":content_type,'plants': plants, 'station':station, 'model':model, 
                'shift':shift, 'inspector':inspector
            }
            )

class DSNhourlyreportFilterView(View):
    common = Common()
    def post(self, request, *args, **kwargs):
        # import pdb;pdb.set_trace()
        print(datetime.now())
        from_date =self.common.parse_date(
            request.POST.get('from_date'))
        to_date = self.common.parse_date(
            request.POST.get('to_date'))
        user = get_user_dict(self.request)
        if user['plant'] != '':
            plant = user['plant']
        else:
            plant = request.POST.get('plant')
        
        date_list = self.common.get_date_lists(from_date, to_date)
        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        time_zone = [] 
        dsn_consider = Stations.objects.filter(DSN_consider=True).values_list("id", flat=True)
        vin_details = VinDetails.objects.filter(stations__in=dsn_consider,DSN_number__isnull = False)
        vin_obj = vin_details.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        vin_station_filter = VinDetails.objects.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        # cursor = connection.cursor()
        # vin_station_filter = "SELECT distinct(vin) FROM sqgs_dsn_test.vindetails where vindetails.created_time >='{}' and vindetails.created_time <= '{}' and plant_id = {}".format(from_date,to_date,plant)
        # cursor.execute(vin_station_filter)
        # vins_stationwise = [data for data in cursor.fetchall()]
        query = self.get_query(request)
        vins = vin_obj.filter(query)
        vins_stationwise = vin_station_filter.filter(query)
        dates_view = "DSN Hourly report For {0} to {1}".format(request.POST['from_date'], request.POST['to_date'])
        shift1_start_time = [str(data) for data in TimeReport.objects.filter(shift__description = 'MDU 1st Shift').values_list('start_time',flat=True)]
        shift1_end_time = [str(data) for data in TimeReport.objects.filter(shift__description = 'MDU 1st Shift').values_list('end_time',flat=True)]
        shift2_start_time = [str(data) for data in TimeReport.objects.filter(shift__description = 'MDU 2nd Shift').values_list('start_time',flat=True)]
        shift2_end_time =[str(data) for data in TimeReport.objects.filter(shift__description = 'MDU 2nd Shift').values_list('end_time',flat=True)]
        shift3_start_time = [str(data) for data in TimeReport.objects.filter(shift__description = 'MDU 3rd Shift').values_list('start_time',flat=True)]
        shift3_end_time = [str(data) for data in TimeReport.objects.filter(shift__description = 'MDU 3rd Shift').values_list('end_time',flat=True)]
        hour = TimeReport.objects.filter(shift__description = 'MDU 1st Shift').values_list('description' ,flat=True)
        hour_2 = TimeReport.objects.filter(shift__description = 'MDU 2nd Shift').values_list('description' ,flat=True)
        hour_3 = TimeReport.objects.filter(shift__description = 'MDU 3rd Shift').values_list('description' ,flat=True)
        # time = TimeReport.objects.filter(shift=2).values_list('start_time' ,flat=True)
        # import pdb;pdb.set_trace()
        # for data in range(len(time)):
        #     shift1_start_time.append(str(time[data]))
        
        # time_2 = TimeReport.objects.filter(shift=2).values_list('end_time' ,flat=True)
        # for times in range(len(time_2)):
        #     shift1_end_time.append(str(time_2[times]))

        # hour_2 = TimeReport.objects.filter(shift=3).values_list('description' ,flat=True)
        # hour_3 = TimeReport.objects.filter(shift__description = 'MDU 3rd Shift').values_list('description' ,flat=True)
        # time_3 = TimeReport.objects.filter(shift_id = 3).values_list('start_time' ,flat=True)
        # for data in range(len(time_3)):
        #     shift2_start_time.append(str(time_3[data]))
        
        # time_4 = TimeReport.objects.filter(shift_id = 3).values_list('end_time' ,flat=True)
        # for times in range(len(time_4)):
        #     shift2_end_time.append(str(time_4[times]))
        print("as",datetime.now())
        # shift A
        dsn_created = 0 
        running_test=0
        uv_test=0
        oil_test=0
        final_test=0
        approved_tractor = 0
        dsn_created_1 = 0
        running_test_1 = 0
        uv_test_1 = 0
        oil_test_1 = 0
        final_test_1 = 0
        approved_tractor_1 = 0
        dsn_created_2 = 0
        running_test_2 = 0
        uv_test_2 = 0
        oil_test_2 = 0
        final_test_2 = 0
        approved_tractor_2 = 0
        dsn_created_3 = 0
        running_test_3 = 0
        uv_test_3 = 0
        oil_test_3 = 0
        final_test_3 = 0
        approved_tractor_3 = 0
        dsn_created_4 = 0
        running_test_4 = 0
        uv_test_4 = 0
        oil_test_4 = 0
        final_test_4 = 0
        approved_tractor_4 = 0
        dsn_created_5 = 0
        running_test_5 = 0
        uv_test_5 = 0
        oil_test_5 = 0
        final_test_5 = 0
        approved_tractor_5 = 0
        dsn_created_6 = 0
        running_test_6 = 0
        uv_test_6 = 0
        oil_test_6 = 0
        final_test_6 = 0
        approved_tractor_6 = 0
        dsn_created_7 = 0
        running_test_7 = 0
        uv_test_7 = 0
        oil_test_7 = 0
        final_test_7 = 0
        approved_tractor_7 = 0
        
        # import pdb;pdb.set_trace()
        for i in vins:
            # import pdb;pdb.set_trace()
            utc_to_local_time = i.DSN_start_time.replace(tzinfo=None) + timedelta(hours=5,minutes=30)
            hourly_time=utc_to_local_time.strftime("%H:%M:%S")
            if hourly_time>='00:00:01' and hourly_time<='07:59:59':
                vinn=i.vin.encode("utf-8")
                dsn_created += 1
                
            elif hourly_time>='08:00:00' and hourly_time<='08:59:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_1 += 1
                
            elif hourly_time>='09:00:00' and hourly_time<='09:59:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_2 += 1
                
            elif hourly_time>='10:00:00' and hourly_time<='11:14:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_3 += 1
                
            elif hourly_time>='11:15:00' and hourly_time<='12:29:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_4 += 1
                
            elif hourly_time>='12:30:00' and hourly_time<='13:29:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_5 += 1
                
            elif hourly_time>='13:30:00' and hourly_time<='14:29:59':
                # import pdb;pdb.set_trace()
                vinn=i.vin.encode("utf-8")
                dsn_created_6 += 1
                
            elif hourly_time>='14:30:00' and hourly_time<='15:30:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_7 += 1

        # import pdb;pdb.set_trace()
        for i in vins_stationwise:   
            utc_to_local_time = i.created_time.replace(tzinfo=None) + timedelta(hours=5,minutes=30)
            hourly_time=utc_to_local_time.strftime("%H:%M:%S")
            if hourly_time>='00:00:01' and hourly_time<='07:59:59':
                if i.stations_id == 33: 
                    # import pdb;pdb.set_trace()
                    running_test += 1
                
                if i.stations_id == 43: 
                    oil_test += 1
               
                if i.stations_id == 29: 
                    uv_test += 1
               
                if i.stations_id == 30: 
                    final_test += 1
                    if i.is_approval == True:
                        approved_tractor += 1
                   
            elif hourly_time>='08:00:00' and hourly_time<='08:59:59':
                if i.stations_id == 33: 
                    running_test_1 += 1
                
                if i.stations_id == 43 :
                    oil_test_1 += 1
                
                if i.stations_id == 29 :
                    uv_test_1 += 1
               
                if i.stations_id == 30 :
                    final_test_1 += 1
                    if i.is_approval == True:
                        approved_tractor_1 += 1
            elif hourly_time>='09:00:00' and hourly_time<='09:59:59':
                if i.stations_id == 33: 
                    running_test_2 += 1
               
                if i.stations_id == 43 :
                    oil_test_2 += 1
                
                if i.stations_id == 29 :
                    uv_test_2 += 1
                
                if i.stations_id == 30 :
                    final_test_2 += 1
                    if i.is_approval == True:
                        approved_tractor_2 += 1
            elif hourly_time>='10:00:00' and hourly_time<='11:14:59':
                if i.stations_id == 33: 
                    running_test_3 += 1
                
                if i.stations_id == 43 :
                    oil_test_3 += 1
                
                if i.stations_id == 29 :
                    uv_test_3 += 1
                
                if i.stations_id == 30 :
                    final_test_3 += 1
                    if i.is_approval == True:
                        approved_tractor_3 += 1
            elif hourly_time>='11:15:00' and hourly_time<='12:29:59':
                if i.stations_id == 33: 
                    running_test_4 += 1
                
                if i.stations_id == 43: 
                    oil_test_4 += 1
                
                if i.stations_id == 29 :
                    uv_test_4 += 1
                
                if i.stations_id == 30 :
                    final_test_4 += 1
                    if i.is_approval == True:
                        approved_tractor_4 += 1

            elif hourly_time>='12:30:00' and hourly_time<='13:29:59':
                if i.stations_id == 33: 
                    running_test_5 += 1
                
                if i.stations_id == 43:
                    oil_test_5 += 1
                
                if i.stations_id == 29 :
                    uv_test_5 += 1
                
                if i.stations_id == 30 :
                    final_test_5 += 1
                    if i.is_approval == True:
                        approved_tractor_5 += 1

            elif hourly_time>='13:30:00' and hourly_time<='14:29:59':
                if i.stations_id == 33: 
                    running_test_6 += 1
                
                if i.stations_id == 43:
                    oil_test_6 += 1
                
                if i.stations_id == 29 :
                    uv_test_6 += 1
                
                if i.stations_id == 30 :
                    final_test_6 += 1
                    if i.is_approval == True:
                        approved_tractor_6 += 1

            elif hourly_time>='14:30:00' and hourly_time<='15:30:59':
                if i.stations_id == 33:
                    running_test_7 += 1
                
                if i.stations_id == 43:
                    oil_test_7 += 1
                
                if i.stations_id == 29:
                    uv_test_7 += 1
                
                if i.stations_id == 30:
                    final_test_7 += 1
                    if i.is_approval == True:
                        approved_tractor_7 += 1
        
        shift1_running_test = [running_test,running_test_1,running_test_2,running_test_3,running_test_4,running_test_5,running_test_6,running_test_7]
        shift1_uv_test = [uv_test,uv_test_1,uv_test_2,uv_test_3,uv_test_4,uv_test_5,uv_test_6,uv_test_7]
        shift1_oil_test = [oil_test,oil_test_1,oil_test_2,oil_test_3,oil_test_4,oil_test_5,oil_test_6,oil_test_7]
        shift1_final_test = [final_test,final_test_1,final_test_2,final_test_3,final_test_4,final_test_5,final_test_6,final_test_7]
        shift_1_approved_tractor = [approved_tractor,approved_tractor_1,approved_tractor_2,approved_tractor_3,approved_tractor_4,approved_tractor_5,approved_tractor_6,approved_tractor_7]
        shift_1_DSN_created= [dsn_created,dsn_created_1,dsn_created_2,dsn_created_3,dsn_created_4,dsn_created_5,dsn_created_6,dsn_created_7]

        # Shift B

        dsn_created_a = 0
        running_test_a = 0
        uv_test_a = 0
        oil_test_a = 0
        final_test_a=0
        approved_tractor_a = 0
        dsn_created_b = 0
        running_test_b = 0
        uv_test_b = 0
        oil_test_b = 0
        final_test_b = 0
        approved_tractor_b = 0
        dsn_created_c = 0
        running_test_c = 0
        uv_test_c = 0
        oil_test_c = 0
        final_test_c = 0
        approved_tractor_c = 0
        dsn_created_d = 0
        running_test_d = 0
        uv_test_d = 0
        oil_test_d = 0
        final_test_d = 0
        approved_tractor_d = 0
        dsn_created_e = 0
        running_test_e = 0
        uv_test_e = 0
        oil_test_e = 0
        final_test_e = 0
        approved_tractor_e = 0
        dsn_created_f = 0
        running_test_f = 0
        uv_test_f = 0
        oil_test_f = 0
        final_test_f = 0
        approved_tractor_f = 0
        dsn_created_g = 0
        running_test_g = 0
        uv_test_g = 0
        oil_test_g = 0
        final_test_g = 0
        approved_tractor_g = 0
        dsn_created_h = 0
        running_test_h = 0
        uv_test_h = 0
        oil_test_h = 0
        final_test_h = 0
        approved_tractor_h = 0

        for i in vins:   
            # print("f"datetime.now())
            utc_to_local_time = i.DSN_start_time.replace(tzinfo=None)+ timedelta(hours=5,minutes=30)
            hourly_time=utc_to_local_time.strftime("%H:%M:%S")
            if hourly_time>='15:31:00' and hourly_time<='16:29:59':
                vinn=i.vin.encode("utf-8")
                # print('vinss',vinn)
                dsn_created_a += 1
                
            elif hourly_time>='16:30:00' and hourly_time<='17:29:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_b += 1
                
            elif hourly_time>='17:30:00' and hourly_time<='18:29:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_c += 1
                
            elif hourly_time>='18:30:00' and hourly_time<='19:44:59':
                
                vinn=i.vin.encode("utf-8")
                dsn_created_d += 1
               
            elif hourly_time>='19:45:00' and hourly_time<='20:59:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_e += 1
                
            elif hourly_time>='21:00:00' and hourly_time<='21:59:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_f += 1
                
                
            elif hourly_time>='22:00:00' and hourly_time<='22:59:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_g += 1
                
            elif hourly_time>='23:00:00' and hourly_time<='23:59:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_h += 1
        # import pdb;pdb.set_trace()
        
        for i in vins_stationwise:   
            utc_to_local_time = i.created_time.replace(tzinfo=None)+ timedelta(hours=5,minutes=30)
            hourly_time=utc_to_local_time.strftime("%H:%M:%S")
            # print(hourly_time)
            if hourly_time>='15:31:00' and hourly_time<='16:29:59':
                if i.stations_id == 33:
                    running_test_a += 1
                
                if i.stations_id == 43:
                    oil_test_a += 1
                if i.stations_id == 29:
                    uv_test_a += 1
                
                if i.stations_id == 30:
                    final_test_a += 1
                    if i.is_approval == True:
                        approved_tractor_a += 1

            elif hourly_time>='16:30:00' and hourly_time<='17:29:59':
                if i.stations_id == 33:
                    running_test_b += 1
                
                if i.stations_id == 43:
                    oil_test_b += 1
                
                if i.stations_id == 29:
                    uv_test_b += 1
                
                if i.stations_id == 30:
                    final_test_b += 1
                    if i.is_approval == True:
                        approved_tractor_b += 1

            elif hourly_time>='17:30:00' and hourly_time<='18:29:59':
                if i.stations_id == 33:
                    running_test_c += 1
                
                if i.stations_id == 43:
                    oil_test_c += 1
                
                if i.stations_id == 29:
                    uv_test_c += 1
                
                if i.stations_id == 30:
                    final_test_c += 1
                    if i.is_approval == True:
                        approved_tractor_c += 1

            elif hourly_time>='18:30:00' and hourly_time<='19:44:59':
                if i.stations_id == 33: 
                    running_test_d += 1
                
                if i.stations_id == 43: 
                    oil_test_d += 1
                
                if i.stations_id == 29: 
                    uv_test_d += 1
                
                if i.stations_id == 30: 
                    final_test_d += 1
                    if i.is_approval == True:
                        approved_tractor_d += 1
            elif hourly_time>='19:45:00' and hourly_time<='20:59:59':
                if  i.stations_id == 33: 
                    running_test_e += 1
                
                if i.stations_id == 43: 
                    oil_test_e += 1
                
                if i.stations_id == 29 :
                    uv_test_e += 1
                
                if i.stations_id == 30: 
                    final_test_e += 1
                    if i.is_approval == True:
                        approved_tractor_e += 1

            elif hourly_time>='21:00:00' and hourly_time<='21:59:59':
                if  i.stations_id == 33: 
                    running_test_f += 1
                
                if i.stations_id == 43: 
                    oil_test_f += 1
                
                if i.stations_id == 29 :
                    uv_test_f += 1
                
                if i.stations_id == 30: 
                    final_test_f += 1
                    if i.is_approval == True:
                        approved_tractor_f += 1
            elif hourly_time>='22:00:00' and hourly_time<='22:59:59':
                if i.stations_id == 33: 
                    running_test_g += 1
                
                if i.stations_id == 43: 
                    oil_test_g += 1
                
                if i.stations_id == 29 :
                    uv_test_g += 1
                
                if i.stations_id == 30: 
                    final_test_g += 1
                    if i.is_approval == True:
                        approved_tractor_g += 1

            elif hourly_time>='23:00:00' and hourly_time<='23:59:59':
                if i.stations_id == 33: 
                    running_test_h += 1
                
                if i.stations_id == 43: 
                    oil_test_h += 1
                
                if i.stations_id == 29 :
                    uv_test_h += 1
                
                if i.stations_id == 30: 
                    final_test_h += 1
                    if i.is_approval == True:
                        approved_tractor_h += 1
               
        shift_2_DSN_created= [dsn_created_a,dsn_created_b,dsn_created_c,dsn_created_d,dsn_created_e,dsn_created_f,dsn_created_g,dsn_created_h]
        shift2_running_test = [running_test_a,running_test_b,running_test_c,running_test_d,running_test_e,running_test_f,running_test_g,running_test_h]
        shift2_uv_test = [uv_test_a,uv_test_b,uv_test_c,uv_test_d,uv_test_e,uv_test_f,uv_test_g,uv_test_h]
        shift2_oil_test = [oil_test_a,oil_test_b,oil_test_c,oil_test_d,oil_test_e,oil_test_f,oil_test_g,oil_test_h]
        shift2_final_test = [final_test_a,final_test_b,final_test_c,final_test_d,final_test_e,final_test_f,final_test_g,final_test_h]
        shift_2_approved_tractor = [approved_tractor_a,approved_tractor_b,approved_tractor_c,approved_tractor_d,approved_tractor_e,approved_tractor_f,approved_tractor_g,approved_tractor_h]

        #Shift C

        dsn_created_m= 0
        running_test_m = 0
        uv_test_m = 0
        oil_test_m = 0
        final_test_m =0
        approved_tractor_m = 0
        dsn_created_n = 0
        running_test_n = 0
        uv_test_n = 0
        oil_test_n = 0
        final_test_n = 0
        approved_tractor_n = 0
        dsn_created_o = 0
        running_test_o = 0
        uv_test_o = 0
        oil_test_o = 0
        final_test_o = 0
        approved_tractor_o = 0
        dsn_created_p = 0
        running_test_p = 0
        uv_test_p = 0
        oil_test_p = 0
        final_test_p = 0
        approved_tractor_p = 0
        dsn_created_q = 0
        running_test_q = 0
        uv_test_q = 0
        oil_test_q = 0
        final_test_q = 0
        approved_tractor_q = 0
        dsn_created_r = 0
        running_test_r = 0
        uv_test_r = 0
        oil_test_r = 0
        final_test_r = 0
        approved_tractor_r = 0
        dsn_created_s = 0
        running_test_s = 0
        uv_test_s = 0
        oil_test_s = 0
        final_test_s = 0
        approved_tractor_s = 0
        for i in vins:   
            # print("f"datetime.now())
            utc_to_local_time = i.DSN_start_time.replace(tzinfo=None)+ timedelta(hours=5,minutes=30)
            hourly_time=utc_to_local_time.strftime("%H:%M:%S")
            if hourly_time>='00:00:01' and hourly_time<='00:59:59':
                vinn=i.vin.encode("utf-8")
                # print('vinss',vinn)
                dsn_created_m += 1
                
            elif hourly_time>='01:00:00' and hourly_time<='01:59:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_n += 1
                
            elif hourly_time>='02:00:00' and hourly_time<='02:59:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_o += 1
                
            elif hourly_time>='03:00:00' and hourly_time<='03:59:59':
                
                vinn=i.vin.encode("utf-8")
                dsn_created_p += 1
               
            elif hourly_time>='04:00:00' and hourly_time<='04:59:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_q += 1
                
            elif hourly_time>='05:00:00' and hourly_time<='05:59:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_r += 1
                
                
            elif hourly_time>='06:00:00' and hourly_time<='06:59:59':
                vinn=i.vin.encode("utf-8")
                dsn_created_s += 1
                
        
        for i in vins_stationwise:   
            utc_to_local_time = i.created_time.replace(tzinfo=None)+ timedelta(hours=5,minutes=30)
            hourly_time=utc_to_local_time.strftime("%H:%M:%S")
            # print(hourly_time)
            if hourly_time>='00:00:01' and hourly_time<='00:59:59':
                if i.stations_id == 33:
                    running_test_m += 1
                
                if i.stations_id == 43:
                    oil_test_m += 1
                if i.stations_id == 29:
                    uv_test_m += 1
                
                if i.stations_id == 30:
                    final_test_m += 1
                    if i.is_approval == True:
                        approved_tractor_m += 1

            elif hourly_time>='01:00:00' and hourly_time<='01:59:59':                
                if i.stations_id == 33:
                    running_test_n += 1
                
                if i.stations_id == 43:
                    oil_test_n += 1
                
                if i.stations_id == 29:
                    uv_test_n += 1
                
                if i.stations_id == 30:
                    final_test_n += 1
                    if i.is_approval == True:
                        approved_tractor_n += 1

            elif hourly_time>='02:00:00' and hourly_time<='02:59:59':
                if i.stations_id == 33:
                    running_test_o += 1
                
                if i.stations_id == 43:
                    oil_test_o += 1
                
                if i.stations_id == 29:
                    uv_test_o += 1
                
                if i.stations_id == 30:
                    final_test_o += 1
                    if i.is_approval == True:
                        approved_tractor_o += 1

            elif hourly_time>='03:00:00'and hourly_time<='03:59:59':
                if i.stations_id == 33: 
                    running_test_p += 1
                
                if i.stations_id == 43: 
                    oil_test_p += 1
                
                if i.stations_id == 29: 
                    uv_test_p += 1
                
                if i.stations_id == 30: 
                    final_test_p += 1
                    if i.is_approval == True:
                        approved_tractor_p += 1
            elif hourly_time>='04:00:00' and hourly_time<='04:59:59':
                if  i.stations_id == 33: 
                    running_test_q += 1
                
                if i.stations_id == 43: 
                    oil_test_q += 1
                
                if i.stations_id == 29 :
                    uv_test_q += 1
                
                if i.stations_id == 30: 
                    final_test_q += 1
                    if i.is_approval == True:
                        approved_tractor_q += 1

            elif hourly_time>='05:00:00' and hourly_time<='05:59:59':
                if  i.stations_id == 33: 
                    running_test_r += 1
                
                if i.stations_id == 43: 
                    oil_test_r += 1
                
                if i.stations_id == 29 :
                    uv_test_r += 1
                
                if i.stations_id == 30: 
                    final_test_r += 1
                    if i.is_approval == True:
                        approved_tractor_r += 1
            elif hourly_time>='06:00:00' and hourly_time<='06:59:59':
                if i.stations_id == 33: 
                    running_test_s += 1
                
                if i.stations_id == 43: 
                    oil_test_s += 1
                
                if i.stations_id == 29 :
                    uv_test_s += 1
                
                if i.stations_id == 30: 
                    final_test_s += 1
                    if i.is_approval == True:
                        approved_tractor_s += 1

            
               
        shift_3_DSN_created= [dsn_created_m,dsn_created_n,dsn_created_o,dsn_created_p,dsn_created_q,dsn_created_r,dsn_created_s,]
        shift3_running_test = [running_test_m,running_test_n,running_test_o,running_test_p,running_test_q,running_test_r,running_test_s,]
        shift3_uv_test = [uv_test_m,uv_test_n,uv_test_o,uv_test_p,uv_test_q,uv_test_r,uv_test_s,]
        shift3_oil_test = [oil_test_m,oil_test_n,oil_test_o,oil_test_p,oil_test_q,oil_test_r,oil_test_s,]
        shift3_final_test = [final_test_m,final_test_n,final_test_o,final_test_p,final_test_q,final_test_r,final_test_s,]
        shift3_approved_tractor = [approved_tractor_m,approved_tractor_n,approved_tractor_o,approved_tractor_p,approved_tractor_q,approved_tractor_r,approved_tractor_s]

        
        shift_2_list = zip(
            shift2_start_time,shift2_end_time,hour_2,shift_2_DSN_created,shift2_running_test,shift2_uv_test,shift2_oil_test,shift2_final_test,shift_2_approved_tractor
        )
        
        
        shift_1_list = zip(
            shift1_start_time,shift1_end_time,hour,shift_1_DSN_created,shift1_running_test,shift1_uv_test,shift1_oil_test,shift1_final_test,shift_1_approved_tractor
        )

        shift_3_list =  zip(
            shift3_start_time,shift3_end_time,hour_3,shift_3_DSN_created,shift3_running_test,shift3_uv_test,shift3_oil_test,shift3_final_test,shift3_approved_tractor
        )

        context = {
            "dates_view": dates_view,
            "shift_1_list": shift_1_list,
            'shift_2_list':shift_2_list,
            'shift_3_list':shift_3_list,
            'dates_view':dates_view
        }
        # print(datetime.now())
        # cursor.close()
        return render(request, "reports/dsn_hourlyreport_table.html", context)

    
    def get_query(self, request):
        query=Q()
        user = get_user_dict(self.request)
        if user['plant'] != '':
            plant = user['plant']
        else:
            plant = request.POST.get('plant')
        if plant != 'All':
            query &=Q(stations__cells__plants__id=plant)
        if request.POST.get('model') != 'All':
           query &=Q(model__id=request.POST.get('model'))
       # if request.POST.get('shift') != 'All':
       #    query &=Q(shift__id=request.POST.get('shift'))
        if request.POST.get('DSNtype') != 'All':
           query &=Q(model__DSN_type_id=request.POST.get('DSNtype'))
        return query


class InpectionSkipFilterView(LoginRequiredMixin, View):
    # template_name = 'reports/defects_summary.html'

    def get(self,request):
        user = get_user_dict(self.request)
        plants = Plants.objects.all()
        if user['plant'] != '':
            # import pdb;pdb.set_trace()
            plants = plants.filter(id=user['plant'])
            cells = Cells.objects.filter(plants__in = plants)
            station = Stations.objects.filter(cells__in = cells)
            station_id_list = station.values_list('id', flat=True)
            model_station = ModelStations.objects.filter(station__in = station_id_list).values_list('model',flat=True)
            model = Models.objects.filter(id__in=model_station)
            basemodel_list = model.values_list('base_models', flat=True)
            basemodel = BaseModels.objects.filter(id__in=basemodel_list)
            station_group = StationGroups.objects.all()
            market = Market.objects.all()
            shift = Shifts.objects.all()
        else:
            # import pdb;pdb.set_trace()
            cells = Cells.objects.filter(plants__in = plants)
            station = Stations.objects.filter(cells__in = cells)
            station_id_list = station.values_list('id', flat=True)
            model_station = ModelStations.objects.filter(station__in = station_id_list).values_list('model',flat=True)
            model = Models.objects.filter(id__in=model_station)
            basemodel_list = model.values_list('base_models', flat=True)
            basemodel = BaseModels.objects.filter(id__in=basemodel_list)
            station_group = StationGroups.objects.all()
            market = Market.objects.all()
            shift = Shifts.objects.all()
        return render(
            request,
                'reports/inspection_skip.html',
            {
                'plants': plants, 'station':station, 'model':model,
                'basemodel':basemodel, 'station_group':station_group,'market':market,'shift':shift
            }
            )


class InpectionSkipSearchView(View):
    common = Common()
    def post(self, request, *args, **kwargs):
        # import pdb;pdb.set_trace()
        from_date =self.common.parse_date(
            request.POST.get('from_date'))
        to_date = self.common.parse_date(
            request.POST.get('to_date'))
        if "form[contact]" not in request.POST:
            rft_ppm = "rft"
        else:
            rft_ppm = request.POST['form[contact]']
        date_list = self.common.get_date_lists(from_date, to_date)
        inspection_defect_and_defect_closure = [] 
        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        vin_obj = VinDetails.objects.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        user = get_user_dict(self.request)
        dates_view = "Inspection Skip Report For {0} to {1}".format(
            request.POST["from_date"], request.POST["to_date"]
        )
        # import pdb;pdb.set_trace()
        for _date in date_list:
            _date = str(_date).split('-')
            _date.reverse()
            query = self.get_query(request, _date)
            if query:
                vins = vin_obj.filter(query).filter(created_time__contains='-'.join(_date))
                # if  request.POST.get('station_group') !='All' and request.POST.get('station') =='All':
                #     # import  pdb;pdb.set_trace
            else:
                vins = vin_obj.filter(created_time__contains='-'.join(_date))
            for vin in vins:
                    inspection_defects_obj = InspectionDefects.objects.filter(vin=vin.id)
                    for inspection_defect in inspection_defects_obj:
                        if request.POST.get('plant') != 'All':
                            inspection_skip_station = Stations.objects.filter(cells__plants__id = request.POST.get('plant'),stages__parts__description = inspection_defect.parts)
                        else:
                            inspection_skip_station = Stations.objects.filter(stages__parts__description = inspection_defect.parts)
                        defect_approved_station = list(inspection_skip_station.values_list('id',flat=True))
                        defect_created_station = list(VinDetails.objects.filter(id = vin.id).values_list('stations',flat = True))
                        if defect_approved_station != defect_created_station:
                            try:
                                defects_closure = DefectClosure.objects.get(
                                    inspection_defects = inspection_defect.id 
                                )
                            except:
                                defects_closure = ""
                            vin_status = VinStatusGroupWise.objects.get(vin=inspection_defect.vin)
                            inspection_defect_and_defect_closure.append({
                                "date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
                                "vin":vin,
                                "inspection_defect":inspection_defect,
                                "defect_closure":defects_closure,
                                "vin_status":vin_status,
                                "inspection_skip_station":",".join(str(defect.description) for defect in inspection_skip_station),
                            })
        response = self.render_defect_details_to_template(
            inspection_defect_and_defect_closure,dates_view, request
        )
        return JsonResponse(response, safe=False)
            


    def render_defect_details_to_template(self,data,dates_view, request):
        # zib_file = zip(data,inspection_skip_station)
        template = TemplateResponse(request, 'reports/inspection_skip_table.html', {
            'datas': data,
            'dates_view':dates_view,
            'Product_name':Product_name
        })
        template.render()
        return template.content   

    def get_query(self, request, date):
        query=Q()
        user = get_user_dict(self.request)
        # import pdb;pdb.set_trace()
        if user['plant'] != '':
            plant = user['plant']
        else:
            plant = request.POST.get('plant')
        if plant != 'All':
            query &=Q(stations__cells__plants__id=plant)
        if request.POST.get('market') != 'All':
            query &=Q(model__market__id=request.POST.get('market'))
        if request.POST.get('basemodel') != 'All':
            query &=Q(model__base_models__id=request.POST.get('basemodel'))
        if request.POST.get('model') != 'All':
           query &=Q(model__id=request.POST.get('model'))
        if  request.POST.get('station_group') =='All' and request.POST.get('station') !='All':
            query &=Q(stations__id=request.POST.get('station'))
        if  request.POST.get('station_group') !='All' and request.POST.get('station') =='All':
            stations_id = ModelStations.objects.filter(station_group=request.POST.get('station_group')).values_list('station', flat=True)
            query &=Q(stations__id__in=stations_id)
        # if request.POST.get('station') != 'All':
        #    query &=Q(stations__id=request.POST.get('station'))
        if request.POST.get('shift') != 'All':
           query &=Q(shift__id=request.POST.get('shift'))
        return query

class DefectStationMappingView(View):
    # template_name = 'reports/defects_summary.html'

    def get(self,request):
        user = get_user_dict(self.request)
        plants = Plants.objects.all() 
        if user['plant'] != '':
            # import pdb;pdb.set_trace()
            plants = plants.filter(id=user['plant'])
            cells = Cells.objects.filter(plants__in = plants)
            station = Stations.objects.filter(cells__in = cells)
            station_id_list = station.values_list('id', flat=True)
            model_station = ModelStations.objects.filter(station__in = station_id_list).values_list('model',flat=True)
            model = Models.objects.filter(id__in=model_station)
            basemodel_list = model.values_list('base_models', flat=True)
            basemodel = BaseModels.objects.filter(id__in=basemodel_list)
            station_group = StationGroups.objects.all()
            market = Market.objects.all()
            shift = Shifts.objects.all()
        else:
            # import pdb;pdb.set_trace()
            cells = Cells.objects.filter(plants__in = plants)
            station = Stations.objects.filter(cells__in = cells)
            station_id_list = station.values_list('id', flat=True)
            model_station = ModelStations.objects.filter(station__in = station_id_list).values_list('model',flat=True)
            model = Models.objects.filter(id__in=model_station)
            basemodel_list = model.values_list('base_models', flat=True)
            basemodel = BaseModels.objects.filter(id__in=basemodel_list)
            station_group = StationGroups.objects.all()
            market = Market.objects.all()
            shift = Shifts.objects.all()
        return render(
            request,
                'reports/defect_station_mapping.html',
            {
                'plants': plants, 'station':station, 'model':model,
                'basemodel':basemodel, 'station_group':station_group,'market':market,'shift':shift
            }
            )


class DefectStationMappingSearchView(View):
    common = Common()
    def post(self, request, *args, **kwargs):
        # import pdb;pdb.set_trace()
        from_date =self.common.parse_date(
            request.POST.get('from_date'))
        to_date = self.common.parse_date(
            request.POST.get('to_date'))
        if "form[contact]" not in request.POST:
            rft_ppm = "rft"
        else:
            rft_ppm = request.POST['form[contact]']
        date_list = self.common.get_date_lists(from_date, to_date)
        inspection_defect_and_defect_closure = [] 
        date_from = (datetime.strptime(request.POST.get('from_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        date_to = (datetime.strptime(request.POST.get('to_date'), "%d-%m-%Y %H:%M:%S")-td(hours=5,minutes=30)).strftime('%Y-%m-%d %H:%M:%S')
        vin_obj = VinDetails.objects.extra(where=["created_time >= '%s' and created_time <= '%s'"%(date_from,date_to)])
        user = get_user_dict(self.request)
        dates_view = "Defect Station Mapping Report For {0} to {1}".format(
            request.POST["from_date"], request.POST["to_date"]
        )
        for _date in date_list:
            _date = str(_date).split('-')
            _date.reverse()
            query = self.get_query(request, _date)
            if query:
                vins = vin_obj.filter(query).filter(created_time__contains='-'.join(_date))
                # if  request.POST.get('station_group') !='All' and request.POST.get('station') =='All':
                #     # import  pdb;pdb.set_trace
            else:
                vins = vin_obj.filter(created_time__contains='-'.join(_date))
            for vin in vins:
                    inspection_defects_obj = InspectionDefects.objects.filter(vin=vin.id)
                    for inspection_defect in inspection_defects_obj:
                        if request.POST.get('plant') != 'All':
                            inspection_skip_station = Stations.objects.filter(cells__plants__id = request.POST.get('plant'),stages__parts__description = inspection_defect.parts)
                        else:
                            inspection_skip_station = Stations.objects.filter(stages__parts__description = inspection_defect.parts)
                        station_stage_mapping = Stages.objects.filter(parts__description = inspection_defect.parts)
                        defect_approved_station = list(inspection_skip_station.values_list('id',flat=True))
                        defect_created_station = list(VinDetails.objects.filter(id = vin.id).values_list('stations',flat = True))
                        if defect_approved_station != defect_created_station:
                            try:
                                defects_closure = DefectClosure.objects.get(
                                    inspection_defects = inspection_defect.id 
                                )
                            except:
                                defects_closure = ""
                            vin_status = VinStatusGroupWise.objects.get(vin=inspection_defect.vin)
                            inspection_defect_and_defect_closure.append({
                                "date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
                                "vin":vin,
                                "inspection_defect":inspection_defect,
                                "defect_closure":defects_closure,
                                "vin_status":vin_status,
                                "inspection_skip_station":",".join(str(defect.description) for defect in inspection_skip_station),
                                "station_stage_mapping":",".join(str(defect.description) for defect in station_stage_mapping),
                            })
        response = self.render_defect_details_to_template(
            inspection_defect_and_defect_closure,dates_view, request
        )
        return JsonResponse(response, safe=False)

    def render_defect_details_to_template(self, data,dates_view, request):
        # zib_file = zip(data,inspection_skip_station)
        template = TemplateResponse(request, 'reports/defect_station_mapping_table.html', {
            'datas': data,
            'dates_view':dates_view,
            'Product_name':Product_name
        })
        template.render()
        return template.content   

    def get_query(self, request, date):
        query=Q()
        user = get_user_dict(self.request)
        # import pdb;pdb.set_trace()
        if user['plant'] != '':
            plant = user['plant']
        else:
            plant = request.POST.get('plant')
        if plant != 'All':
            query &=Q(stations__cells__plants__id=plant)
        if request.POST.get('market') != 'All':
            query &=Q(model__market__id=request.POST.get('market'))
        if request.POST.get('basemodel') != 'All':
            query &=Q(model__base_models__id=request.POST.get('basemodel'))
        if request.POST.get('model') != 'All':
           query &=Q(model__id=request.POST.get('model'))
        if  request.POST.get('station_group') =='All' and request.POST.get('station') !='All':
            query &=Q(stations__id=request.POST.get('station'))
        if  request.POST.get('station_group') !='All' and request.POST.get('station') =='All':
            stations_id = ModelStations.objects.filter(station_group=request.POST.get('station_group')).values_list('station', flat=True)
            query &=Q(stations__id__in=stations_id)
        # if request.POST.get('station') != 'All':
        #    query &=Q(stations__id=request.POST.get('station'))
        if request.POST.get('shift') != 'All':
           query &=Q(shift__id=request.POST.get('shift'))
        return query

class Defectmodifyview(LoginRequiredMixin, TemplateView):
    template_name = 'reports/defects_modify.html'

    def get_context_data(self, **kwargs):
        context = super(Defectmodifyview, self).get_context_data(**kwargs)
        vin_summary_form = VinSummaryForm()
        context = {
            'vin_summary_form': vin_summary_form
        }
        return context
    def post(self, request, *args, **kwargs):
        # if request.POST.get('vin') != None:
        if request.POST.get('defectsmodifyid') == None:
            vin_detail = VinDetails.objects.filter(vin=request.POST.get('vin'))
            inspection_defect_and_defect_closure = []
            if len(vin_detail) > 0:
                # import pdb;pdb.set_trace()
                for vin in vin_detail:
                        thetime = datetime.now() - timedelta(hours=[int(y.Value) for y in settings.objects.all()][0])
                        inspection_defects_obj = InspectionDefects.objects.filter(vin=vin.id)
                        if inspection_defects_obj:
                            for inspection_defect in inspection_defects_obj:
                                try:
                                    defects_closure = DefectClosure.objects.get(
                                        inspection_defects = InspectionDefects.id 
                                    )
                                except:
                                    defects_closure = ""
                                # print (vin)
                                if inspection_defect:
                                    if inspection_defect.checkpoints:
                                        inspection_defect_and_defect_closure.append({
                                            #"date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
                                            "vin":vin,
                                            "inspection_defect":inspection_defect,
                                            "defect_closure":defects_closure,
                                        })
                        defects=Defects.objects.all()
                        category=DefectCategories.objects.all()
                        sourcegate=SourceGates.objects.all()
                response = self.render_to_template(
                            inspection_defect_and_defect_closure,defects,category,sourcegate, request
                        )
                return JsonResponse(response, safe=False)
            else:
                defects_closure = ""
                inspection_defect = ""
                vin ="" 
                inspection_defect_and_defect_closure.append({
                        #"date": parse('-'.join(_date)).strftime('%d-%m-%Y'),#vin_status_obj[len(vin_status_obj)-1].last_modified_date,
                        "vin":vin,
                        "inspection_defect":inspection_defect,
                        "defect_closure":defects_closure,
                    })
                response = self.render_to_template(
                    inspection_defect_and_defect_closure, request
                )
                return JsonResponse(response, safe=False)
        else:
            # import pdb;pdb.set_trace()
            inspection_defect_and_defect_closure = InspectionDefects.objects.get(id=request.POST.get('defectsmodifyid'))
            defects_desc = Defects.objects.filter(id=request.POST.get('defects')).get()
            inspection_defect_and_defect_closure.defects_id=defects_desc.id
            inspection_defect_and_defect_closure.source_gate_id = int(str(request.POST.get('sourcegates')))
            inspection_defect_and_defect_closure.save()
            response = self.render_to_template(
                    inspection_defect_and_defect_closure, request
                )
            return JsonResponse(response= True, safe=False,)
    def render_to_template(self, data,defects,category,sourcegate, request):
        template = TemplateResponse(request, 'reports/defects_modify_table.html', {
        'datas': data,
        'defects': defects,
        'category':category,
        'sourcegate':sourcegate

        })
        template.render()
        return template.content

        
class DefectModifyFilter(View):

    def post(self,request):
        # import pdb;pdb.set_trace()
        type = request.POST.get('type')
        value = request.POST.get('value')
        result = []
        sourcegate = []
        if type == 'parts':
            cursor = connection.cursor()
            query ="select * from defects where id in (select defects_id from parts_defects where parts_id =" +  value +")"
            cursor.execute(query, [])
            rows = cursor.fetchall()
            result = [[x[0],x[1]] for x in rows]
            cursor.close()
        elif type == 'defects':
            cursor = connection.cursor()
            query ="select * from defectcategories where id in (select defectcategories_id from defects where defects.id =" + '"' + value + '"' + ")"
            cursor.execute(query, [])
            rows = cursor.fetchall()
            result = [[x[0],x[1]] for x in rows]
            cursor.close()
        # elif type == 'category':
            cursor = connection.cursor()
            query = "select * from sourcegate where id in (select sourcegates_id from defects where defects.id =" + '"' + value + '"' + ")"
            cursor.execute(query,[])
            rows = cursor.fetchall()
            sourcegate = [[x[0],x[1]] for x in rows]
            cursor.close()
        response = { "value": result, "type": type, "sourcegate": sourcegate  }
        return JsonResponse(response, safe=False)



from rest_framework.views import APIView
from traceability.models import *
from device_data.models import *
class TravelCardSearchView(View):

    def get(self, request, *args, **kwargs):
        # import pdb;pdb.set_trace()
        vin ='757676776'
        count = 0
        vinrecord = VinDetails.objects.filter(vin = vin, users_id__roles_id__description = "Operator")
        inspection_data = []
        processparameter = []
        parttraceability = []
        dict_data = {
                # "vin":vin,
                "stations":[]
            }
        dictstation = {}
        # table_data = ControlPlan.objects.filter(is_active=True).values( pk=F('id'),part_number=F('part__tafe_part_id'),part_name=F('part__name'),vendor_code=F('supplier__vendor_code'),vendor_name =F('supplier__vendor_name'),cp_version=F('inprocess_version'),pdi_version=F('PDI_version'), created_on_coverted=ExpressionWrapper( F('created_on') + timedelta(days=1, hours=-11, seconds=-4860), output_field=DateTimeField() ) )    
        for _vin in vinrecord:
            # print(1)
            del inspection_data[:]
            # print(str(Stations.objects.get(id = _vin.stations_id).description),)
            model = Models.objects.get(id = _vin.model_id)
            modelstation = ModelStations.objects.get(model = _vin.model_id,station=_vin.stations_id)
            
            checkpoints = Checkpoints.objects.filter(modelstations = modelstation)
            
            for points in checkpoints:
                # print(points)
                jsondata = {
                    "Plant": str(Plants.objects.get(id = _vin.plant_id).plant_name), 
                    "Station": str(Stations.objects.get(id = _vin.stations_id).description),
                    "Stage": "", 
                    "Checking parameters/Check points": str(points.description),
                    "Inspection Type":"",
                    "Status":"",
                    "Part":"",
                    "Defect":"",
                    "Created By":str(Users.objects.get(id = _vin.users_id).name),
                    "Created Time":str(_vin.created_time),
                    "Reapir Code":"",
                    "Catagery":"",	
                    "Closed Time":str(_vin.closed_time),
                    "close By User":str(Users.objects.get(id = _vin.users_id).name)
                    }
                inspection_data.append(jsondata)
            # print(inspection_data)
            # import pdb;pdb.set_trace()
            process_traceability = ProcessParameterTraceability.objects.filter(VinId = _vin.id)
            for parameter in process_traceability:
                # import pdb;pdb.set_trace()
                jsondata = {
                    "Plant":str(Plants.objects.get(id = _vin.plant_id).plant_name),
                    "Station":str(Stations.objects.get(id = _vin.stations_id).description),
                    "Stage":"",
                    "Process Parameter":str(ProcessParameter.objects.get(Id = parameter.ProcessParameterId.Id).parametername),
                    "Min":"",
                    "Max":"",
                    "Actual Process Tarceabilty Record":str(parameter.Value),
                    "Status":str(parameter.Status),
                    "Created Time":str(parameter.CreatedTime),
                    "Created By":str(Users.objects.get(id = parameter.CreatedBy.id).name)
                }
                processparameter.append(jsondata)
            # import pdb;pdb.set_trace()
            traceability = PartTraceability.objects.filter(vin = _vin.id)
            for trace in traceability:
                jsondata = {
                    "Plant":str(Plants.objects.get(id = _vin.plant_id).plant_name),
                    "Station":str(Stations.objects.get(id = _vin.stations_id).description),
                    "Stage":"",
                    "Part Number":str(BillOfMaterial.objects.get(id = trace.bill_of_material.id).part_number),
                    "Part Name":str(BillOfMaterial.objects.get(id = trace.bill_of_material.id).part_description),
                    "Part Tarceabilty Records":str(trace.serial_number),
                    "Created Time":str(trace.created_date),
                    "Created By":str(Users.objects.get(id = trace.created_by.id).name)
                }
                parttraceability.append(jsondata)
            dictstation["station"] = {
                    "id":_vin.stations_id,
                    "name":str(Stations.objects.get(id = _vin.stations_id).description),
                    # "data":{}
                }
            # import pdb;pdb.set_trace()
            dictstation["station"]["inspectionssss"] = inspection_data
            dictstation["station"]["processparameterssssssssss"] = processparameter
            
            dictstation["station"]["parttraceabilitysssss"] = parttraceability
            dict_data['stations'].append(dictstation)
            
            # del inspection_data[:]
            
            
            
            # count += 1
            # print(dictstation)
            
            
            # dict_data['stations'] = dictstation
        # import pdb;pdb.set_trace()
        print(dict_data)
        return render(request, 'reports/travelcardfilter.html', {'dictdata':dict_data,"vin":vin,"modelnumber":model.sales_code,"modeldescription":model.description,"parttraceability":parttraceability})
# 'Created By','Created Time','Repair Code','Catagery','Closed Time','close By User']
        # template = TemplateResponse(request, 'reports/travelcardfilter.html', {'headers': headers})
        # template.render()
        # templatecontent = template.content
        # response = templatecontent.replace("\n", "")
        # # return JsonResponse(response, safe=False)
